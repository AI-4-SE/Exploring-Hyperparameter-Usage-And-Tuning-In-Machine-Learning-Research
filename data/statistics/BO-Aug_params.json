{
    "CIFAR/all/custom_ops.py": {
        "tensorflow": {
            "get_variable_35": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, int(x.shape[1]), int(x.shape[2]), 1)",
                            "Tuple"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_127": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(inputs.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_166": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-unif_init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "unif_init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_units_out ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_174": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "xw_plus_b_181": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='biases', shape=[num_units_out], dtype=tf.float32, initializer=bias_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, ksize=kernel_size, strides=(1, 1, 1, 1), padding='VALID', data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "squeeze_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "FC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_191": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/all/data_utils.py": {
        "tensorflow": {
            "info_180": {
                "msg": {
                    "value": "'loading file: {}'.format(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_105": {
                "msg": {
                    "value": "'mean:{}    std: {}'.format(mean, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_110": {
                "msg": {
                    "value": "'In CIFAR10 loader, number of images: {}'.format(len(all_data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_67": {
                "msg": {
                    "value": "Cifar10",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/all/helper_utils.py": {
        "tensorflow": {
            "softmax_28": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.val_labels",
                            "Attribute"
                        ],
                        [
                            "data_loader.test_labels",
                            "Attribute"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_39": {
                "x": {
                    "value": "weight_decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "'model.batch_size is {}'.format(model.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "'steps per epoch: {}'.format(steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'lr of {} for epoch {}'.format(curr_lr, curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_148": {
                "msg": {
                    "value": "'Train accuracy: {}'.format(train_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_39": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "l2_loss_38": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_137": {
                "msg": {
                    "value": "'Training {}/{}'.format(step, steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/all/shake_drop.py": {
        "tensorflow": {
            "relu_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "'bottleneck_{}'.format(prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_74": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(bern_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_86": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/all/shake_shake.py": {
        "tensorflow": {
            "avg_pool_33": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_43": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(path2, int(output_filters / 2), 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "final_path",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_86": {
                "variable": {
                    "value": "total_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_forward for samp in rand_forward]",
                            "ListComp"
                        ],
                        [
                            "rand_forward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_87": {
                "variable": {
                    "value": "total_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_backward for samp in rand_backward]",
                            "ListComp"
                        ],
                        [
                            "rand_backward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_40": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_99": {
                "inputs": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "L1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "L2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "L3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_63": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "'branch_{}'.format(branch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/all/train_cifar.py": {
        "tensorflow": {
            "DEFINE_string_38": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "wrn",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "wrn, shake_shake_32, shake_shake_96, shake_shake_112, pyramid_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../tmp",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training Directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../dataset/CIFAR-10",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where dataset is located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "cifar10",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dataset to train with. Either cifar10 or cifar100",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "use_cpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "1 if use CPU, else GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_122": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.lr_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lrn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_165": {
                "variable": {
                    "value": "(self.accuracy, self.eval_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.predictions, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_181": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_194": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_195": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_203": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr_rate_ph",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_211": {
                "variable": {
                    "value": "train_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_247": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_290": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_479": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_156": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_179": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_188": {
                "msg": {
                    "value": "'number of trainable params: {}'.format(self.num_trainable_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_197": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.cost, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams.gradient_clipping_by_global_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_213": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_243": {
                "msg": {
                    "value": "Saved child model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_266": {
                "msg": {
                    "value": "Evaluating child model in mode %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_343": {
                "msg": {
                    "value": "'Finished epoch: {}'.format(curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_344": {
                "msg": {
                    "value": "'Epoch time(min): {}'.format((time.time() - start_time) / 60.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_355": {
                "msg": {
                    "value": "'Test Accuracy: {}'.format(test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_390": {
                "msg": {
                    "value": "'Train Acc: {}    Valid Acc: {}     Test Acc: {}'.format(training_accuracy, valid_accuracy, test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_166": {
                "input": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_178": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_199": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_212": {
                "control_inputs": {
                    "value": "[apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "IsDirectory_240": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_241": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_250": {
                "msg": {
                    "value": "Loaded child model checkpoint from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(self.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_363": {
                "device_name": {
                    "value": "/cpu:0 if FLAGS.use_cpu else /gpu:0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "info_373": {
                "msg": {
                    "value": "'Before Training Epoch: {}     Val Acc: {}'.format(starting_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_292": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_384": {
                "msg": {
                    "value": "'Epoch: {}    test Acc: {}'.format(curr_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_275": {
                "msg": {
                    "value": "'Eval child model accuracy: {}'.format(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_280": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "Saving model after epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_342": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/all/wrn.py": {
        "tensorflow": {
            "relu_65": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'unit_{}_0'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(block_num, i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/reduced/custom_ops.py": {
        "tensorflow": {
            "get_variable_35": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, int(x.shape[1]), int(x.shape[2]), 1)",
                            "Tuple"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_127": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(inputs.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_166": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-unif_init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "unif_init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_units_out ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_174": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "xw_plus_b_181": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='biases', shape=[num_units_out], dtype=tf.float32, initializer=bias_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, ksize=kernel_size, strides=(1, 1, 1, 1), padding='VALID', data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "squeeze_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "FC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_191": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/reduced/data_utils_4000.py": {
        "tensorflow": {
            "info_172": {
                "msg": {
                    "value": "'loading file: {}'.format(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_95": {
                "msg": {
                    "value": "'mean:{}    std: {}'.format(mean, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_102": {
                "msg": {
                    "value": "'In CIFAR10 loader, number of images: {}'.format(len(all_data) + len(test_data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_60": {
                "msg": {
                    "value": "Cifar10",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/reduced/helper_utils.py": {
        "tensorflow": {
            "softmax_28": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.val_labels",
                            "Attribute"
                        ],
                        [
                            "data_loader.test_labels",
                            "Attribute"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_39": {
                "x": {
                    "value": "weight_decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "'model.batch_size is {}'.format(model.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "'steps per epoch: {}'.format(steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'lr of {} for epoch {}'.format(curr_lr, curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_148": {
                "msg": {
                    "value": "'Train accuracy: {}'.format(train_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_39": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "l2_loss_38": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_137": {
                "msg": {
                    "value": "'Training {}/{}'.format(step, steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/reduced/shake_drop.py": {
        "tensorflow": {
            "relu_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "'bottleneck_{}'.format(prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_74": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(bern_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_86": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/reduced/shake_shake.py": {
        "tensorflow": {
            "avg_pool_33": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_43": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(path2, int(output_filters / 2), 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "final_path",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_86": {
                "variable": {
                    "value": "total_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_forward for samp in rand_forward]",
                            "ListComp"
                        ],
                        [
                            "rand_forward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_87": {
                "variable": {
                    "value": "total_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_backward for samp in rand_backward]",
                            "ListComp"
                        ],
                        [
                            "rand_backward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_40": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_99": {
                "inputs": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "L1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "L2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "L3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_63": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "'branch_{}'.format(branch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/reduced/train_cifar.py": {
        "tensorflow": {
            "DEFINE_string_38": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "wrn",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "wrn, shake_shake_32, shake_shake_96, shake_shake_112, pyramid_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../tmp",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training Directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../dataset",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where dataset is located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "cifar10",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dataset to train with. Either cifar10 or cifar100",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "use_cpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "1 if use CPU, else GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_122": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.lr_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lrn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_165": {
                "variable": {
                    "value": "(self.accuracy, self.eval_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.predictions, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_181": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_194": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_195": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_203": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr_rate_ph",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_211": {
                "variable": {
                    "value": "train_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_247": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_290": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_479": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_156": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_179": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_188": {
                "msg": {
                    "value": "'number of trainable params: {}'.format(self.num_trainable_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_197": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.cost, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams.gradient_clipping_by_global_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_213": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_243": {
                "msg": {
                    "value": "Saved child model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_266": {
                "msg": {
                    "value": "Evaluating child model in mode %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_343": {
                "msg": {
                    "value": "'Finished epoch: {}'.format(curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_344": {
                "msg": {
                    "value": "'Epoch time(min): {}'.format((time.time() - start_time) / 60.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_355": {
                "msg": {
                    "value": "'Test Accuracy: {}'.format(test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_390": {
                "msg": {
                    "value": "'Train Acc: {}    Valid Acc: {}     Test Acc: {}'.format(training_accuracy, valid_accuracy, test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_166": {
                "input": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_178": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_199": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_212": {
                "control_inputs": {
                    "value": "[apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "IsDirectory_240": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_241": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_250": {
                "msg": {
                    "value": "Loaded child model checkpoint from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(self.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_363": {
                "device_name": {
                    "value": "/cpu:0 if FLAGS.use_cpu else /gpu:0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "info_373": {
                "msg": {
                    "value": "'Before Training Epoch: {}     Val Acc: {}'.format(starting_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_292": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_384": {
                "msg": {
                    "value": "'Epoch: {}    test Acc: {}'.format(curr_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_275": {
                "msg": {
                    "value": "'Eval child model accuracy: {}'.format(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_280": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "Saving model after epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_342": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/reduced/wrn.py": {
        "tensorflow": {
            "relu_65": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'unit_{}_0'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(block_num, i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/select/bo_train_cifar.py": {
        "tensorflow": {
            "group_116": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_121": {
                "variable": {
                    "value": "self.lr_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lrn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_159": {
                "variable": {
                    "value": "(self.accuracy, self.eval_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.predictions, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_175": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_188": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_189": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr_rate_ph",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_205": {
                "variable": {
                    "value": "train_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_241": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_284": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_403": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_150": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_173": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_182": {
                "msg": {
                    "value": "'number of trainable params: {}'.format(self.num_trainable_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_191": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.cost, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams.gradient_clipping_by_global_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_207": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_237": {
                "msg": {
                    "value": "Saved child model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_260": {
                "msg": {
                    "value": "Evaluating child model in mode %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_337": {
                "msg": {
                    "value": "'Finished epoch: {}'.format(curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "'Epoch time(min): {}'.format((time.time() - start_time) / 60.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_349": {
                "msg": {
                    "value": "'Test Accuracy: {}'.format(test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_383": {
                "msg": {
                    "value": "'Train Acc: {}    Valid Acc: {}     Test Acc: {}'.format(training_accuracy, valid_accuracy, test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_160": {
                "input": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_172": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_193": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_206": {
                "control_inputs": {
                    "value": "[apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "IsDirectory_234": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_235": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_244": {
                "msg": {
                    "value": "Loaded child model checkpoint from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(self.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_357": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_366": {
                "msg": {
                    "value": "'Before Training Epoch: {}     Val Acc: {}'.format(starting_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_286": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_377": {
                "msg": {
                    "value": "'Epoch: {}    test Acc: {}'.format(curr_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_269": {
                "msg": {
                    "value": "'Eval child model accuracy: {}'.format(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_274": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_332": {
                "msg": {
                    "value": "Saving model after epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_336": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/select/custom_ops.py": {
        "tensorflow": {
            "get_variable_35": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, int(x.shape[1]), int(x.shape[2]), 1)",
                            "Tuple"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_127": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(inputs.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_166": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-unif_init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "unif_init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_units_out ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_174": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "xw_plus_b_181": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='biases', shape=[num_units_out], dtype=tf.float32, initializer=bias_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, ksize=kernel_size, strides=(1, 1, 1, 1), padding='VALID', data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "squeeze_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "FC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_191": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/select/data_utils_4000.py": {
        "tensorflow": {
            "info_172": {
                "msg": {
                    "value": "'loading file: {}'.format(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_95": {
                "msg": {
                    "value": "'mean:{}    std: {}'.format(mean, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_102": {
                "msg": {
                    "value": "'In CIFAR10 loader, number of images: {}'.format(len(all_data) + len(test_data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_60": {
                "msg": {
                    "value": "Cifar10",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/select/helper_utils.py": {
        "tensorflow": {
            "softmax_28": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.val_labels",
                            "Attribute"
                        ],
                        [
                            "data_loader.test_labels",
                            "Attribute"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_39": {
                "x": {
                    "value": "weight_decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "'model.batch_size is {}'.format(model.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "'steps per epoch: {}'.format(steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'lr of {} for epoch {}'.format(curr_lr, curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_148": {
                "msg": {
                    "value": "'Train accuracy: {}'.format(train_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_39": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "l2_loss_38": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_137": {
                "msg": {
                    "value": "'Training {}/{}'.format(step, steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/select/shake_drop.py": {
        "tensorflow": {
            "relu_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "'bottleneck_{}'.format(prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_74": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(bern_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_86": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/select/shake_shake.py": {
        "tensorflow": {
            "avg_pool_33": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_43": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(path2, int(output_filters / 2), 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "final_path",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_86": {
                "variable": {
                    "value": "total_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_forward for samp in rand_forward]",
                            "ListComp"
                        ],
                        [
                            "rand_forward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_87": {
                "variable": {
                    "value": "total_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_backward for samp in rand_backward]",
                            "ListComp"
                        ],
                        [
                            "rand_backward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_40": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_99": {
                "inputs": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "L1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "L2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "L3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_63": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "'branch_{}'.format(branch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR/select/wrn.py": {
        "tensorflow": {
            "relu_65": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'unit_{}_0'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(block_num, i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/all/custom_ops.py": {
        "tensorflow": {
            "get_variable_35": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, int(x.shape[1]), int(x.shape[2]), 1)",
                            "Tuple"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_127": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(inputs.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_166": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-unif_init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "unif_init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_units_out ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_174": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "xw_plus_b_181": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='biases', shape=[num_units_out], dtype=tf.float32, initializer=bias_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, ksize=kernel_size, strides=(1, 1, 1, 1), padding='VALID', data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "squeeze_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "FC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_191": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/all/data_utils_1000.py": {
        "tensorflow": {
            "info_52": {
                "msg": {
                    "value": "SVHN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_74": {
                "msg": {
                    "value": "'mean:{}    std: {}'.format(mean, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_81": {
                "msg": {
                    "value": "'In SVHN loader, number of images: {}'.format(len(all_data) + len(test_data))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/all/helper_utils.py": {
        "tensorflow": {
            "softmax_28": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.val_labels",
                            "Attribute"
                        ],
                        [
                            "data_loader.test_labels",
                            "Attribute"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_39": {
                "x": {
                    "value": "weight_decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "'model.batch_size is {}'.format(model.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "'steps per epoch: {}'.format(steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'lr of {} for epoch {}'.format(curr_lr, curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_148": {
                "msg": {
                    "value": "'Train accuracy: {}'.format(train_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_39": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "l2_loss_38": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_137": {
                "msg": {
                    "value": "'Training {}/{}'.format(step, steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/all/shake_drop.py": {
        "tensorflow": {
            "relu_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "'bottleneck_{}'.format(prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_74": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(bern_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_86": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/all/shake_shake.py": {
        "tensorflow": {
            "avg_pool_33": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_43": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(path2, int(output_filters / 2), 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "final_path",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_86": {
                "variable": {
                    "value": "total_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_forward for samp in rand_forward]",
                            "ListComp"
                        ],
                        [
                            "rand_forward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_87": {
                "variable": {
                    "value": "total_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_backward for samp in rand_backward]",
                            "ListComp"
                        ],
                        [
                            "rand_backward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_40": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_99": {
                "inputs": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "L1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "L2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "L3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_63": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "'branch_{}'.format(branch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/all/train_svhn.py": {
        "tensorflow": {
            "DEFINE_string_38": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "shake_shake_96",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "wrn, shake_shake_32, shake_shake_96, shake_shake_112, pyramid_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../tmp",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training Directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../dataset",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where dataset is located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "SVHN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dataset to train with.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "use_cpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "1 if use CPU, else GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_122": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.lr_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lrn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_162": {
                "variable": {
                    "value": "(self.accuracy, self.eval_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.predictions, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_178": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_191": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_192": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr_rate_ph",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_208": {
                "variable": {
                    "value": "train_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_244": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_287": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_476": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_153": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_176": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_185": {
                "msg": {
                    "value": "'number of trainable params: {}'.format(self.num_trainable_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_194": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.cost, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams.gradient_clipping_by_global_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_210": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_240": {
                "msg": {
                    "value": "Saved child model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_263": {
                "msg": {
                    "value": "Evaluating child model in mode %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_340": {
                "msg": {
                    "value": "'Finished epoch: {}'.format(curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_341": {
                "msg": {
                    "value": "'Epoch time(min): {}'.format((time.time() - start_time) / 60.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_352": {
                "msg": {
                    "value": "'Test Accuracy: {}'.format(test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_387": {
                "msg": {
                    "value": "'Train Acc: {}    Valid Acc: {}     Test Acc: {}'.format(training_accuracy, valid_accuracy, test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_163": {
                "input": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_175": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_196": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_209": {
                "control_inputs": {
                    "value": "[apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "IsDirectory_237": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_238": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_247": {
                "msg": {
                    "value": "Loaded child model checkpoint from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(self.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_360": {
                "device_name": {
                    "value": "/cpu:0 if FLAGS.use_cpu else /gpu:0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "info_370": {
                "msg": {
                    "value": "'Before Training Epoch: {}     Val Acc: {}'.format(starting_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_289": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_381": {
                "msg": {
                    "value": "'Epoch: {}    test Acc: {}'.format(curr_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_272": {
                "msg": {
                    "value": "'Eval child model accuracy: {}'.format(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_277": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_335": {
                "msg": {
                    "value": "Saving model after epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_339": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/all/wrn.py": {
        "tensorflow": {
            "relu_65": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'unit_{}_0'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(block_num, i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/reduced/custom_ops.py": {
        "tensorflow": {
            "get_variable_35": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, int(x.shape[1]), int(x.shape[2]), 1)",
                            "Tuple"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_127": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(inputs.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_166": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-unif_init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "unif_init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_units_out ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_174": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "xw_plus_b_181": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='biases', shape=[num_units_out], dtype=tf.float32, initializer=bias_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, ksize=kernel_size, strides=(1, 1, 1, 1), padding='VALID', data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "squeeze_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "FC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_191": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/reduced/data_utils_1000.py": {
        "tensorflow": {
            "info_51": {
                "msg": {
                    "value": "SVHN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_67": {
                "msg": {
                    "value": "'mean:{}    std: {}'.format(mean, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_74": {
                "msg": {
                    "value": "'In SVHN loader, number of images: {}'.format(len(all_data) + len(test_data))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/reduced/helper_utils.py": {
        "tensorflow": {
            "softmax_28": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.val_labels",
                            "Attribute"
                        ],
                        [
                            "data_loader.test_labels",
                            "Attribute"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_39": {
                "x": {
                    "value": "weight_decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "'model.batch_size is {}'.format(model.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "'steps per epoch: {}'.format(steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'lr of {} for epoch {}'.format(curr_lr, curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_148": {
                "msg": {
                    "value": "'Train accuracy: {}'.format(train_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_39": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "l2_loss_38": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_137": {
                "msg": {
                    "value": "'Training {}/{}'.format(step, steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/reduced/shake_drop.py": {
        "tensorflow": {
            "relu_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "'bottleneck_{}'.format(prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_74": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(bern_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.avg_pool(x, 2, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_pre')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 1, scope='1x1_conv_contract')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_1_post')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n, 3, stride=stride, scope='3x3')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, n * 4, 1, scope='1x1_conv_expand')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn_3')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "(prob + expected_alpha - prob * expected_alpha) * x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 2, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "bottleneck_layer(x, round_int(start_channel), 1, prob, is_training, alpha_shake, beta_shake)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_86": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/reduced/shake_shake.py": {
        "tensorflow": {
            "avg_pool_33": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_43": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "ops.conv2d(path2, int(output_filters / 2), 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "final_path",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_86": {
                "variable": {
                    "value": "total_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_forward for samp in rand_forward]",
                            "ListComp"
                        ],
                        [
                            "rand_forward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_87": {
                "variable": {
                    "value": "total_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rand_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([batch_size, 1, 1, 1], minval=0, maxval=1, dtype=tf.float32) for _ in range(2)]",
                            "ListComp"
                        ],
                        [
                            "[samp / total_backward for samp in rand_backward]",
                            "ListComp"
                        ],
                        [
                            "rand_backward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_40": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(x, output_filters, 3, scope='conv2')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "x * rand_backward + tf.stop_gradient(x * rand_forward - x * rand_backward)",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "_shake_shake_block(x, output_filters, curr_stride, is_training)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, 16, 3, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 16 * k, n, 1, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 32 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "_shake_shake_layer(x, 64 * k, n, 2, is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_99": {
                "inputs": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "L1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "L2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "L3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_63": {
                "input": {
                    "value": "x * rand_forward - x * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "'branch_{}'.format(branch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/reduced/train_svhn.py": {
        "tensorflow": {
            "DEFINE_string_35": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "wrn",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "wrn, shake_shake_32, shake_shake_96, shake_shake_112, pyramid_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../tmp",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training Directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_39": {
                "name": {
                    "value": "data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../dataset",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where dataset is located.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "SVHN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dataset to train with.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "use_cpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "1 if use CPU, else GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_119": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_124": {
                "variable": {
                    "value": "self.lr_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lrn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_159": {
                "variable": {
                    "value": "(self.accuracy, self.eval_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.predictions, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_175": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_188": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_189": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr_rate_ph",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_205": {
                "variable": {
                    "value": "train_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_241": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_284": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_474": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_150": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_173": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_182": {
                "msg": {
                    "value": "'number of trainable params: {}'.format(self.num_trainable_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_191": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.cost, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams.gradient_clipping_by_global_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_207": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_237": {
                "msg": {
                    "value": "Saved child model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_260": {
                "msg": {
                    "value": "Evaluating child model in mode %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_337": {
                "msg": {
                    "value": "'Finished epoch: {}'.format(curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "'Epoch time(min): {}'.format((time.time() - start_time) / 60.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_349": {
                "msg": {
                    "value": "'Test Accuracy: {}'.format(test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_384": {
                "msg": {
                    "value": "'Train Acc: {}    Valid Acc: {}     Test Acc: {}'.format(training_accuracy, valid_accuracy, test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_160": {
                "input": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_172": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_193": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_206": {
                "control_inputs": {
                    "value": "[apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "IsDirectory_234": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_235": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_244": {
                "msg": {
                    "value": "Loaded child model checkpoint from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(self.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_357": {
                "device_name": {
                    "value": "/cpu:0 if FLAGS.use_cpu else /gpu:0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "info_367": {
                "msg": {
                    "value": "'Before Training Epoch: {}     Val Acc: {}'.format(starting_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_286": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_378": {
                "msg": {
                    "value": "'Epoch: {}    test Acc: {}'.format(curr_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_269": {
                "msg": {
                    "value": "'Eval child model accuracy: {}'.format(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_274": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_332": {
                "msg": {
                    "value": "Saving model after epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_336": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/reduced/wrn.py": {
        "tensorflow": {
            "relu_65": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'unit_{}_0'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(block_num, i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/select/bo_train_cifar.py": {
        "tensorflow": {
            "group_114": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "self.lr_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lrn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_154": {
                "variable": {
                    "value": "(self.accuracy, self.eval_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.predictions, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_170": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_183": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_184": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_192": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr_rate_ph",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_200": {
                "variable": {
                    "value": "train_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_236": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_279": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_398": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_145": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_177": {
                "msg": {
                    "value": "'number of trainable params: {}'.format(self.num_trainable_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_186": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.cost, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams.gradient_clipping_by_global_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_202": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "Saved child model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_255": {
                "msg": {
                    "value": "Evaluating child model in mode %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_332": {
                "msg": {
                    "value": "'Finished epoch: {}'.format(curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_333": {
                "msg": {
                    "value": "'Epoch time(min): {}'.format((time.time() - start_time) / 60.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_344": {
                "msg": {
                    "value": "'Test Accuracy: {}'.format(test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_378": {
                "msg": {
                    "value": "'Train Acc: {}    Valid Acc: {}     Test Acc: {}'.format(training_accuracy, valid_accuracy, test_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_155": {
                "input": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_167": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_188": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_global_norm(grads, hparams.gradient_clipping_by_global_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_201": {
                "control_inputs": {
                    "value": "[apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "IsDirectory_229": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_230": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_239": {
                "msg": {
                    "value": "Loaded child model checkpoint from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(self.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_297": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_352": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_361": {
                "msg": {
                    "value": "'Before Training Epoch: {}     Val Acc: {}'.format(starting_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_281": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_372": {
                "msg": {
                    "value": "'Epoch: {}    test Acc: {}'.format(curr_epoch, valid_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_264": {
                "msg": {
                    "value": "'Eval child model accuracy: {}'.format(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_269": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_327": {
                "msg": {
                    "value": "Saving model after epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_331": {
                "msg": {
                    "value": "Retryable error caught: %s.  Retrying.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/select/custom_ops.py": {
        "tensorflow": {
            "get_variable_35": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, int(x.shape[1]), int(x.shape[2]), 1)",
                            "Tuple"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_127": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(inputs.shape[0]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_166": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-unif_init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "unif_init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_units_out ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_174": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "xw_plus_b_181": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ],
                        [
                            "variable(name='weights', shape=weights_shape, dtype=tf.float32, initializer=weights_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable(name='biases', shape=[num_units_out], dtype=tf.float32, initializer=bias_initializer, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, ksize=kernel_size, strides=(1, 1, 1, 1), padding='VALID', data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "squeeze_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "FC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_191": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [int(inputs.shape[0]), -1])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ],
                        [
                            "stride_arr(stride, stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/select/data_utils_1000.py": {
        "tensorflow": {
            "info_51": {
                "msg": {
                    "value": "SVHN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_67": {
                "msg": {
                    "value": "'mean:{}    std: {}'.format(mean, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_74": {
                "msg": {
                    "value": "'In SVHN loader, number of images: {}'.format(len(all_data) + len(test_data))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/select/helper_utils.py": {
        "tensorflow": {
            "softmax_28": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.val_labels",
                            "Attribute"
                        ],
                        [
                            "data_loader.test_labels",
                            "Attribute"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_39": {
                "x": {
                    "value": "weight_decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "'model.batch_size is {}'.format(model.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "'steps per epoch: {}'.format(steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'lr of {} for epoch {}'.format(curr_lr, curr_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_148": {
                "msg": {
                    "value": "'Train accuracy: {}'.format(train_accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_39": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "l2_loss_38": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_137": {
                "msg": {
                    "value": "'Training {}/{}'.format(step, steps_per_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SVHN/select/wrn.py": {
        "tensorflow": {
            "relu_65": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.batch_norm(x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "orig_x + block_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "ops.conv2d(x, output_filters, filter_size, scope='init_conv')",
                            "Call"
                        ],
                        [
                            "_res_add(filters[0], filters[3], final_stride_val, x, first_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num - 1], filters[block_num], strides[block_num - 1], activate_before_residual=activate_before_residual)",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(x, scope='final_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ops.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "_res_add(filters[block_num - 1], filters[block_num], strides[block_num - 1], x, orig_x)",
                            "Call"
                        ],
                        [
                            "residual_block(x, filters[block_num], filters[block_num], 1, activate_before_residual=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='init_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=stride, scope='conv1')",
                            "Call"
                        ],
                        [
                            "ops.batch_norm(block_x, scope='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block_x)",
                            "Call"
                        ],
                        [
                            "ops.conv2d(block_x, out_filter, 3, stride=1, scope='conv2')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'unit_{}_0'.format(block_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(block_num, i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}