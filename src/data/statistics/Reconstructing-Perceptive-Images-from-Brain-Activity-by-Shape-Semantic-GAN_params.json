{
    "model/train_sm_decoder.py": {
        "sklearn": {},
        "torch": {
            "load_20": {
                "variable": {
                    "value": "fmri",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../data/fMRI_data/demo1/digits-fmri",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "adversarial_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "optimizer_E",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(b1, b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_70": {
                "variable": {
                    "value": "scheduler_E",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(encoder.parameters(), lr=lr, betas=(b1, b2))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "fmri",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fmri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('../data/fMRI_data/demo1/digits-fmri')",
                            "Call"
                        ],
                        [
                            "np.concatenate([train_fmri, test_fmri])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(fmri)",
                            "Call"
                        ],
                        [
                            "fmri.type(Tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "train_fmri",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_fmri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fmri[0:45], fmri[50:95]])",
                            "Call"
                        ],
                        [
                            "train_fmri[rand_id]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(train_fmri)",
                            "Call"
                        ],
                        [
                            "train_fmri.type(Tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([labels[0:45], labels[50:95]])",
                            "Call"
                        ],
                        [
                            "train_labels[rand_id]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(train_labels)",
                            "Call"
                        ],
                        [
                            "train_labels.squeeze()",
                            "Call"
                        ],
                        [
                            "train_labels.type(Tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "test_fmri",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_fmri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([fmri[45:50], fmri[95:100]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_fmri)",
                            "Call"
                        ],
                        [
                            "test_fmri.type(Tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([labels[45:50], labels[95:100]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_labels)",
                            "Call"
                        ],
                        [
                            "test_labels.squeeze()",
                            "Call"
                        ],
                        [
                            "test_labels.type(Tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_149": {
                "obj": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../data/sm_features/demo1/semantics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_21": {
                "f": {
                    "value": "../data/images/demo1/raw_imgs/digits-labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(fmri_size, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "fmri_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmri.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets.py": {
        "torch": {}
    },
    "demo1_digits.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "fmri",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data/fMRI_data/demo1/digits-fmri",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_22": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data/images/demo1/raw_imgs/digits-images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_77": {
                "variable": {
                    "value": "criterion_GAN",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_78": {
                "variable": {
                    "value": "criterion_pixelwise",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_79": {
                "variable": {
                    "value": "criteirion_contour",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(b1, b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(b1, b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_107": {
                "variable": {
                    "value": "scheduler_G",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(generator.parameters(), lr=lr, betas=(b1, b2))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_108": {
                "variable": {
                    "value": "scheduler_D",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(discriminator.parameters(), lr=lr, betas=(b1, b2))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset('data/images/demo1/samples', transforms_=transforms_, mode='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset('data/images/demo1/samples', transforms_=transforms_, mode='val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_139": {
                "variable": {
                    "value": "semantic_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data/sm_features/demo1/semantics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/models.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skip_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*discriminator_block(in_channels * 2, 64, normalization=False)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "img_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_A, img_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "d8",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d8, semantic_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_26": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_39": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_40": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_77": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_109": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_110": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_25": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_44": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_68": {
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/shape_decoder.py": {
        "torch": {
            "Sequential_7": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(fmri_size, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_8": {
                "in_features": {
                    "value": "fmri_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/shape_decoding_digits.py": {
        "torch": {
            "BCELoss_120": {
                "variable": {
                    "value": "adversarial_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_121": {
                "variable": {
                    "value": "pixelwise_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer_E",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(b1, b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_132": {
                "variable": {
                    "value": "scheduler_E",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(decoder.parameters(), lr=lr, betas=(b1, b2))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "fmri",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fmri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([train_fmri, test_fmri])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(fmri)",
                            "Call"
                        ],
                        [
                            "fmri.type(Tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([train_imgs, test_imgs])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(imgs)",
                            "Call"
                        ],
                        [
                            "imgs.type(Tensor)",
                            "Call"
                        ],
                        [
                            "decoder(fmri)",
                            "Call"
                        ],
                        [
                            "imgs.view(fmri.shape[0], output_size, output_size)",
                            "Call"
                        ],
                        [
                            "imgs.data.cpu() * 255.0",
                            "BinOp"
                        ],
                        [
                            "np.asarray(imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(fmri_size, latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "fmri_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmri.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size * output_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tanh_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}