{
    "utils.py": {
        "torch": {
            "tensor_8": {
                "variable": {
                    "value": "chrom0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0], [1.0], [1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_10": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0], [0.0], [1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_11": {
                "variable": {
                    "value": "chrom1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chrom0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0], [1.0], [1.0]])",
                            "Call"
                        ],
                        [
                            "chrom0 / torch.norm(chrom0, p=2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.0], [0.0], [1.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_13": {
                "variable": {
                    "value": "chrom2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chrom0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0], [1.0], [1.0]])",
                            "Call"
                        ],
                        [
                            "chrom0 / torch.norm(chrom0, p=2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "chrom1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(chrom0, temp)",
                            "Call"
                        ],
                        [
                            "chrom1 / torch.norm(chrom1, p=2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_18": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X.reshape(1, -1), Y.reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_9": {
                "input": {
                    "value": "chrom0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0], [1.0], [1.0]])",
                            "Call"
                        ],
                        [
                            "chrom0 / torch.norm(chrom0, p=2)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_12": {
                "input": {
                    "value": "chrom1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(chrom0, temp)",
                            "Call"
                        ],
                        [
                            "chrom1 / torch.norm(chrom1, p=2)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_14": {
                "input": {
                    "value": "chrom2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(chrom0, chrom1)",
                            "Call"
                        ],
                        [
                            "chrom2 / torch.norm(chrom2, p=2)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_24": {
                "variable": {
                    "value": "log_geomean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(torch.mul(torch.mul(img_flat[:, 0], img_flat[:, 1]), img_flat[:, 2]), 1 / 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_30": {
                "variable": {
                    "value": "allrgbslog",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.reshape(-1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_35": {
                "variable": {
                    "value": "chi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.matmul(allrgbslog, chrom1), torch.matmul(allrgbslog, chrom2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([PI / 180 * (idx + 1) for idx in range(180)])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "projGrey",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.matmul(allrgbslog, chrom1), torch.matmul(allrgbslog, chrom2)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X.reshape(1, -1), Y.reshape(1, -1)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_17": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([PI / 180 * (idx + 1) for idx in range(180)])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_17": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([PI / 180 * (idx + 1) for idx in range(180)])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.matmul(allrgbslog, chrom1), torch.matmul(allrgbslog, chrom2)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XY[:, int(np.argmin(tmp_entropy))]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "input": {
                    "value": "allrgbslog",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(img_flat).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "chrom2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(chrom0, chrom1)",
                            "Call"
                        ],
                        [
                            "chrom2 / torch.norm(chrom2, p=2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_25": {
                "input": {
                    "value": "torch.mul(torch.mul(img_flat[:, 0], img_flat[:, 1]), img_flat[:, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_26": {
                "input": {
                    "value": "img_flat[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "img_flat[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}