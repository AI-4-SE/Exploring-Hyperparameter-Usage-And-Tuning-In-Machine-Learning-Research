{
    "quince/library/datasets/hcmnist.py": {
        "sklearn": {
            "train_test_split_50": {
                "variable": {
                    "value": "(data_train, data_valid, targets_train, targets_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "unique_133": {
                "variable": {
                    "value": "digits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "-domain",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "domain + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "2 * domain / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/datasets/ihdp.py": {
        "sklearn": {
            "StandardScaler_67": {
                "variable": {
                    "value": "df[_CONTINUOUS_COVARIATES]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_99": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "train_test_split_134": {
                "variable": {
                    "value": "(df_train, df_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_165": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(self.y[idx] - self.y_mean) / self.y_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "self.x[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "np.hstack([self.x[idx], self.t[idx]])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/models/kernel.py": {
        "sklearn": {
            "RBF_24": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "length_scale": {
                    "value": "initial_length_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogisticRegression_33": {
                "variable": {
                    "value": "propensity_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_kernels_75": {
                "X": {
                    "value": "self.embed(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.embed(self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filter_params": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RBF_133": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "length_scale": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid",
                            "variable"
                        ]
                    ]
                }
            },
            "pairwise_kernels_134": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.embed(dataset.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.embed(self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernels.RBF(length_scale=h)",
                            "Call"
                        ]
                    ]
                },
                "filter_params": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_squared_error_144": {
                "variable": {
                    "value": "err0",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[t == 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "mu0[t == 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_squared_error_145": {
                "variable": {
                    "value": "err1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[t == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "mu1[t == 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "self.e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_47": {
                "variable": {
                    "value": "self.e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(phi).mean(0).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_171": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "np.hstack([self.x, self.t])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "quince/application/main.py": {
        "torch": {
            "device_count_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "quince/application/workflows/evaluation.py": {
        "torch": {
            "cat_361": {
                "variable": {
                    "value": "tau_top",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tau_tops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_362": {
                "variable": {
                    "value": "tau_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tau_bottoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_363": {
                "variable": {
                    "value": "tau_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tau_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ds_test.mu1 - ds_test.mu0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "variable": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ds_test.mu1 - ds_test.mu0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_539": {
                "variable": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ds_test.mu1 - ds_test.mu0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_722": {
                "variable": {
                    "value": "(tau_var, idx_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_hat['mean'].var(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ds_test.mu1 - ds_test.mu0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ds_test.mu1 - ds_test.mu0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ds_test.mu1 - ds_test.mu0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([x_in, torch.zeros_like(x_in[:, :1])], dim=-1), torch.cat([x_in, torch.ones_like(x_in[:, :1])], dim=-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_446": {
                "variable": {
                    "value": "tau_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_hat['top'].mean(0) + 2 * tau_hat['mean'].std(0) - tau_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_449": {
                "variable": {
                    "value": "tau_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_hat['bottom'].mean(0) - 2 * tau_hat['mean'].std(0) - tau_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_478": {
                "variable": {
                    "value": "tau_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_hat['top'].mean(0) - tau_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_479": {
                "variable": {
                    "value": "tau_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_hat['bottom'].mean(0) - tau_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_286": {
                "variable": {
                    "value": "intervals[k][k1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_304": {
                "variable": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs * locs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_304": {
                "variable": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_305": {
                "variable": {
                    "value": "(mu_hat_0, mu_hat_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(probs * locs, dim=-1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mu_hat.shape[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_318": {
                "variable": {
                    "value": "(y_hat_0, y_hat_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outcome_post.sample(torch.Size([mc_samples_y]))",
                            "Call"
                        ],
                        [
                            "torch.sort(y_hat, dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "y_hat.shape[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "lambda_top_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lambda_top_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lambda_top_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(lambda_top_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_338": {
                "variable": {
                    "value": "lambda_top_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lambda_top_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lambda_top_0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(lambda_top_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_339": {
                "variable": {
                    "value": "lambda_bottom_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lambda_bottom_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lambda_bottom_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(lambda_bottom_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_340": {
                "variable": {
                    "value": "lambda_bottom_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lambda_bottom_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lambda_bottom_0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(lambda_bottom_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_354": {
                "variable": {
                    "value": "tau_top",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tau_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tau_tops).to('cpu')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tau_top)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(tau_top)",
                            "Call"
                        ],
                        [
                            "torch.abs(tau_hat['top'].mean(0) + 2 * tau_hat['mean'].std(0) - tau_mean)",
                            "Call"
                        ],
                        [
                            "torch.abs(tau_hat['top'].mean(0) - tau_mean)",
                            "Call"
                        ],
                        [
                            "tau_hat['top'].mean(0) + 2 * tau_hat['mean'].std(0)",
                            "BinOp"
                        ],
                        [
                            "tau_hat['top'].mean(0) + 2 * tau_hat['mean'].std(0)",
                            "BinOp"
                        ],
                        [
                            "tau_hat['top'].mean(0) + 2 * tau_hat['mean'].std(0)",
                            "BinOp"
                        ],
                        [
                            "tau_hat['top'].mean(0)",
                            "Call"
                        ],
                        [
                            "tau_hat['top'].mean(0) + 2 * tau_hat['mean'].std(0) if epistemic_uncertainty else tau_hat['top'].mean(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_355": {
                "variable": {
                    "value": "tau_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tau_bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tau_bottoms).to('cpu')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tau_bottom)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(tau_bottom)",
                            "Call"
                        ],
                        [
                            "torch.abs(tau_hat['bottom'].mean(0) - 2 * tau_hat['mean'].std(0) - tau_mean)",
                            "Call"
                        ],
                        [
                            "torch.abs(tau_hat['bottom'].mean(0) - tau_mean)",
                            "Call"
                        ],
                        [
                            "tau_hat['bottom'].mean(0) - 2 * tau_hat['mean'].std(0)",
                            "BinOp"
                        ],
                        [
                            "tau_hat['bottom'].mean(0) - 2 * tau_hat['mean'].std(0)",
                            "BinOp"
                        ],
                        [
                            "tau_hat['bottom'].mean(0) - 2 * tau_hat['mean'].std(0)",
                            "BinOp"
                        ],
                        [
                            "tau_hat['bottom'].mean(0)",
                            "Call"
                        ],
                        [
                            "tau_hat['bottom'].mean(0) - 2 * tau_hat['mean'].std(0) if epistemic_uncertainty else tau_hat['bottom'].mean(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Tensor_385": {
                "variable": {
                    "value": "intervals[k][k1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_394": {
                "variable": {
                    "value": "intervals[k][k1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_673": {
                "input": {
                    "value": "torch.square(tau_true - tau_mean).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_704": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "tau_true[idx_var]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_728": {
                "input": {
                    "value": "torch.square(tau_true - tau_mean).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_754": {
                "input": {
                    "value": "torch.square(tau_true - tau_mean).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_785": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "tau_true[idx_var]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_683": {
                "input": {
                    "value": "torch.abs(torch.cat([tau_top.unsqueeze(0), tau_bottom.unsqueeze(0)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_690": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "tau_true[idx_var]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_733": {
                "input": {
                    "value": "torch.square(tau_true[:-(i + 1)] - tau_mean[:-(i + 1)]).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_764": {
                "input": {
                    "value": "torch.abs(torch.cat([tau_top.unsqueeze(0), tau_bottom.unsqueeze(0)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_771": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(ds_test.mu1 - ds_test.mu0).to('cpu')",
                            "Call"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "ds_test.mu1 - ds_test.mu0",
                            "BinOp"
                        ],
                        [
                            "tau_true[idx_var]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "[x_in, torch.zeros_like(x_in[:, :1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_265": {
                "tensors": {
                    "value": "[x_in, torch.ones_like(x_in[:, :1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_306": {
                "input": {
                    "value": "propensity_post.probs.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_317": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outcome_post.sample(torch.Size([mc_samples_y]))",
                            "Call"
                        ],
                        [
                            "torch.sort(y_hat, dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_455": {
                "tensors": {
                    "value": "[tau_bottom.unsqueeze(0), tau_top.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_483": {
                "tensors": {
                    "value": "[tau_bottom.unsqueeze(0), tau_top.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_684": {
                "input": {
                    "value": "torch.cat([tau_top.unsqueeze(0), tau_bottom.unsqueeze(0)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_707": {
                "input": {
                    "value": "torch.square(tau_true[keep] - tau_mean[keep]).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_765": {
                "input": {
                    "value": "torch.cat([tau_top.unsqueeze(0), tau_bottom.unsqueeze(0)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_788": {
                "input": {
                    "value": "torch.square(tau_true[keep] - tau_mean[keep]).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_823": {
                "input": {
                    "value": "risk_hat - risk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_673": {
                "input": {
                    "value": "tau_true - tau_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_673": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_684": {
                "tensors": {
                    "value": "[tau_top.unsqueeze(0), tau_bottom.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_693": {
                "input": {
                    "value": "torch.square(tau_true[keep] - tau_mean[keep]).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_728": {
                "input": {
                    "value": "tau_true - tau_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_728": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_754": {
                "input": {
                    "value": "tau_true - tau_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_754": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_765": {
                "tensors": {
                    "value": "[tau_top.unsqueeze(0), tau_bottom.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_774": {
                "input": {
                    "value": "torch.square(tau_true[keep] - tau_mean[keep]).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_264": {
                "input": {
                    "value": "x_in[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_265": {
                "input": {
                    "value": "x_in[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_734": {
                "input": {
                    "value": "tau_true[:-(i + 1)] - tau_mean[:-(i + 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_734": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_707": {
                "input": {
                    "value": "tau_true[keep] - tau_mean[keep]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_707": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_788": {
                "input": {
                    "value": "tau_true[keep] - tau_mean[keep]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_788": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_694": {
                "input": {
                    "value": "tau_true[keep] - tau_mean[keep]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_694": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_775": {
                "input": {
                    "value": "tau_true[keep] - tau_mean[keep]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_775": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/datasets/samplers.py": {
        "torch": {
            "randperm_22": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.target_length + -self.target_length % len(self.dataset)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_19": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/datasets/synthetic.py": {
        "torch": {}
    },
    "quince/library/models/core.py": {
        "torch": {
            "SummaryWriter_57": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.job_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "datasets.RandomFixedLengthSampler(train_dataset, 10000) if self.num_examples < 10000 else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "tune_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tune_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_219": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.job_dir, 'best_checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.job_dir, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_204": {
                "obj": {
                    "value": "self.best_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.job_dir, 'best_checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.job_dir, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "quince/library/models/dragonnet.py": {
        "torch": {
            "Adam_64": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.5 * (1 - dropout_rate) / num_examples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/models/neural_network.py": {
        "torch": {
            "Sequential_73": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.5 * (1 - dropout_rate) / num_examples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "2 * self.batch_size if batch_size is None else batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/models/tarnet.py": {
        "torch": {
            "Adam_62": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.5 * (1 - dropout_rate) / num_examples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "2 * self.batch_size if batch_size is None else batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "covariates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch[0][:, :-1], batch[0][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "treatments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(batch[0][:, -1:]), torch.ones_like(batch[0][:, -1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[covariates, treatments]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_113": {
                "variable": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "posterior_predictive.mean",
                            "Attribute"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mu.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "tensors": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "input": {
                    "value": "batch[0][:, -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "batch[0][:, -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/modules/convolution.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(num_features=num_features) if batch_norm else nn.Identity()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Activation(num_features=dim_input[0], negative_slope=negative_slope, dropout_rate=dropout_rate, batch_norm=batch_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PreactivationConv(dim_input=dim_input, out_channels=dim_input[0], kernel_size=3, stride=1, padding=1, dilation=1, groups=1, bias=not batch_norm, negative_slope=negative_slope, dropout_rate=dropout_rate, batch_norm=batch_norm, spectral_norm=spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "stem_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_width",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stem_kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stem_kernel_stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "stem_kernel_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not batch_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm_conv(stem_conv, spectral_norm, input_dim=dim_input) if spectral_norm > 0.0 else stem_conv",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout2d(p=dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_107": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_22": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_212": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ELU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_89": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_174": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/modules/dense.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(num_features=dim_input) if batch_norm else nn.Identity()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Activation(dim_input=dim_input, negative_slope=negative_slope, dropout_rate=dropout_rate, batch_norm=batch_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_81": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not batch_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_16": {
                "num_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/modules/dragonnet.py": {
        "torch": {
            "Sequential_146": {
                "variable": {
                    "value": "self.pi_density",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dense.Activation(dim_input=self.encoder.dim_output, negative_slope=1.0 if self.encoder.dim_output == 1 else negative_slope, dropout_rate=0.0 if self.encoder.dim_output == 1 else dropout_rate, batch_norm=False if self.encoder.dim_output == 1 else batch_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_42": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "*args": {
                    "value": "dense.ResidualDense(dim_input=self.encoder.dim_output, dim_output=dim_hidden, bias=not batch_norm, negative_slope=1.0 if self.encoder.dim_output == 1 else negative_slope, dropout_rate=0.0 if self.encoder.dim_output == 1 else dropout_rate, batch_norm=False if self.encoder.dim_output == 1 else batch_norm, spectral_norm=spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "dense.ResidualDense(dim_input=self.encoder.dim_output, dim_output=dim_hidden, bias=not batch_norm, negative_slope=1.0 if self.encoder.dim_output == 1 else negative_slope, dropout_rate=0.0 if self.encoder.dim_output == 1 else dropout_rate, batch_norm=False if self.encoder.dim_output == 1 else batch_norm, spectral_norm=spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "dense.NeuralNetwork(architecture=architecture, dim_input=dim_input + 1, dim_hidden=dim_hidden, depth=depth, negative_slope=negative_slope, batch_norm=batch_norm, dropout_rate=dropout_rate, spectral_norm=spectral_norm, activate_output=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "[phi, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/modules/spectral_norm.py": {
        "torch": {
            "dot_43": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(u_s.view(-1), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "conv2d(v.view(input_dim), weight, stride=stride, padding=padding, bias=None)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_output_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_178": {
                "variable": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dot_182": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(v.view(self.input_dim), weight, stride=stride, padding=padding, bias=None)",
                            "Call"
                        ],
                        [
                            "weight_v.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_184": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1, device=weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(h).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_79": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(w).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_209": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(num_input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_215": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normalize_223": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(num_output_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_43": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(v_s.view(-1), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_input_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_184": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_230": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_34": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(v_s.view(-1), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_input_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_37": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(u_s.view(-1), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "conv2d(v.view(input_dim), weight, stride=stride, padding=padding, bias=None)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_output_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv_transpose2d_156": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(self.out_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "(stride[0] - 1, stride[1] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_163": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(v_s.view(-1), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_input_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_165": {
                "variable": {
                    "value": "u_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normalize_172": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(u_s.view(-1), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "conv2d(v.view(input_dim), weight, stride=stride, padding=padding, bias=None)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_output_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_209": {
                "*size": {
                    "value": "num_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim[0] * input_dim[1] * input_dim[2] * input_dim[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_223": {
                "*size": {
                    "value": "num_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn.out_shape[0] * fn.out_shape[1] * fn.out_shape[2] * fn.out_shape[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_35": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(u_s.view(-1), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "conv2d(v.view(input_dim), weight, stride=stride, padding=padding, bias=None)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_output_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_37": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(v_s.view(-1), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_input_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "quince/library/modules/tarnet.py": {
        "torch": {
            "Sequential_53": {
                "variable": {
                    "value": "self.t0_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dense.ResidualDense(dim_input=self.encoder.dim_output, dim_output=dim_hidden // 2, bias=not batch_norm, negative_slope=negative_slope, dropout_rate=dropout_rate, batch_norm=batch_norm, spectral_norm=spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.t1_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dense.ResidualDense(dim_input=self.encoder.dim_output, dim_output=dim_hidden // 2, bias=not batch_norm, negative_slope=negative_slope, dropout_rate=dropout_rate, batch_norm=batch_norm, spectral_norm=spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "[phi, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "quince/library/modules/variational.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.mu0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "sigma0",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.sigma0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sigma0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.mu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "sigma1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.sigma1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sigma1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.component_distribution.log_prob(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * self.mixture_distribution.probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.mu0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "sigma0",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.pi0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.sigma0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sigma0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.mu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "sigma1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.pi1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.sigma1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sigma1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Normal_25": {
                "loc": {
                    "value": "self.mu(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.sigma(inputs) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_65": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - t) * self.mu0(x) + t * self.mu1(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - t) * self.mu0(x) + t * self.mu1(x)",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - t) * self.sigma0(x) + t * self.sigma1(x) + 1e-07",
                            "BinOp"
                        ],
                        [
                            "(1 - t) * self.sigma0(x) + t * self.sigma1(x) + 1e-07",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_72": {
                "input": {
                    "value": "loss + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softplus_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Categorical_101": {
                "logits": {
                    "value": "self.pi(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_102": {
                "loc": {
                    "value": "self.mu(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.sigma(inputs) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Categorical_155": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - t) * self.pi0(x) + t * self.pi1(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_156": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - t) * self.mu0(x) + t * self.mu1(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - t) * self.mu0(x) + t * self.mu1(x)",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - t) * self.sigma0(x) + t * self.sigma1(x) + 1e-07",
                            "BinOp"
                        ],
                        [
                            "(1 - t) * self.sigma0(x) + t * self.sigma1(x) + 1e-07",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}