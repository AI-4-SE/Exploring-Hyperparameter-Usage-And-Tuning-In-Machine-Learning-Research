{
    "basConv/utility/metrics.py": {
        "sklearn": {
            "roc_auc_score_94": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ground_truth",
                            "Method Argument"
                        ],
                        [
                            "ground_truth",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "basConv/basConv.py": {
        "tensorflow": {
            "Saver_434": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_443": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_445": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.baskets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_baskets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.pos_items",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_items",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "users",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.c_users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "basket_corresponding_users",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.neg_items",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_items",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.node_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "node_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.mess_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "message_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_106": {
                "variable": {
                    "value": "self.b_g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ba_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.baskets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_107": {
                "variable": {
                    "value": "self.pos_i_g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ia_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.pos_items",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_108": {
                "variable": {
                    "value": "self.neg_i_g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ia_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_items",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_109": {
                "variable": {
                    "value": "self.u_g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ua_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.users",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_110": {
                "variable": {
                    "value": "self.u_c_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ua_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.c_users",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "self.batch_ratings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.b_at_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.pos_i_g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_129": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_268": {
                "variable": {
                    "value": "u_g_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.weights['user_embedding']]",
                            "List"
                        ],
                        [
                            "user_embedding + [temp_user_e_norm]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "b_g_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "basket_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.weights['basket_embedding']]",
                            "List"
                        ],
                        [
                            "basket_embedding + [temp_basket_e_norm]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_270": {
                "variable": {
                    "value": "i_g_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "item_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.weights['item_embedding']]",
                            "List"
                        ],
                        [
                            "item_embedding + [temp_item_e_norm]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_277": {
                "variable": {
                    "value": "ego_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.weights['user_embedding'], self.weights['basket_embedding'], self.weights['item_embedding']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_305": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ego_embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "all_embeddings + [mlp_embeddings]",
                            "BinOp"
                        ],
                        [
                            "[embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_306": {
                "variable": {
                    "value": "(u_g_embeddings, b_g_embeddings, i_g_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ego_embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "all_embeddings + [mlp_embeddings]",
                            "BinOp"
                        ],
                        [
                            "[embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.n_users, self.n_baskets, self.n_items]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.weights['user_embedding'], self.weights['item_embedding']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_328": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ego_embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "all_embeddings + [mlp_embeddings]",
                            "BinOp"
                        ],
                        [
                            "[embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_329": {
                "variable": {
                    "value": "(u_g_embeddings, i_g_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ego_embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "all_embeddings + [mlp_embeddings]",
                            "BinOp"
                        ],
                        [
                            "[embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.n_users, self.n_items]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_335": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.weights['user_embedding'], self.weights['item_embedding']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_351": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ego_embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "all_embeddings + [mlp_embeddings]",
                            "BinOp"
                        ],
                        [
                            "[embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_353": {
                "variable": {
                    "value": "(u_g_embeddings, i_g_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ego_embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "all_embeddings + [mlp_embeddings]",
                            "BinOp"
                        ],
                        [
                            "[embeddings]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.n_users, self.n_items]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_358": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(users, pos_items)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_359": {
                "variable": {
                    "value": "neg_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(users, neg_items)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_364": {
                "variable": {
                    "value": "maxi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sigmoid(pos_scores - neg_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "negative_365": {
                "variable": {
                    "value": "mf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(maxi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_369": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_385": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_441": {
                "variable": {
                    "value": "save_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_458": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.dirname(pretrain_path + '/checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "all_weights[user_embedding]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([self.n_users, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "user_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_138": {
                "variable": {
                    "value": "all_weights[item_embedding]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([self.n_items, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "item_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "all_weights[basket_embedding]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_baskets, self.emb_dim], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "basket_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "all_weights[user_embedding]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.pretrain_data['user_embed']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "user_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "all_weights[item_embedding]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.pretrain_data['item_embed']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "item_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "all_weights[W_self_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([self.weight_size_list[k], self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_self_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "all_weights[b_self_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([1, self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_self_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "all_weights[W_ub_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([self.weight_size_list[k], self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_ub_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_156": {
                "variable": {
                    "value": "all_weights[b_ub_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([1, self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_ub_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "variable": {
                    "value": "all_weights[W_ui_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([self.weight_size_list[k], self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_ui_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "variable": {
                    "value": "all_weights[b_ui_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([1, self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_ui_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_162": {
                "variable": {
                    "value": "all_weights[W_bi_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([self.weight_size_list[k], self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_bi_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "variable": {
                    "value": "all_weights[b_bi_%d % k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initializer([1, self.weight_size_list[k + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_bi_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_244": {
                "variable": {
                    "value": "temp_basket_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(basket_embedding[k], self.weights['W_self_%d' % k]) + tf.matmul(tf.multiply(u2b_embedding, basket_embedding[k]), self.weights['W_ub_%d' % k]) + tf.matmul(tf.multiply(i2b_embedding, basket_embedding[k]), self.weights['W_bi_%d' % k])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_249": {
                "variable": {
                    "value": "temp_user_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(user_embedding[k], self.weights['W_self_%d' % k]) + tf.matmul(tf.multiply(b2u_embedding, user_embedding[k]), self.weights['W_ub_%d' % k]) + tf.matmul(tf.multiply(i2u_embedding, user_embedding[k]), self.weights['W_ui_%d' % k])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_254": {
                "variable": {
                    "value": "temp_item_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(item_embedding[k], self.weights['W_self_%d' % k]) + tf.matmul(tf.multiply(b2i_embedding, item_embedding[k]), self.weights['W_bi_%d' % k]) + tf.matmul(tf.multiply(u2i_embedding, item_embedding[k]), self.weights['W_ui_%d' % k])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_257": {
                "variable": {
                    "value": "temp_basket_e_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temp_basket_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.matmul(basket_embedding[k], self.weights['W_self_%d' % k]) + tf.matmul(tf.multiply(u2b_embedding, basket_embedding[k]), self.weights['W_ub_%d' % k]) + tf.matmul(tf.multiply(i2b_embedding, basket_embedding[k]), self.weights['W_bi_%d' % k]))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_258": {
                "variable": {
                    "value": "temp_basket_e_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temp_basket_e_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(temp_basket_embedding)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.mess_dropout[k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_259": {
                "variable": {
                    "value": "temp_user_e_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temp_user_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.matmul(user_embedding[k], self.weights['W_self_%d' % k]) + tf.matmul(tf.multiply(b2u_embedding, user_embedding[k]), self.weights['W_ub_%d' % k]) + tf.matmul(tf.multiply(i2u_embedding, user_embedding[k]), self.weights['W_ui_%d' % k]))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_260": {
                "variable": {
                    "value": "temp_basket_e_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temp_basket_e_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(temp_basket_embedding)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.mess_dropout[k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_261": {
                "variable": {
                    "value": "temp_item_e_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temp_item_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.matmul(item_embedding[k], self.weights['W_self_%d' % k]) + tf.matmul(tf.multiply(b2i_embedding, item_embedding[k]), self.weights['W_bi_%d' % k]) + tf.matmul(tf.multiply(u2i_embedding, item_embedding[k]), self.weights['W_ui_%d' % k]))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "temp_basket_e_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temp_basket_e_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(temp_basket_embedding)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(temp_basket_e_norm, 1 - self.mess_dropout[k])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.mess_dropout[k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_286": {
                "variable": {
                    "value": "side_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "temp_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_288": {
                "variable": {
                    "value": "sum_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(side_embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_290": {
                "variable": {
                    "value": "bi_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ego_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['basket_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "sum_embeddings + bi_embeddings",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(ego_embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "side_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_292": {
                "variable": {
                    "value": "bi_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(bi_embeddings, self.weights['W_bi_%d' % k]) + self.weights['b_bi_%d' % k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_299": {
                "variable": {
                    "value": "ego_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ego_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['basket_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "sum_embeddings + bi_embeddings",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(ego_embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.mess_dropout[k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_302": {
                "variable": {
                    "value": "norm_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ego_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['basket_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "sum_embeddings + bi_embeddings",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(ego_embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_322": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "temp_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_323": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_324": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.mess_dropout[k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_343": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "temp_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_345": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_348": {
                "variable": {
                    "value": "mlp_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mlp_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings, self.weights['W_mlp_%d' % k]) + self.weights['b_mlp_%d' % k]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(mlp_embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.mess_dropout[k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SparseTensor_376": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mat([coo.row, coo.col]).transpose()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "coo.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "coo.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_358": {
                "x": {
                    "value": "users",
                    "type": "variable",
                    "possible_values": [
                        [
                            "users",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pos_items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_generator.sample()",
                            "Call"
                        ],
                        [
                            "pos_items",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_359": {
                "x": {
                    "value": "users",
                    "type": "variable",
                    "possible_values": [
                        [
                            "users",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_generator.sample()",
                            "Call"
                        ],
                        [
                            "neg_items",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_361": {
                "t": {
                    "value": "pos_items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_generator.sample()",
                            "Call"
                        ],
                        [
                            "pos_items",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_364": {
                "x": {
                    "value": "pos_scores - neg_scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_365": {
                "input_tensor": {
                    "value": "maxi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.sigmoid(pos_scores - neg_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_385": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_388": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_139": {
                "shape": {
                    "value": "[self.n_baskets, self.emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_347": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights['W_mlp_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_245": {
                "a": {
                    "value": "tf.multiply(i2b_embedding, basket_embedding[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['W_bi_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "a": {
                    "value": "tf.multiply(i2u_embedding, user_embedding[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['W_ui_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_255": {
                "a": {
                    "value": "tf.multiply(u2i_embedding, item_embedding[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['W_ui_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_289": {
                "a": {
                    "value": "side_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights['W_gc_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_293": {
                "a": {
                    "value": "bi_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(ego_embeddings, side_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(bi_embeddings, self.weights['W_bi_%d' % k]) + self.weights['b_bi_%d' % k])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights['W_bi_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_323": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights['W_gc_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_345": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(embeddings, 1 - self.mess_dropout[k])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.weights['user_embedding'], self.weights['item_embedding']], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(temp_embed, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.matmul(embeddings, self.weights['W_gc_%d' % k]) + self.weights['b_gc_%d' % k])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights['W_gc_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_244": {
                "a": {
                    "value": "tf.multiply(u2b_embedding, basket_embedding[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['W_ub_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_245": {
                "x": {
                    "value": "i2b_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self._convert_sp_mat_to_sp_tensor(self.inter_mat['b2i']), item_embedding[k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "basket_embedding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "a": {
                    "value": "tf.multiply(b2u_embedding, user_embedding[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['W_ub_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_250": {
                "x": {
                    "value": "i2u_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self._convert_sp_mat_to_sp_tensor(self.inter_mat['u2i']), item_embedding[k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "user_embedding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "a": {
                    "value": "tf.multiply(b2i_embedding, item_embedding[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['W_bi_%d' % k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_255": {
                "x": {
                    "value": "u2i_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self._convert_sp_mat_to_sp_tensor(self.inter_mat['u2i_t']), user_embedding[k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_embedding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_244": {
                "x": {
                    "value": "u2b_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self._convert_sp_mat_to_sp_tensor(self.inter_mat['u2b_t']), user_embedding[k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "basket_embedding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_249": {
                "x": {
                    "value": "b2u_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self._convert_sp_mat_to_sp_tensor(self.inter_mat['u2b']), basket_embedding[k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "user_embedding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_254": {
                "x": {
                    "value": "b2i_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self._convert_sp_mat_to_sp_tensor(self.inter_mat['b2i_t']), basket_embedding[k])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_embedding[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}