{
    "amc.py": {
        "torch": {
            "load_556": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'./ckpt/{}_best_init.t7'.format(args.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(state_dim, 400)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.embed_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(state_dim, 400)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.embed_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(action_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.joint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LayerNorm(300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_157": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_209": {
                "variable": {
                    "value": "self.orig_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_259": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_303": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0045",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "4e-05",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_304": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_327": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_328": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(self.model.parameters(), lr=0.0045, momentum=0.9, weight_decay=4e-05, nesterov=True)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=0.01, momentum=0.9, weight_decay=0.0005, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[int(epochs * 0.3), int(epochs * 0.6), int(epochs * 0.8)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_329": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_348": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "(1, 3, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_340": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('./ckpt/{}_best_init.t7'.format(args.name))",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'./ckpt/{}_final.t7'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_367": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.t7'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_414": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_444": {},
            "clamp_497": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actor.predict(s.view(1, -1)) + np.random.normal(0, SIGMA)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "MAX_SPARSITY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.max_sparse / 100.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_78": {
                "normalized_shape": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_81": {
                "normalized_shape": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_96": {
                "normalized_shape": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_104": {
                "normalized_shape": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "*size": {
                    "value": "(1, 3, self.image_size, self.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_513": {
                "variable": {
                    "value": "y_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_543": {
                "variable": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_state(state)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([float(self.layer_counter) / len(self.filter_pruner.activation_to_conv), float(self.filter_pruner.conv_out_channels[self.layer_counter]) / self.max_oc, float(self.filter_pruner.conv_in_channels[self.layer_counter]) / self.max_ic, float(h) / self.max_fh, float(w) / self.max_fw, float(conv.stride[0]) / self.max_stride, float(conv.weight.size(2)) / self.max_k, float(flops) / self.full_flops, float(self.reduced) / self.full_flops, float(self.rest) / self.full_flops, self.last_act])",
                            "Call"
                        ],
                        [
                            "torch.zeros(1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([float(self.layer_counter) / len(self.filter_pruner.activation_to_conv), float(self.filter_pruner.conv_out_channels[self.layer_counter]) / self.max_oc, float(self.filter_pruner.conv_in_channels[self.layer_counter]) / self.max_ic, float(h) / self.max_fh, float(w) / self.max_fw, float(conv.stride[0]) / self.max_stride, float(conv.weight.size(2)) / self.max_k, float(flops) / self.full_flops, float(self.reduced) / self.full_flops, float(self.rest) / self.full_flops, self.last_act])",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_516": {},
            "save_532": {
                "obj": {
                    "value": "env.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'./ckpt/{}_best_init.t7'.format(args.name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "legr.py": {
        "torch": {
            "load_272": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_38": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pruner.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_141": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_desc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_164": {
                "obj": {
                    "value": "self.pruner.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('ckpt', '{}_bestarch_init.pt'.format(name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "self.pruner.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('ckpt', '{}_init.t7'.format(name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_221": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(self.pruner.model.parameters(), lr=self.lr, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ],
                        [
                            "optim.SGD(self.model.parameters(), lr=self.lr, momentum=0.9, weight_decay=0.0005, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[int(long_ft * 0.3), int(long_ft * 0.6), int(long_ft * 0.8)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "(1, 3, self.img_size, self.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "(1, 3, self.img_size, self.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "*size": {
                    "value": "(1, 3, self.img_size, self.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "*size": {
                    "value": "(1, 3, dummy_size, dummy_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu' if args.cpu else 'cuda'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "(1, 3, self.img_size, self.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "(1, 3, self.img_size, self.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/MobileNetV2.py": {
        "torch": {
            "Sequential_6": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_7": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_8": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_9": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp * expand_ratio, inp * expand_ratio, 3, stride, 1, groups=inp * expand_ratio, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, inp * expand_ratio, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "kernel_size": {
                    "value": "int(input_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_158": {
                "kernel_size": {
                    "value": "int(input_size / 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/resnet_cifar10.py": {
        "torch": {
            "AvgPool2d_19": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.shortcut(x) + self.conv(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "(x, torch.zeros(x.size(0), self.out_channels - x.size(1), x.size(2), x.size(3), device='cuda'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_67": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels - x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "morphnet.py": {
        "torch": {
            "CrossEntropyLoss_151": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_194": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=0.9, weight_decay=0.0005, nesterov=True)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=0.9, weight_decay=0.0005, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[int(epochs * 0.3), int(epochs * 0.6), int(epochs * 0.8)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_195": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_210": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_253": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_276": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[split:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_277": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:split]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_283": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dataset)(args.datapath, True, transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dataset)(args.datapath, True, transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dataset)(args.datapath, False, transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "125",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "weights * cur_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bias.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "bias * cur_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "(1, 3, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_25": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}_best.pth.tar'.format(filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.model)",
                            "Call"
                        ],
                        [
                            "model.to('cuda')",
                            "Call"
                        ],
                        [
                            "model.to('cuda')",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'ckpt/{}_best.t7'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_86": {
                "variable": {
                    "value": "gamma_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_88": {
                "variable": {
                    "value": "gamma_now",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cbns[1][idx + 1].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_60": {
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "cbns[1][idx - 1].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_102": {
                "input": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pruner/filter_pruner.py": {
        "torch": {
            "zeros_241": {
                "variable": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_251": {
                "variable": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_345": {
                "variable": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "variable": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_476": {
                "variable": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_511": {
                "variable": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ],
                        [
                            "[self.filter_ranks[j].to(self.device) for j in current_chain]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ranks, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "self.filter_ranks[activation_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.filter_ranks[activation_index], activation * grad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_68": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(activation * grad).sum(2).sum(2).data / (activation.size(2) * activation.size(3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "self.filter_ranks[activation_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "activation.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_522": {
                "variable": {
                    "value": "conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv.weight.data.cpu().numpy()[sorted_indices, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_525": {
                "variable": {
                    "value": "next_bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_bn.weight.data.cpu().numpy()[sorted_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_526": {
                "variable": {
                    "value": "next_bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_bn.bias.data.cpu().numpy()[sorted_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_527": {
                "variable": {
                    "value": "next_bn.running_mean.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_bn.running_mean.data.cpu().numpy()[sorted_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_528": {
                "variable": {
                    "value": "next_bn.running_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_bn.running_var.data.cpu().numpy()[sorted_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_543": {
                "variable": {
                    "value": "self.linear.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear.weight.data.cpu().numpy().transpose([1, 0])",
                            "Call"
                        ],
                        [
                            "tmp_weight[sorted_indices, :]",
                            "Subscript"
                        ],
                        [
                            "tmp_weight.transpose([1, 0])",
                            "Call"
                        ],
                        [
                            "next_conv.weight.data.cpu().numpy().transpose([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tmp_weight[sorted_indices, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tmp_weight.transpose([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_73": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_impact - mean_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "ranks[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ranks[idx], torch.zeros(int(max_size - rank.size(0)), device=self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "ranks[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ranks[idx], torch.zeros(int(max_size - rank.size(0)), device=self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "ranks[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ranks[idx], torch.zeros(int(max_size - rank.size(0)), device=self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_705": {
                "variable": {
                    "value": "conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_77": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_impact - mean_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "tensors": {
                    "value": "(torch.ones(int(rank.size(0)), device=self.device), torch.zeros(int(max_size - rank.size(0)), device=self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_249": {
                "*size": {
                    "value": "int(max_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_340": {
                "tensors": {
                    "value": "(torch.ones(int(rank.size(0)), device=self.device), torch.zeros(int(max_size - rank.size(0)), device=self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_343": {
                "*size": {
                    "value": "int(max_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_449": {
                "input": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_471": {
                "tensors": {
                    "value": "(torch.ones(int(rank.size(0)), device=self.device), torch.zeros(int(max_size - rank.size(0)), device=self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_474": {
                "*size": {
                    "value": "int(max_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_537": {
                "variable": {
                    "value": "next_conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear.weight.data.cpu().numpy().transpose([1, 0])",
                            "Call"
                        ],
                        [
                            "tmp_weight[sorted_indices, :]",
                            "Subscript"
                        ],
                        [
                            "tmp_weight.transpose([1, 0])",
                            "Call"
                        ],
                        [
                            "next_conv.weight.data.cpu().numpy().transpose([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tmp_weight[sorted_indices, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tmp_weight.transpose([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_665": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(np.round(conv.out_channels * growth_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(np.round(conv.out_channels * growth_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "int(np.round(conv.out_channels * growth_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_678": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_grown",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(conv.in_channels * growth_rate)) if conv != first else 3",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(np.round(conv.out_channels * growth_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_712": {
                "variable": {
                    "value": "next_new_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(np.round(next_bn.num_features * growth_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "next_bn.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "next_bn.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "next_bn.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "next_bn.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_730": {
                "variable": {
                    "value": "next_bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_735": {
                "variable": {
                    "value": "next_bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.bias.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_740": {
                "variable": {
                    "value": "next_bn.running_mean.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.running_mean.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_744": {
                "variable": {
                    "value": "next_bn.running_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.running_var.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_747": {
                "variable": {
                    "value": "new_linear_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(np.round(m.in_features * growth_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_756": {
                "variable": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_246": {
                "*size": {
                    "value": "int(rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "*size": {
                    "value": "int(max_size - rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "int(max_size - rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_340": {
                "*size": {
                    "value": "int(rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "*size": {
                    "value": "int(max_size - rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "*size": {
                    "value": "int(max_size - rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_471": {
                "*size": {
                    "value": "int(rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_471": {
                "*size": {
                    "value": "int(max_size - rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "*size": {
                    "value": "int(max_size - rank.size(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_81": {
                "input": {
                    "value": "mean_impact - mean_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_80": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_85": {
                "input": {
                    "value": "mean_impact - mean_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_84": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_88": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_91": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activations[activation_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_94": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_97": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_107": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_impact - l2_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_111": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_impact - l2_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_103": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_115": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ms_impact - ms_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_106": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "variable": {
                    "value": "l2_impact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(activation * grad, 2).sum(2).sum(2).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_110": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_122": {
                "variable": {
                    "value": "impact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_114": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_119": {
                "input": {
                    "value": "l2_impact - l2_impact.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_118": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_129": {
                "input": {
                    "value": "impact - mean.reshape((impact.size(0), impact.size(1), 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_135": {
                "input": {
                    "value": "impact - mean.reshape((impact.size(0), impact.size(1), 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_139": {
                "input": {
                    "value": "std - std.mean(dim=2).reshape((std.size(0), std.size(1), 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_146": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f2 - f2.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_145": {
                "input": {
                    "value": "torch.pow(activation, 2).sum(2).sum(2).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_151": {
                "input": {
                    "value": "values1 + values2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_145": {
                "input": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activations[activation_index]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_145": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_150": {
                "input": {
                    "value": "activation * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pruner/fp_mbnetv2.py": {
        "torch": {
            "from_numpy_413": {
                "variable": {
                    "value": "conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_427": {
                "variable": {
                    "value": "next_new_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "next_bn.num_features - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "next_bn.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "next_bn.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "next_bn.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "next_bn.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_445": {
                "variable": {
                    "value": "next_bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_450": {
                "variable": {
                    "value": "next_bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.bias.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_455": {
                "variable": {
                    "value": "next_bn.running_mean.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.running_mean.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_460": {
                "variable": {
                    "value": "next_bn.running_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.running_var.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_382": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.out_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_396": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_422": {
                "variable": {
                    "value": "conv.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=bias_numpy.shape[0] - pruned_filters, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_495": {
                "variable": {
                    "value": "new_linear_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear.in_features - pruned_filters * params_per_input_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_508": {
                "variable": {
                    "value": "self.linear.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_470": {
                "variable": {
                    "value": "next_new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "next_conv.in_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "next_conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "next_conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "next_conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "next_conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "next_conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "next_conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "next_conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_485": {
                "variable": {
                    "value": "next_conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_73": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "self.filter_ranks[activation_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "m2.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_80": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_100": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "self.filter_ranks[activation_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "m2.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "self.filter_ranks[activation_index - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "m2.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_106": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "self.filter_ranks[activation_index - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "m2.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_313": {
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_345": {
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pruner/fp_resnet.py": {
        "torch": {
            "from_numpy_381": {
                "variable": {
                    "value": "conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_395": {
                "variable": {
                    "value": "next_new_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "next_bn.num_features - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "next_bn.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "next_bn.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "next_bn.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "next_bn.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_413": {
                "variable": {
                    "value": "next_bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_418": {
                "variable": {
                    "value": "next_bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.bias.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_423": {
                "variable": {
                    "value": "next_bn.running_mean.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.running_mean.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_428": {
                "variable": {
                    "value": "next_bn.running_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_new_bn.running_var.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_350": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.out_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_390": {
                "variable": {
                    "value": "conv.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=bias_numpy.shape[0] - pruned_filters, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_462": {
                "variable": {
                    "value": "new_linear_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear.in_features - pruned_filters * params_per_input_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_475": {
                "variable": {
                    "value": "self.linear.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_32": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.filter_ranks[self.activation_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_39": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_59": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_438": {
                "variable": {
                    "value": "next_new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "next_conv.in_channels - pruned_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "next_conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "next_conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "next_conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "next_conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "next_conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "next_conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "next_conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_453": {
                "variable": {
                    "value": "next_conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_bn.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_linear_layer.weight.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "next_new_conv.weight.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "self.filter_ranks[self.activation_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "self.filter_ranks[self.activation_index - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_65": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self.filter_ranks[self.activation_index - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_196": {
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_199": {
                "input": {
                    "value": "chained_bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_250": {
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_253": {
                "input": {
                    "value": "chained_bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_231": {
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_287": {
                "input": {
                    "value": "bn.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/drivers.py": {
        "torch": {
            "CrossEntropyLoss_191": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_36": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[split:]",
                            "Subscript"
                        ],
                        [
                            "indices[split:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_37": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:split]",
                            "Subscript"
                        ],
                        [
                            "indices[:split]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, False, transforms.Compose([transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, False, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_132": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_160": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.classifier.parameters(), lr=0.1, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(steps / len(train_loader)) + 1",
                            "BinOp"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, True, transforms.Compose([transforms.RandomCrop(img_size, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, True, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, True, transforms.Compose([transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, True, transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, True, transforms.Compose([transforms.RandomCrop(img_size, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, True, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, True, transforms.Compose([transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, True, transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_104": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[split:]",
                            "Subscript"
                        ],
                        [
                            "indices[split:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_105": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:split]",
                            "Subscript"
                        ],
                        [
                            "indices[:split]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, True, transforms.Compose([transforms.RandomCrop(img_size, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, True, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, True, transforms.Compose([transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, True, transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(dataset)(datapath, False, transforms.Compose([transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "eval(dataset)(datapath, False, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "variable": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_out / distillation.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_203": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output / distillation.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join('ckpt', '{}_best.t7'.format(name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_204": {
                "input": {
                    "value": "torch.sum(soft_target) * logp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_204": {
                "input": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(t_out / distillation.T, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}