{
    "data/scannet/batch_load_scannet_data.py": {
        "torch": {
            "save_37": {
                "obj": {
                    "value": "(coords, colors, sem_labels, instance_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_filename_prefix + '_inst_nostuff.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data/scannet/load_scannet_data.py": {
        "torch": {
            "save_66": {
                "obj": {
                    "value": "(coords, colors, sem_labels, instance_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file + '_inst_nostuff.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ap_helper.py": {
        "torch": {
            "argmax_58": {
                "variable": {
                    "value": "pred_heading_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_59": {
                "variable": {
                    "value": "pred_heading_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_heading_class.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_62": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_63": {
                "variable": {
                    "value": "pred_size_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_66": {
                "variable": {
                    "value": "pred_sem_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['sem_cls_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset.py": {
        "torch": {
            "tensor_183": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "torch.tensor(batch_offsets, dtype=torch.int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "locs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(locs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "locs_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "locs_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(locs_float, 0).to(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feats, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.scene_data[scene_id]['labels']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, 0).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "instance_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "instance_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.scene_data[scene_id]['instance_labels']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(instance_labels, 0).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "instance_infos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "instance_infos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(instance_infos, 0).to(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "instance_pointnum",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance_pointnum",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(instance_pointnum, dtype=torch.int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "result[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_382": {
                "variable": {
                    "value": "(cords, colors, labels, instance_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CONF.PATH.SCANNET_DATA, scene_id) + '_inst_nostuff.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "[torch.LongTensor(xyz.shape[0], 1).fill_(i), torch.from_numpy(xyz).long()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "ndarray": {
                    "value": "xyz_middle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dataAugment(xyz_origin, False, True, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "id[i]['labels'].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "ndarray": {
                    "value": "instance_label.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "inst_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inst_infos['instance_info']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "rgb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "id[i]['colors'].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "xyz",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "xyz_middle * cfg.scale",
                            "BinOp"
                        ],
                        [
                            "xyz - xyz.min(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_175": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss.py": {
        "torch": {
            "softmax_15": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "torch.log(1 - probs + 1e-08) * (1 - targets) * self.weights[0] + torch.log(probs + 1e-08) * targets * self.weights[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "probs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss_helper.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "true_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cluster_preds.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_72": {
                "variable": {
                    "value": "cluster_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_dict['cluster_ref'].float().cuda().clone()",
                            "Call"
                        ],
                        [
                            "torch.argmax(cluster_preds, dim=1).long().unsqueeze(1).repeat(1, cluster_preds.shape[1])",
                            "Call"
                        ],
                        [
                            "preds.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "cluster_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cluster_preds.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "corrects",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cluster_preds == 1) * (cluster_labels == 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "corrects.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_91": {
                "variable": {
                    "value": "cluster_ref_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "proposal_mask == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(-100000).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cluster_ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_dict['cluster_ref']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_ref_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(proposal_mask == 0, torch.tensor(-100000).float().cuda(), cluster_ref)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "-100000",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_82": {
                "input": {
                    "value": "data_dict['lang_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pointgroup.py": {
        "torch": {
            "CrossEntropyLoss_331": {
                "variable": {
                    "value": "semantic_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "cfg.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_332": {
                "variable": {
                    "value": "score_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "m",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.m",
                            "Attribute"
                        ],
                        [
                            "self.fix_module",
                            "Attribute"
                        ],
                        [
                            "self.pretrain_module",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(m, m, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.offset_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "m",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.m",
                            "Attribute"
                        ],
                        [
                            "self.fix_module",
                            "Attribute"
                        ],
                        [
                            "self.pretrain_module",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.score_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "m",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.m",
                            "Attribute"
                        ],
                        [
                            "self.fix_module",
                            "Attribute"
                        ],
                        [
                            "self.pretrain_module",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_219": {
                "variable": {
                    "value": "clusters_coords_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clusters_coords_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pointgroup_ops.sec_mean(clusters_coords, clusters_offset.cuda())",
                            "Call"
                        ],
                        [
                            "torch.index_select(clusters_coords_mean, 0, clusters_idx[:, 0].cuda().long())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "clusters_idx[:, 0].cuda().long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_226": {
                "variable": {
                    "value": "clusters_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clusters_scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1 / ((clusters_coords_max - clusters_coords_min) / fullscale).max(1)[0] - 0.01",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(clusters_scale, min=None, max=scale)",
                            "Call"
                        ],
                        [
                            "torch.index_select(clusters_scale, 0, clusters_idx[:, 0].cuda().long())",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_231": {
                "variable": {
                    "value": "clusters_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clusters_scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1 / ((clusters_coords_max - clusters_coords_min) / fullscale).max(1)[0] - 0.01",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(clusters_scale, min=None, max=scale)",
                            "Call"
                        ],
                        [
                            "torch.index_select(clusters_scale, 0, clusters_idx[:, 0].cuda().long())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "clusters_idx[:, 0].cuda().long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_237": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-min_xyz + torch.clamp(fullscale - range - 0.001, min=0) * torch.rand(3).cuda() + torch.clamp(fullscale - range + 0.001, max=0) * torch.rand(3).cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(offset, 0, clusters_idx[:, 0].cuda().long())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "clusters_idx[:, 0].cuda().long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "clusters_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[clusters_idx[:, 0].view(-1, 1).long(), clusters_coords.cpu()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_285": {
                "variable": {
                    "value": "object_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_preds > 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "proposals_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proposals_idx, proposals_idx_shift)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "proposals_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proposals_offset, proposals_offset_shift[1:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_463": {
                "variable": {
                    "value": "pt_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pt_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_467": {
                "variable": {
                    "value": "gt_offsets_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "instance_info[:, 0:3] - coords",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_469": {
                "variable": {
                    "value": "pt_offsets_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pt_offsets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ret['pt_offsets']",
                            "Subscript"
                        ],
                        [
                            "ret['pt_offsets']",
                            "Subscript"
                        ],
                        [
                            "self.offset_linear(pt_offsets_feats)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "output.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity.features, output_decoder.features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "pretrain_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CONF.PATH.BASE, self.pretrain_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feats, coords_float)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feats, coords_float)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "m",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.m",
                            "Attribute"
                        ],
                        [
                            "self.fix_module",
                            "Attribute"
                        ],
                        [
                            "self.pretrain_module",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "m",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.m",
                            "Attribute"
                        ],
                        [
                            "self.fix_module",
                            "Attribute"
                        ],
                        [
                            "self.pretrain_module",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_463": {
                "input": {
                    "value": "pt_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pt_offsets - gt_offsets",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_465": {
                "input": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(instance_labels != cfg.ignore_label).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_472": {
                "input": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(instance_labels != cfg.ignore_label).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_492": {
                "input": {
                    "value": "scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_236": {
                "input": {
                    "value": "fullscale - range - 0.001",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_236": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pointgroup_ops/functions/pointgroup_ops.py": {
        "torch": {}
    },
    "lib/pointgroup_ops/setup.py": {
        "torch": {}
    },
    "lib/solver.py": {
        "torch": {
            "save_362": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_root, 'model_last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_root, 'model_last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_243": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_329": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_root, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/spconv/setup.py": {
        "torch": {}
    },
    "lib/spconv/spconv/__init__.py": {
        "torch": {
            "zeros_35": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "updates.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "updates.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/spconv/spconv/conv.py": {
        "torch": {
            "Parameter_98": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*kernel_size, in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_134": {
                "variable": {
                    "value": "input.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.view(self.in_channels, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/spconv/spconv/functional.py": {
        "torch": {}
    },
    "lib/spconv/spconv/modules.py": {
        "torch": {}
    },
    "lib/spconv/spconv/ops.py": {
        "torch": {}
    },
    "lib/spconv/spconv/pool.py": {
        "torch": {}
    },
    "lib/spconv/test/test_conv.py": {
        "torch": {
            "zeros_313": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "updates.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "updates.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_82": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[3, *shape]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "scn.Convolution(ndim, in_channels, out_channels, kernel_size, stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_581": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_589": {
                "variable": {
                    "value": "indices_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_591": {
                "variable": {
                    "value": "indices_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_592": {
                "variable": {
                    "value": "features_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_594": {
                "variable": {
                    "value": "features_dense_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features_dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_597": {
                "variable": {
                    "value": "filters_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_343": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_352": {
                "variable": {
                    "value": "indices_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_353": {
                "variable": {
                    "value": "features_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_355": {
                "variable": {
                    "value": "features_dense_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features_dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "filters_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_365": {
                "variable": {
                    "value": "dout_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_402": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_411": {
                "variable": {
                    "value": "indices_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_412": {
                "variable": {
                    "value": "features_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_414": {
                "variable": {
                    "value": "features_dense_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features_dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_418": {
                "variable": {
                    "value": "filters_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1, size=[k, k, k, IC, OC]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_424": {
                "variable": {
                    "value": "dout_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_459": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_468": {
                "variable": {
                    "value": "indices_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_469": {
                "variable": {
                    "value": "indices_scn_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices[:, [1, 2, 3, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_470": {
                "variable": {
                    "value": "features_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_472": {
                "variable": {
                    "value": "features_ref_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_482": {
                "variable": {
                    "value": "dout_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-0.2, 0.2, out_ref.shape).astype(features.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_519": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_528": {
                "variable": {
                    "value": "indices_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['indices'][:, [3, 0, 1, 2]]).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_529": {
                "variable": {
                    "value": "features_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(sparse_dict['features']).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_531": {
                "variable": {
                    "value": "features_dense_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features_dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "sparse_dict['features_dense'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_544": {
                "variable": {
                    "value": "dout_sparse_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dout_sparse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.uniform(-0.2, 0.2, outfeatures.shape).astype(features.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_95": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_156": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_207": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "synchronize_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_104": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_165": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[32, 48, 64]",
                            "List"
                        ],
                        [
                            "[64]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_211": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/util/utils.py": {
        "torch": {
            "zeros_128": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(exp_path, exp_name + '-%09d' % epoch + '.pth')",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob(os.path.join(exp_path, exp_name + '-*.pth')))",
                            "Call"
                        ],
                        [
                            "f[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(exp_path, exp_name + '-%09d' % epoch + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(exp_path, exp_name + '-%09d' % epoch + '.pth')",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_89": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(exp_path, exp_name + '-%09d' % epoch + '.pth')",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob(os.path.join(exp_path, exp_name + '-*.pth')))",
                            "Call"
                        ],
                        [
                            "f[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(exp_path, exp_name + '-%09d' % epoch + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(exp_path, exp_name + '-%09d' % epoch + '.pth')",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/util/visualize.py": {
        "torch": {
            "load_76": {
                "variable": {
                    "value": "(xyz, rgb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "input_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(opt.data_root, opt.room_split, opt.room_name + '_inst_nostuff.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_78": {
                "variable": {
                    "value": "(xyz, rgb, label, inst_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "input_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(opt.data_root, opt.room_split, opt.room_name + '_inst_nostuff.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/ref_module.py": {
        "torch": {
            "GRU_61": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.glove_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.lang_sqz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, 128)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.feat_fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=128 + 128, out_channels=128, kernel_size=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.features_up_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_87": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_88": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 + 3 + num_heading_bin * 2 + num_size_cluster * 4 + self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_95": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_111": {
                "variable": {
                    "value": "lang_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lang_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_dict['lang_feat'].cuda().view(bs, CONF.TRAIN.MAX_DES_LEN, self.glove_embed_dim)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(lang_feat, lang_len, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.lang_sqz(lang_feat.squeeze(0)).unsqueeze(2).repeat(1, 1, self.num_proposal)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lang_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_dict['lang_len'].view(bs, -1).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "mean_size_arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.lang_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 18)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "in_channels": {
                    "value": "128 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_90": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "[features, lang_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "18",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/refnet.py": {
        "torch": {
            "sigmoid_77": {
                "variable": {
                    "value": "scores_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "proposals_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(proposals_offset.shape[0] - 1, N)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ret['batch_offsets'].shape[0] - 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_proposal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "number_of_proposals_in_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ret['batch_offsets'].shape[0] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "proposal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ret['batch_offsets'].shape[0] - 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_proposal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "batch_score_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_proposal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_147": {
                "variable": {
                    "value": "(_, batch_proposals_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_scores_pred.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.num_proposal",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/voting_module.py": {
        "torch": {
            "Conv1d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_29": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "(3 + self.out_dim) * self.vote_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(seed_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/eval.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ScannetReferenceDataset(scanrefer=scanrefer, scanrefer_all_scene=all_scene_list, split=split, num_points=args.num_points, use_color=args.use_color, use_height=not args.no_height, use_normal=args.use_normal, use_multiview=args.use_multiview)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_60": {
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(CONF.PATH.OUTPUT, args.folder, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/train.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ScannetReferenceDataset(scanrefer=scanrefer[split], scanrefer_all_scene=all_scene_list, split=split, num_points=args.num_points, use_height=not args.no_height, use_color=args.use_color, use_normal=args.use_normal, use_multiview=args.use_multiview)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.trainMerge",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/visualize.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ScannetReferenceDataset(scanrefer=scanrefer, scanrefer_all_scene=all_scene_list, split=split, num_points=args.num_points, use_color=args.use_color, use_height=not args.no_height, use_normal=args.use_normal, use_multiview=args.use_multiview)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_340": {
                "variable": {
                    "value": "pred_objectness",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['objectness_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_342": {
                "variable": {
                    "value": "pred_heading_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['heading_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_343": {
                "variable": {
                    "value": "pred_heading_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['heading_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_heading_class.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_346": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['size_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_347": {
                "variable": {
                    "value": "pred_size_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['size_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_351": {
                "variable": {
                    "value": "pred_ref_scores_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['cluster_ref'] * torch.argmax(data['objectness_scores'], 2).float() * data['pred_mask']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_401": {
                "variable": {
                    "value": "assigned_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['ref_box_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "data['object_assignment']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(CONF.PATH.OUTPUT, args.folder, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_351": {
                "input": {
                    "value": "data['objectness_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metric_util.py": {
        "torch": {
            "is_tensor_38": {
                "obj": {
                    "value": "label_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((labels.shape[0], labels.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_39": {
                "obj": {
                    "value": "pred_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((pred.shape[0], pred.shape[1]))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/nn_distance.py": {
        "torch": {
            "abs_25": {
                "variable": {
                    "value": "abs_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.abs(pc1arr[0, i, :] - pc2arr[0, j, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "quadratic",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "delta",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_57": {
                "variable": {
                    "value": "(dist1, idx1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_58": {
                "variable": {
                    "value": "(dist2, idx2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "pc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc1arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc2arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "huber_loss(pc_diff, delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pc_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_54": {
                "input": {
                    "value": "pc_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pc1_expand_tile - pc2_expand_tile",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}