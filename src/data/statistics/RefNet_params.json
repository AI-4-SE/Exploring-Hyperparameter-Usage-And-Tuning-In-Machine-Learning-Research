{
    "batcher.py": {
        "tensorflow": {
            "warning_278": {
                "msg": {
                    "value": "Bucket input queue is empty when calling next_batch. Bucket queue size: %i, Input queue size: %i",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._batch_queue.qsize()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._example_queue.qsize()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_280": {
                "msg": {
                    "value": "Finished reading dataset in single_pass mode.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_374": {
                "msg": {
                    "value": "Found an example with empty article text. Skipping it.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_295": {
                "msg": {
                    "value": "The example generator for this example queue filling thread has exhausted data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_340": {
                "msg": {
                    "value": "Found example queue thread dead. Restarting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_347": {
                "msg": {
                    "value": "Found batch queue thread dead. Restarting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_371": {
                "msg": {
                    "value": "Failed to get article or abstract from example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_297": {
                "msg": {
                    "value": "\"single_pass mode is on, so we've finished reading dataset. This thread is stopping.\"",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "tensorflow": {}
    },
    "data/preprocress.py": {
        "tensorflow": {
            "Example_70": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "greed_search.py": {
        "tensorflow": {}
    },
    "hybrid_decoder.py": {
        "tensorflow": {
            "expand_dims_11": {
                "variable": {
                    "value": "encoder_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(encoder_states, 2)",
                            "Call"
                        ],
                        [
                            "encoder_states",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_12": {
                "variable": {
                    "value": "query_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(query_states, 2)",
                            "Call"
                        ],
                        [
                            "query_states",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_23": {
                "variable": {
                    "value": "encoder_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(encoder_states, 2)",
                            "Call"
                        ],
                        [
                            "encoder_states",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_h', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "W_q",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_q",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, q_attn_size, q_attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "query_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(query_states, 2)",
                            "Call"
                        ],
                        [
                            "query_states",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_q', [1, 1, q_attn_size, q_attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "v_q",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v_q",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[q_attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "q_context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, q_attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "attention_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "input": {
                    "value": "decoder_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "util.linear(decoder_state, q_attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * tf.tanh(encoder_features + decoder_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(attn_dist, [batch_size, -1, 1, 1]) * encoder_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, attn_size])",
                            "Call"
                        ],
                        [
                            "background_attention(initial_state)",
                            "Call"
                        ],
                        [
                            "background_attention(state)",
                            "Call"
                        ],
                        [
                            "background_attention(state)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(attn_dist, [batch_size, -1, 1, 1]) * encoder_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "input": {
                    "value": "decoder_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "util.linear(decoder_state, q_attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_q * tf.tanh(query_features + decoder_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "q_context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(q_attn_dist, [batch_size, -1, 1, 1]) * query_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "q_context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_context_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, q_attn_size])",
                            "Call"
                        ],
                        [
                            "context_attention(initial_state)",
                            "Call"
                        ],
                        [
                            "context_attention(state)",
                            "Call"
                        ],
                        [
                            "context_attention(state)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(q_attn_dist, [batch_size, -1, 1, 1]) * query_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_context_vector, [-1, q_attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_98": {
                "msg": {
                    "value": "Adding hybrid_decoder timestep %i of %i",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "i + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "len(decoder_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "switcher_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "switcher_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.linear([context_vector, q_context_vector, state.c, state.h, x], 3, True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(switcher_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_128": {
                "variable": {
                    "value": "switcher_gen_pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "switcher_matrix[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "variable": {
                    "value": "switcher_gen_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "switcher_matrix[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "variable": {
                    "value": "switcher_ref_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "switcher_matrix[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "background_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "attn_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "util.mask_softmax(enc_padding_mask, e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "context_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "attn_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "util.mask_softmax(que_padding_mask, e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "calculate_switcher",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "AttnOutputProjection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_47": {
                "x": {
                    "value": "encoder_features + decoder_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "attn_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "background_attention(state)",
                            "Call"
                        ],
                        [
                            "background_attention(state)",
                            "Call"
                        ],
                        [
                            "masked_background_attention(e)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(util.mask_softmax(enc_padding_mask, e))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(util.mask_softmax(que_padding_mask, e))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "x": {
                    "value": "query_features + decoder_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "q_attn_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_attention(state)",
                            "Call"
                        ],
                        [
                            "context_attention(state)",
                            "Call"
                        ],
                        [
                            "masked_context_attention(f)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "tensorflow": {
            "Saver_23": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/bleu.py": {
        "tensorflow": {
            "warning_90": {
                "msg": {
                    "value": "multi-bleu.perl script returned non-zero exit code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_91": {
                "msg": {
                    "value": "error.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "self._enc_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "background_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self._enc_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "background_lens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self._enc_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "background_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self._enc_batch_extend_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "background_batch_extend_vocab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self._max_art_oovs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "max_art_oovs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self._que_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "context_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self._que_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "context_lens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self._que_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "context_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self._dec_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self._target_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self._dec_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self._dec_switch_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_switch_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self._bac_start_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "bac_start_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self._bac_end_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "bac_end_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self._switch_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "switch_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_142": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_370": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "hps.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_372": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_373": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_to_minimize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.total_loss",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "tf.AggregationMethod.EXPERIMENTAL_TREE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_376": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_to_minimize, tvars, aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self._hps.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_377": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_385": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_all_389": {
                "variable": {
                    "value": "self._summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMStateTuple_411": {
                "variable": {
                    "value": "dec_in_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "dec_in_state.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "dec_in_state.h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_415": {
                "variable": {
                    "value": "new_dec_in_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "dec_init_states.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "dec_init_states.h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_458": {
                "variable": {
                    "value": "new_states",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "results['states'].c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "results['states'].h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_69": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_70": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_71": {
                "variable": {
                    "value": "(encoder_outputs, (fw_st, bw_st))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_inputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_len",
                            "Method Argument"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw, cell_bw, encoder_inputs, dtype=tf.float32, sequence_length=seq_len, swap_memory=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(encoder_outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw, cell_bw, encoder_inputs, dtype=tf.float32, sequence_length=seq_len, swap_memory=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(encoder_outputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_77": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_78": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_79": {
                "variable": {
                    "value": "(encoder_outputs, (fw_st, bw_st))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_inputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_len",
                            "Method Argument"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw, cell_bw, encoder_inputs, dtype=tf.float32, sequence_length=seq_len, swap_memory=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(encoder_outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw, cell_bw, encoder_inputs, dtype=tf.float32, sequence_length=seq_len, swap_memory=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(encoder_outputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_88": {
                "variable": {
                    "value": "expanded_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(con_encoder_inputs, -3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, background_max_len, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_89": {
                "variable": {
                    "value": "expanded_background",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(bac_encoder_inputs, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 1, context_max_len, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "concat_similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(expanded_background, expanded_context, dot_product_matrix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "util.dense(concat_similarity_matrix, 1, use_bias=False, scope='similarity_matrix')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_95": {
                "variable": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self._que_padding_mask, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, background_max_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "similarity_matrix_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "context_masked_similarity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.mask_softmax(context_mask, similarity_matrix)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "background2context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "similarity_matrix_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(context_masked_similarity_matrix, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "con_encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_104": {
                "variable": {
                    "value": "squeezed_context_masked_similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "context_masked_similarity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.mask_softmax(context_mask, similarity_matrix)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "background_masked_similarity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.mask_softmax(background_mask, squeezed_context_masked_similarity_matrix)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "context2background",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(b, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "bac_encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bac_encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_108": {
                "variable": {
                    "value": "context2background",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context2background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(b, 1), bac_encoder_inputs)",
                            "Call"
                        ],
                        [
                            "tf.tile(context2background, (1, background_max_len, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, background_max_len, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(bac_encoder_inputs, background2context, bac_encoder_inputs * background2context, bac_encoder_inputs * context2background)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_112": {
                "variable": {
                    "value": "cell_fw_1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_113": {
                "variable": {
                    "value": "cell_bw_1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_114": {
                "variable": {
                    "value": "(encoder_outputs1, (fw_st1, bw_st1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((bac_encoder_inputs, background2context, bac_encoder_inputs * background2context, bac_encoder_inputs * context2background), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "bac_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bac_seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "matching_output1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw_1, cell_bw_1, G, dtype=tf.float32, sequence_length=bac_seq_len, swap_memory=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_118": {
                "variable": {
                    "value": "cell_fw_2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_119": {
                "variable": {
                    "value": "cell_bw_2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_120": {
                "variable": {
                    "value": "(encoder_outputs2, (fw_st2, bw_st2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "matching_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(encoder_outputs1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "bac_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bac_seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "matching_output2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw_2, cell_bw_2, matching_output1, dtype=tf.float32, sequence_length=bac_seq_len, swap_memory=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "w_reduce_c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 4, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "w_reduce_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 4, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_130": {
                "variable": {
                    "value": "bias_reduce_c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_131": {
                "variable": {
                    "value": "bias_reduce_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "old_c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.c, bw_st.c, fw_st_q.c, bw_st_q.c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "old_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.h, bw_st.h, fw_st_q.h, bw_st_q.h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_c, w_reduce_c) + bias_reduce_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_h, w_reduce_h) + bias_reduce_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self._hps.batch_size, self._max_art_oovs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_169": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "self._hps.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_170": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, attn_len])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_172": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, attn_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, attn_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, self._enc_batch_extend_vocab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_190": {
                "variable": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-hps.rand_unif_init_mag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hps.rand_unif_init_mag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_191": {
                "variable": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "hps.trunc_norm_init_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_381": {
                "msg": {
                    "value": "Building graph...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_391": {
                "msg": {
                    "value": "Time to build graph: %i seconds",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "background_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "context_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "matching_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "modeling_layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "modeling_layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "reduce_final_st",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_138": {
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "calc_word_level_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "seq2seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize, hps.emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_196": {
                "variable": {
                    "value": "emb_enc_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._enc_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_197": {
                "variable": {
                    "value": "emb_que_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._que_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_230": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.hidden_dim, vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_231": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_251": {
                "variable": {
                    "value": "w_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[encode_state_length, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_253": {
                "variable": {
                    "value": "w_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.hidden_dim, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "bias_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_256": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_257": {
                "variable": {
                    "value": "background_features",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "background_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._background_final_state",
                            "Attribute"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_b', [encode_state_length, attention_vec_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "bac_encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bac_encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "con_encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "con_encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "input": {
                    "value": "bac_encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bac_encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "self._que_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(background_masked_similarity_matrix, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_162": {
                "values": {
                    "value": "[dist, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_171": {
                "input": {
                    "value": "self._enc_batch_extend_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_175": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, self._enc_batch_extend_vocab), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "copy_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._hps.batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "hybrid_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "generation_decoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "reference_decoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_260": {
                "variable": {
                    "value": "w_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_mlp",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3 * hps.hidden_dim, hps.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "bias_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_mlp",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_306": {
                "name_or_scope": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_309": {
                "variable": {
                    "value": "self.gen_mode_work_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.count_nonzero(self._dec_padding_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_310": {
                "variable": {
                    "value": "self.switch_work_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.count_nonzero(self._dec_switch_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "inference",
                    "type": "str",
                    "possible_values": []
                }
            },
            "top_k_350": {
                "variable": {
                    "value": "(self.word_probs, self.word_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "infer_word_level_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_level_dists[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_353": {
                "variable": {
                    "value": "outer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(self.start_dist[0], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(self.end_dist[0], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "top_k_355": {
                "variable": {
                    "value": "(self.start_prob, self.start_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(outer, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_356": {
                "variable": {
                    "value": "(self.end_prob, self.end_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(outer, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "a": {
                    "value": "old_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_st.c, bw_st.c, fw_st_q.c, bw_st_q.c], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_c', [hidden_dim * 4, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "a": {
                    "value": "old_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_st.h, bw_st.h, fw_st_q.h, bw_st_q.h], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_h', [hidden_dim * 4, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_198": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_238": {
                "logits": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_264": {
                "variable": {
                    "value": "hop_1_features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hop_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hop_1 in enumerate(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "hop_1 in enumerate(decoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_step', [hps.hidden_dim, attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_step', [attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_265": {
                "variable": {
                    "value": "hop_1_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hop_1_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(hop_1, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_1_features, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(initial_state, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_1_features, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "variable": {
                    "value": "start_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * tf.tanh(background_features + hop_1_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_267": {
                "variable": {
                    "value": "start_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "util.mask_softmax(self._enc_padding_mask, start_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_270": {
                "variable": {
                    "value": "start_dist_ex_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(v * tf.tanh(background_features + hop_1_features), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(util.mask_softmax(self._enc_padding_mask, start_dist))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * tf.tanh(background_features + hop_1_features), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(util.mask_softmax(self._enc_padding_mask, start_dist))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "variable": {
                    "value": "start_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "start_dist_ex_dim * background_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "start_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "start_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(start_dist_ex_dim * background_states, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(start_vector, [-1, encode_state_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(start_dist_ex_dim * background_states, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(start_vector, [-1, encode_state_length])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, encode_state_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_275": {
                "variable": {
                    "value": "concat_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hop_1, start_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "xw_plus_b_276": {
                "variable": {
                    "value": "hop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "concat_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([hop_1, start_vector], 1)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_mlp', [3 * hps.hidden_dim, hps.hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_mlp', [hps.hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_278": {
                "variable": {
                    "value": "hop_2_features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hop_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(concat_vector, w_mlp, bias_mlp)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_step', [hps.hidden_dim, attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_step', [attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_279": {
                "variable": {
                    "value": "hop_2_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hop_2_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(hop_2, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_2_features, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(state, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_2_features, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_280": {
                "variable": {
                    "value": "end_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * tf.tanh(background_features + hop_2_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "end_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "util.mask_softmax(self._enc_padding_mask, end_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRUCell_285": {
                "variable": {
                    "value": "cell_pre_span",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_314": {
                "variable": {
                    "value": "switch_gen_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(tf.convert_to_tensor(self.switch_gen_time_step), perm=[1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_315": {
                "variable": {
                    "value": "switch_ref_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(tf.convert_to_tensor(self.switch_ref_time_step), perm=[1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_321": {
                "variable": {
                    "value": "word_level_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.word_level_dists",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_322": {
                "variable": {
                    "value": "word_level_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "word_level_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vocab_dist + copy_dist for (vocab_dist, copy_dist) in zip(vocab_dists_extended, attn_dists_projected)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(self.word_level_dists)",
                            "Call"
                        ],
                        [
                            "tf.transpose(word_level_dists, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_323": {
                "variable": {
                    "value": "word_level_outputs_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._target_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "vsize + self._max_art_oovs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "start_dist_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.convert_to_tensor(self.start_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_329": {
                "variable": {
                    "value": "end_dist_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.convert_to_tensor(self.end_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_331": {
                "variable": {
                    "value": "start_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._bac_start_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_332": {
                "variable": {
                    "value": "end_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._bac_end_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_335": {
                "variable": {
                    "value": "start_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "start_loss_all_step * self._switch_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_336": {
                "variable": {
                    "value": "end_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "end_losss_all_step * self._switch_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_198": {
                "value": {
                    "value": "self._dec_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "xw_plus_b_236": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output in enumerate(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "cell_pre_span(start_vector, initial_state)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [hps.hidden_dim, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('v', [vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', [attention_vec_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_288": {
                "variable": {
                    "value": "hop_1_features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hop_1",
                            "variable"
                        ]
                    ]
                },
                "weights": {
                    "value": "w_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_step', [hps.hidden_dim, attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_step', [attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_289": {
                "variable": {
                    "value": "hop_1_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hop_1_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(hop_1, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_1_features, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(initial_state, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_1_features, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_290": {
                "variable": {
                    "value": "start_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * tf.tanh(background_features + hop_1_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "start_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "util.mask_softmax(self._enc_padding_mask, start_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "variable": {
                    "value": "start_dist_ex_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(v * tf.tanh(background_features + hop_1_features), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(util.mask_softmax(self._enc_padding_mask, start_dist))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * tf.tanh(background_features + hop_1_features), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(util.mask_softmax(self._enc_padding_mask, start_dist))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "variable": {
                    "value": "start_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "start_dist_ex_dim * background_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "start_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "start_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(start_dist_ex_dim * background_states, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(start_vector, [-1, encode_state_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(start_dist_ex_dim * background_states, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(start_vector, [-1, encode_state_length])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, encode_state_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_300": {
                "variable": {
                    "value": "hop_2_features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_pre_span(start_vector, initial_state)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_step', [hps.hidden_dim, attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_step', [attention_vec_size], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_301": {
                "variable": {
                    "value": "hop_2_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hop_2_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(hop_2, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_2_features, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(state, w_step, bias_step)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hop_2_features, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_302": {
                "variable": {
                    "value": "end_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * tf.tanh(background_features + hop_2_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_303": {
                "variable": {
                    "value": "end_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "util.mask_softmax(self._enc_padding_mask, end_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "count_nonzero_309": {
                "input": {
                    "value": "self._dec_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_310": {
                "input": {
                    "value": "self._dec_switch_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_311": {
                "x": {
                    "value": "tf.count_nonzero(self._bac_end_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "switch_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "generation_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_327": {
                "name_or_scope": {
                    "value": "reference_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_341": {
                "name_or_scope": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_343": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_353": {
                "input": {
                    "value": "self.end_dist[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_355": {
                "input_tensor": {
                    "value": "outer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(self.start_dist[0], 2), tf.expand_dims(self.end_dist[0], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(outer, 0, hps.max_span_len)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_356": {
                "input_tensor": {
                    "value": "outer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(self.start_dist[0], 2), tf.expand_dims(self.end_dist[0], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(outer, 0, hps.max_span_len)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "count_nonzero_311": {
                "input": {
                    "value": "self._bac_end_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_314": {
                "a": {
                    "value": "tf.convert_to_tensor(self.switch_gen_time_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_315": {
                "a": {
                    "value": "tf.convert_to_tensor(self.switch_ref_time_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_316": {
                "input_tensor": {
                    "value": "self._switch_batch * tf.log(switch_ref_matrix + 1e-10) * self._dec_switch_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_317": {
                "input_tensor": {
                    "value": "(1 - self._switch_batch) * tf.log(switch_gen_matrix + 1e-10) * self._dec_switch_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_324": {
                "input_tensor": {
                    "value": "word_level_outputs_one_hot * tf.log(word_level_dists + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_325": {
                "input_tensor": {
                    "value": "word_level_crossent * self._dec_padding_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_328": {
                "value": {
                    "value": "self.start_dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_329": {
                "value": {
                    "value": "self.end_dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_333": {
                "input_tensor": {
                    "value": "start_label * tf.log(start_dist_matrix + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_334": {
                "input_tensor": {
                    "value": "end_label * tf.log(end_dist_matrix + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_337": {
                "input_tensor": {
                    "value": "self._switch_batch * tf.log(switch_ref_matrix + 1e-10) * self._dec_switch_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_266": {
                "x": {
                    "value": "background_features + hop_1_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_280": {
                "x": {
                    "value": "background_features + hop_2_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_314": {
                "value": {
                    "value": "self.switch_gen_time_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_315": {
                "value": {
                    "value": "self.switch_ref_time_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_290": {
                "x": {
                    "value": "background_features + hop_1_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_302": {
                "x": {
                    "value": "background_features + hop_2_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_324": {
                "x": {
                    "value": "word_level_dists + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_333": {
                "x": {
                    "value": "start_dist_matrix + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_334": {
                "x": {
                    "value": "end_dist_matrix + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_316": {
                "x": {
                    "value": "switch_ref_matrix + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_317": {
                "x": {
                    "value": "switch_gen_matrix + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_337": {
                "x": {
                    "value": "switch_ref_matrix + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "tensorflow": {
            "DEFINE_string_17": {
                "name": {
                    "value": "config_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config.yaml",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "pass the config_file through command line if new expt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['mode']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "must be one of train/test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "train_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['train_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Default path to the chunked files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "dev_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['dev_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Default path to the chunked files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "test_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['test_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Default path to the chunked files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "vocab_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['vocab_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to text vocabulary file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "appoint_test",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "appoint a model to test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "log_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['log_root']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory for all logging.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "exp_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['exp_name']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Name for experiment. Logs will be saved in a directory with this name, under log_root.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "epoch_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['epoch_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "the max num of train epoch num",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "hidden_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of RNN hidden states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "emb_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of word embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "minibatch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "max_bac_enc_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['max_bac_enc_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of encoder (max source text tokens)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "max_con_enc_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['max_con_enc_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of query encoder (max source query tokens)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "max_dec_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['max_dec_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of decoder (max summary tokens)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "vocab_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of vocabulary. These will be read from the vocabulary file in order. If the vocabulary file contains fewer words than this number, or if this number is set to 0, will take all words in the vocabulary file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "rand_unif_init_mag",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['rand_unif_init_mag']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "magnitude for lstm cells random uniform inititalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "trunc_norm_init_std",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['trunc_norm_init_std']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "std of trunc norm init, used for initializing everything else",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_43": {
                "name": {
                    "value": "max_grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "for gradient clipping",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "max_span_len",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['max_span_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "the max length of predicted span",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "multi_hop_span_pre_mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['multi_hop_span_pre_mode']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "the mode of muilti_hop_span prediction.[rnn|mlp]",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_46": {
                "name": {
                    "value": "multi_label_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['multi_label_eval']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "do multi_label_evalation for testset, only for test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_47": {
                "name": {
                    "value": "matching_layer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['matching_layer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "whether use matching layer or not ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_48": {
                "name": {
                    "value": "matching_gate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "config['matching_gate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "whether use gate in matching layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_57": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "FLAGS.epoch_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_59": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_61": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_65": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_141": {
                "seed": {
                    "value": "111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_165": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {
            "ConfigProto_10": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_16": {
                "variable": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(seq_mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "seq_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_18": {
                "condition": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(seq_mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "seq_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "score_mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-10000000000.0 * tf.ones_like(scores, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_86": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', [dim, hidden])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(args[0], matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.concat(args, 1), matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(flat_inputs, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(res, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, out_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape[idx] for idx in range(len(inputs.get_shape().as_list()) - 1)] + [hidden]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_17": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_26": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(args, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'dense'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_96": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(args[0], matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.concat(args, 1), matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(flat_inputs, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(res, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, out_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [hidden], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_77": {
                "values": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_80": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_95": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}