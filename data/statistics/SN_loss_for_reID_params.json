{
    "src/data/utils/metric.py": {
        "sklearn": {
            "average_precision_score_175": {
                "variable": {
                    "value": "aps[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/utils/utils.py": {
        "torch": {
            "load_238": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_file",
                            "Method Argument"
                        ],
                        [
                            "ckpt_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lambda storage, loc: storage) if load_to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "vt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_265": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(ckpt_file, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "dict(state_dicts=state_dicts, ep=ep, scores=scores)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_file",
                            "Method Argument"
                        ],
                        [
                            "ckpt_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_505": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_412": {
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/utils/visualize_rank_list.py": {
        "torch": {
            "DataParallel_199": {
                "variable": {
                    "value": "model_w",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(last_conv_stride=cfg.last_conv_stride)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_211": {
                "variable": {
                    "value": "loaded",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "used_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_weight_file or cfg.ckpt_file",
                            "BoolOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "ndarray": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(self.TVT(torch.from_numpy(ims).float()))",
                            "Call"
                        ],
                        [
                            "ims",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/losses/SN_loss.py": {
        "torch": {
            "pow_221": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_221": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_19": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_40": {
                "variable": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euclidean_dist(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.expand(n, n).eq(targets.expand(n, n).t())",
                            "Call"
                        ],
                        [
                            "pos_mask - eyes_.eq(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "masked_select_41": {
                "variable": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euclidean_dist(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "neg_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eyes_.eq(eyes_) - pos_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_138": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "pair",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_pair, neg_pair]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "masked_select_65": {
                "variable": {
                    "value": "pos_neig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_pair in enumerate(pos_dist)",
                            "Call"
                        ],
                        [
                            "torch.sort(pos_pair)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "pos_pair < threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "masked_select_66": {
                "variable": {
                    "value": "neg_neig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_dist[i]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "neg_pair < threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "pos_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(self.alpha * (1 - pos_neig))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "neg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(self.alpha * (1 - neg_neig))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_235": {
                "*size": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_236": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "loss1",
                            "variable"
                        ]
                    ]
                }
            },
            "sort_57": {
                "input": {
                    "value": "pos_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_pair in enumerate(pos_dist)",
                            "Call"
                        ],
                        [
                            "torch.sort(pos_pair)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_98": {
                "input": {
                    "value": "self.alpha * (1 - pos_neig)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_99": {
                "input": {
                    "value": "self.alpha * (1 - neg_neig)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_101": {
                "input": {
                    "value": "pos_logit / (pos_logit + neg_logit)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_142": {
                "input": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(dist_mat, neg_mask)",
                            "Call"
                        ],
                        [
                            "neg_dist.resize(len(neg_dist) // num_neg_instances, num_neg_instances)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_143": {
                "input": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(dist_mat, pos_mask)",
                            "Call"
                        ],
                        [
                            "pos_dist.resize(len(pos_dist) // (num_instances - 1), num_instances - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_32": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_63": {
                "input": {
                    "value": "pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([pos_pair, neg_pair])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "DataParallel_405": {
                "variable": {
                    "value": "model_w",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(last_conv_stride=cfg.last_conv_stride)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_417": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_502": {
                "variable": {
                    "value": "nll_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_443": {
                "variable": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.model_weight_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ]
                    ]
                }
            },
            "load_461": {
                "variable": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.model_weight_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ]
                    ]
                }
            },
            "from_numpy_338": {
                "ndarray": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set.next_batch()",
                            "Call"
                        ],
                        [
                            "Variable(self.TVT(torch.from_numpy(ims).float()))",
                            "Call"
                        ],
                        [
                            "ims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_486": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_563": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set.next_batch()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_562": {
                "ndarray": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_set.next_batch()",
                            "Call"
                        ],
                        [
                            "Variable(self.TVT(torch.from_numpy(ims).float()))",
                            "Call"
                        ],
                        [
                            "ims",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/Model.py": {
        "torch": {
            "avg_pool2d_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/myModel.py": {
        "torch": {
            "avg_pool2d_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/resnet.py": {
        "torch": {
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}