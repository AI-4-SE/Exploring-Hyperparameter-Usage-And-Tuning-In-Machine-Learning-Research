{
    "evaluate_retrieved_passages.py": {
        "torch": {}
    },
    "generate_passage_embeddings.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.TextDataset(passages, title_prefix='title:', passage_prefix='context:')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.per_gpu_batch_size * opt.world_size",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.TextCollator(tokenizer, model.config.passage_maxlength)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "allembeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "allembeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(allembeddings, dim=0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "passage_retrieval.py": {
        "torch": {
            "DataLoader_36": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.per_gpu_batch_size * opt.world_size",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Collator(opt.question_maxlength, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_50": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embedding, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/data.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "passage_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "passage_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(passage_ids, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "passage_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "passage_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(passage_masks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[ex['index'] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[ex['index'] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[float(c['score']) for c in contexts]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(scores)",
                            "Call"
                        ],
                        [
                            "[ex['scores'] for ex in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scores",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[float(c['score']) for c in contexts]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(scores)",
                            "Call"
                        ],
                        [
                            "[ex['scores'] for ex in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(scores, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "ModuleList_191": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "block",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(block)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(block)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_224": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.q(input).view(bsz, -1, n_heads, d_heads).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_237": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "mod.layer[1].EncDecAttention",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "mod.layer[1].EncDecAttention",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v(kv).view(bsz, -1, n_heads, d_heads).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "block",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(block)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(block)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "scores.view(bsz, n_heads, n_layers, n_passages, -1)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(~context_mask[:, None, None], 0.0)",
                            "Call"
                        ],
                        [
                            "scores.sum(dim=[1, 2, 4])",
                            "Call"
                        ],
                        [
                            "scores / ntokens",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_296": {
                "variable": {
                    "value": "self.loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_320": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bd,bid->bi",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "question_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embed_text(text_ids=question_ids, text_mask=question_mask, apply_mask=self.config.apply_question_mask, extract_cls=self.config.extract_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_356": {
                "variable": {
                    "value": "gold_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(gold_score, dim=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_357": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('bd,bid->bi', question_output, passage_output.view(bsz, n_passages, -1))",
                            "Call"
                        ],
                        [
                            "score / np.sqrt(question_output.size(-1))",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.log_softmax(score, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.indexing_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_295": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.config.indexing_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "output[0].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_352": {
                "variable": {
                    "value": "text_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(input_ids=text_ids, attention_mask=text_mask if apply_mask else None)",
                            "Call"
                        ],
                        [
                            "text_output[0]",
                            "Subscript"
                        ],
                        [
                            "self.proj(text_output)",
                            "Call"
                        ],
                        [
                            "self.norm(text_output)",
                            "Call"
                        ],
                        [
                            "text_output[:, 0]",
                            "Subscript"
                        ],
                        [
                            "text_output.masked_fill(~text_mask[:, :, None], 0.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(text_output, dim=1) / torch.sum(text_mask, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(text_output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_350": {
                "input": {
                    "value": "text_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/slurm.py": {
        "torch": {
            "device_140": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_142": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_120": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_139": {
                "device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/util.py": {
        "torch": {
            "load_79": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(epoch_path, 'optimizer.pth.tar')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "t_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x * count]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "t_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[count]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'step': step, 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'opt': opt, 'best_eval_metric': best_eval_metric}",
                            "Dict"
                        ],
                        [
                            "torch.load(optimizer_path, map_location=opt.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(epoch_path, 'optimizer.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_reader.py": {
        "torch": {
            "SequentialSampler_115": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(eval_examples, opt.n_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(eval_examples, opt.n_context)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.per_gpu_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator_function",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Collator(opt.text_maxlength, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_reader.py": {
        "torch": {
            "RandomSampler_33": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(train_examples, opt.n_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(train_examples, opt.n_context)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.per_gpu_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Collator(opt.text_maxlength, tokenizer, answer_maxlength=opt.answer_maxlength)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_94": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.per_gpu_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Collator(opt.text_maxlength, tokenizer, answer_maxlength=opt.answer_maxlength)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "opt.global_rank + opt.seed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_133": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_194": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src.model.FiDT5(t5.config)",
                            "Call"
                        ],
                        [
                            "model.to(opt.local_rank)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[opt.local_rank], output_device=opt.local_rank, find_unused_parameters=False)",
                            "Call"
                        ],
                        [
                            "model.module if hasattr(model, 'module') else model",
                            "IfExp"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[opt.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "opt.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_27": {
                "variable": {
                    "value": "tb_logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "Path(opt.checkpoint_dir) / opt.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__61": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_retriever.py": {
        "torch": {
            "DataLoader_36": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(train_examples, opt.n_context)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset) if opt.is_distributed else RandomSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.per_gpu_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_105": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.per_gpu_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "model.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_207": {
                "variable": {
                    "value": "model.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_150": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_213": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_class(config, initialize_wBERT=True)",
                            "Call"
                        ],
                        [
                            "model.to(opt.device)",
                            "Call"
                        ],
                        [
                            "model.to(opt.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[opt.local_rank], output_device=opt.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[opt.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "opt.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_31": {
                "variable": {
                    "value": "tb_logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "Path(opt.checkpoint_dir) / opt.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DistributedSampler_35": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(train_examples, opt.n_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_35": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.Dataset(train_examples, opt.n_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__66": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}