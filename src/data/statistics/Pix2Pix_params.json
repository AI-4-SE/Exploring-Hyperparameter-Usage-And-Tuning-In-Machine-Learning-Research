{
    "src/blocks.py": {
        "tensorflow": {
            "random_normal_initializer_21": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_48": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_custom_objects_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_24": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_normal_initializer(0.0, 0.02)",
                            "Call"
                        ],
                        [
                            "random_normal_initializer(0.0, 0.02)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_51": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_normal_initializer(0.0, 0.02)",
                            "Call"
                        ],
                        [
                            "random_normal_initializer(0.0, 0.02)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_91": {
                "x": {
                    "value": "tf.math.softplus(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_33": {
                "activation": {
                    "value": "ACTIVATION",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Activation_61": {
                "activation": {
                    "value": "ACTIVATION",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_91": {
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset.py": {
        "tensorflow": {
            "read_file_12": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_jpeg_13": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_24": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, w:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(input_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([gray_image, gray_image, gray_image], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(input_image, [height, width], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "input_image / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.flip_left_right(input_image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_25": {
                "variable": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :w, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(real_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.image.resize(real_image, [height, width], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "real_image / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.flip_left_right(real_image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_58": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, w:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(input_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([gray_image, gray_image, gray_image], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(input_image, [height, width], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "input_image / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.flip_left_right(input_image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.NEAREST_NEIGHBOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_62": {
                "variable": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :w, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(real_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.image.resize(real_image, [height, width], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "real_image / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.flip_left_right(real_image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.NEAREST_NEIGHBOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "stacked_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_image, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_crop_76": {
                "variable": {
                    "value": "cropped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "stacked_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([input_image, real_image], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[2, IMG_HEIGHT, IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "function_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_left_right_104": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, w:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(input_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([gray_image, gray_image, gray_image], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(input_image, [height, width], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "input_image / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.flip_left_right(input_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_left_right_105": {
                "variable": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "real_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :w, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(real_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.image.resize(real_image, [height, width], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "real_image / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.flip_left_right(real_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_21": {
                "variable": {
                    "value": "gray_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_22": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gray_image, gray_image, gray_image]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "uniform_103": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_16": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/losses.py": {
        "tensorflow": {
            "BinaryCrossentropy_6": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_31": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target - gen_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_16": {
                "input": {
                    "value": "disc_real_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "disc_generated_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "disc_generated_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_31": {
                "x": {
                    "value": "target - gen_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "tensorflow": {
            "random_normal_initializer_34": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_35": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "OUTPUT_CHANNELS",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_normal_initializer(0.0, 0.02)",
                            "Call"
                        ],
                        [
                            "random_normal_initializer(0.0, 0.02)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_40": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_41": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_60": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Input_61": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_62": {
                "variable": {
                    "value": "tar",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concatenate_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[inp, tar]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_52": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=[None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "down(x)",
                            "Call"
                        ],
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "concat([x, skip])",
                            "Call"
                        ],
                        [
                            "last(x)",
                            "Call"
                        ],
                        [
                            "concatenate([inp, tar])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_83": {
                "inputs": {
                    "value": "[inp, tar]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2DTranspose(OUTPUT_CHANNELS, 4, strides=2, padding='same', kernel_initializer=initializer, activation='tanh')",
                            "Call"
                        ],
                        [
                            "Conv2D(1, 4, strides=1, kernel_initializer=initializer)(zero_pad2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding2D_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_75": {
                "activation": {
                    "value": "ACTIVATION",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/training.py": {
        "tensorflow": {
            "Adam_13": {
                "variable": {
                    "value": "generator_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_14": {
                "variable": {
                    "value": "discriminator_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Checkpoint_34": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "generator_optimizer": {
                    "value": "generator_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam(LEARNING_RATE, beta_1=0.5)",
                            "Call"
                        ]
                    ]
                },
                "discriminator_optimizer": {
                    "value": "discriminator_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam(LEARNING_RATE, beta_1=0.5)",
                            "Call"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "discriminator": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientTape_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "get_file_13": {
                "variable": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "fname": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_url.split('/')[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "origin": {
                    "value": "dataset_url",
                    "type": "variable",
                    "possible_values": []
                },
                "extract": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}