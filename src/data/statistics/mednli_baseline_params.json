{
    "predict.py": {
        "sklearn": {
            "accuracy_score_82": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "labels_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[labels[i] for i in predictions.argmax(axis=1)]",
                            "ListComp"
                        ],
                        [
                            "predictions.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "softmax_72": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(premise, hypothesis)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_feature_based.py": {
        "sklearn": {
            "accuracy_score_102": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_127": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "cfg.lowercase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LabelEncoder_131": {
                "variable": {
                    "value": "label_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_146": {
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_147": {
                "n_estimators": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/esim_model.py": {
        "torch": {
            "matmul_12": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "e_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._attention(a, b)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "e_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._attention(a, b)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "a_tilda",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(e, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "b_tilda",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_a.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "m_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "to_concat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs_avg, inputs_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_75": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.interaction_enhancement_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc_representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.fc_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "m_a_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.interaction_enhancement_mapping(m_a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "m_b_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.interaction_enhancement_mapping(m_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_a, v_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_representation(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "W_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/infersent_model.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size * 4 * 2, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "h_combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[premise_h, hypothesis_h, torch.abs(premise_h - hypothesis_h), premise_h * hypothesis_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "hidden_size * 4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_39": {
                "input": {
                    "value": "premise_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder(premise_emb, premise_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_40": {
                "input": {
                    "value": "hypothesis_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder(hypothesis_emb, hypothesis_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_13": {
                "ndarray": {
                    "value": "W_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_43": {
                "input": {
                    "value": "premise_h - hypothesis_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/simple_model.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(embedding_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(hidden_size * 2, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "h_combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[premise_h, hypothesis_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "premise_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.projection(premise_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "hypothesis_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.projection(hypothesis_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_13": {
                "ndarray": {
                    "value": "W_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_trainable_parameters(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_37": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__49": {
                "parameters": {
                    "value": "model_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_trainable_parameters(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "cfg.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset.py": {
        "torch": {}
    },
    "utils/torch.py": {
        "torch": {
            "is_available_59": {
                "variable": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_72": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(filename)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ]
                    ]
                }
            },
            "ne_95": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sequences.sum(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "masking",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(obj)",
                            "Call"
                        ],
                        [
                            "obj.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_86": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_111": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_134": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_sorted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[inputs_sorted_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "list(lengths_sorted.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_139": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[inputs_unsorted_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in h]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in h]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}