{
    "baselines.py": {
        "sklearn": {
            "LogisticRegression_77": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_85": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression(solver='lbfgs', max_iter=1000)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(n_estimators=300, max_depth=10)",
                            "Call"
                        ],
                        [
                            "OneVsRestClassifier(model)",
                            "Call"
                        ],
                        [
                            "LGBMClassifier(n_estimators=100)",
                            "Call"
                        ],
                        [
                            "MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_104": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test_score > threshold",
                            "Compare"
                        ]
                    ]
                }
            },
            "RandomForestClassifier_79": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MLPClassifier_83": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(100, 50)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "sklearn": {
            "confusion_matrix_86": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_trues[:, i]",
                            "Subscript"
                        ],
                        [
                            "y_trues[:, i]",
                            "Subscript"
                        ],
                        [
                            "y_trues[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y_score >= thresholds[i]).astype(int)",
                            "Call"
                        ],
                        [
                            "y_preds[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_140": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ECGDataset('train', data_dir, label_csv, train_folds, leads)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ECGDataset('val', data_dir, label_csv, val_folds, leads)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ECGDataset('test', data_dir, label_csv, test_folds, leads)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_121": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "precision_score_24": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_score_25": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_26": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_27": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_score",
                            "Method Argument"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_28": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_56": {
                "y_true": {
                    "value": "y_trues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_trues",
                            "Method Argument"
                        ],
                        [
                            "y_trues",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_scores",
                            "Method Argument"
                        ],
                        [
                            "y_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_34": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_score > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "f1_score_43": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_score > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "from_numpy_63": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_dict.get(patient_id)",
                            "Call"
                        ],
                        [
                            "row[self.classes].to_numpy(dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ECGDataset('train', data_dir, label_csv, train_folds, leads)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ECGDataset('val', data_dir, label_csv, val_folds, leads)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ECGDataset('test', data_dir, label_csv, test_folds, leads)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_113": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(net.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_115": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_91": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_119": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "Conv1d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_40": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_45": {
                "variable": {
                    "value": "self.adaptiveavgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_46": {
                "variable": {
                    "value": "self.adaptivemaxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_54": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "shap_values.py": {
        "torch": {
            "stack_147": {
                "variable": {
                    "value": "background_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(prepare_input(input)).float() for input in background_inputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_119": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "stack_156": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(prepare_input(input)).float()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_157": {
                "input": {
                    "value": "model(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "ndarray": {
                    "value": "prepare_input(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "ndarray": {
                    "value": "prepare_input(input)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}