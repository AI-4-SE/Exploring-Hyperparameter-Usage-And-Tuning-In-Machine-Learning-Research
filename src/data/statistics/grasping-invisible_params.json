{
    "light_weight_refinenet/models/mobilenet.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbnrelu(in_planes, intermed_planes, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU6_106": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_124": {
                "variable": {
                    "value": "l7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer7(l6)",
                            "Call"
                        ],
                        [
                            "self.conv7(l7)",
                            "Call"
                        ],
                        [
                            "self.relu(l8 + l7)",
                            "Call"
                        ],
                        [
                            "self.crp4(l7)",
                            "Call"
                        ],
                        [
                            "self.conv_adapt4(l7)",
                            "Call"
                        ],
                        [
                            "F.interpolate(l7, size=l6.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l6.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "l5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer5(l4)",
                            "Call"
                        ],
                        [
                            "self.conv5(l5)",
                            "Call"
                        ],
                        [
                            "self.relu(l5 + l6 + l7)",
                            "Call"
                        ],
                        [
                            "self.crp3(l5)",
                            "Call"
                        ],
                        [
                            "self.conv_adapt3(l5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(l5, size=l4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_137": {
                "variable": {
                    "value": "l4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(l3)",
                            "Call"
                        ],
                        [
                            "self.conv4(l4)",
                            "Call"
                        ],
                        [
                            "self.relu(l5 + l4)",
                            "Call"
                        ],
                        [
                            "self.crp2(l4)",
                            "Call"
                        ],
                        [
                            "self.conv_adapt2(l4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(l4, size=l3.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "light_weight_refinenet/models/resnet.py": {
        "torch": {
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_146": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_151": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.clf_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_215": {
                "variable": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_ims1d2_outl1_dimred(l4)",
                            "Call"
                        ],
                        [
                            "self.relu(x4)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g1_pool(x4)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g1_b3_joint_varout_dimred(x4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x4, size=l3.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_220": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_ims1d2_outl2_dimred(l3)",
                            "Call"
                        ],
                        [
                            "self.adapt_stage2_b2_joint_varout_dimred(x3)",
                            "Call"
                        ],
                        [
                            "x3 + x4",
                            "BinOp"
                        ],
                        [
                            "F.relu(x3)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g2_pool(x3)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g2_b3_joint_varout_dimred(x3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x3, size=l2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_223": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_ims1d2_outl2_dimred(l3)",
                            "Call"
                        ],
                        [
                            "self.adapt_stage2_b2_joint_varout_dimred(x3)",
                            "Call"
                        ],
                        [
                            "x3 + x4",
                            "BinOp"
                        ],
                        [
                            "F.relu(x3)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g2_pool(x3)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g2_b3_joint_varout_dimred(x3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x3, size=l2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_228": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_ims1d2_outl3_dimred(l2)",
                            "Call"
                        ],
                        [
                            "self.adapt_stage3_b2_joint_varout_dimred(x2)",
                            "Call"
                        ],
                        [
                            "x2 + x3",
                            "BinOp"
                        ],
                        [
                            "F.relu(x2)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g3_pool(x2)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g3_b3_joint_varout_dimred(x2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x2, size=l1.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_231": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_ims1d2_outl3_dimred(l2)",
                            "Call"
                        ],
                        [
                            "self.adapt_stage3_b2_joint_varout_dimred(x2)",
                            "Call"
                        ],
                        [
                            "x2 + x3",
                            "BinOp"
                        ],
                        [
                            "F.relu(x2)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g3_pool(x2)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g3_b3_joint_varout_dimred(x2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x2, size=l1.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "l1.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_236": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_ims1d2_outl4_dimred(l1)",
                            "Call"
                        ],
                        [
                            "self.adapt_stage4_b2_joint_varout_dimred(x1)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.relu(x1)",
                            "Call"
                        ],
                        [
                            "self.mflow_conv_g4_pool(x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_178": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "light_weight_refinenet/src/datasets.py": {
        "torch": {
            "from_numpy_163": {
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([np.pad(image[:, :, c], pad, mode='constant', constant_values=self.img_val[c]) for c in range(3)], axis=2)",
                            "Call"
                        ],
                        [
                            "image[top:top + new_h, left:left + new_w]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(image, None, fx=scale, fy=scale, interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "cv2.flip(image, 1)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "image.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "read_image(img_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.pad(mask, pad, mode='constant', constant_values=self.msk_val)",
                            "Call"
                        ],
                        [
                            "mask[top:top + new_h, left:left + new_w]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(mask, None, fx=scale, fy=scale, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "cv2.flip(mask, 1)",
                            "Call"
                        ],
                        [
                            "np.array(Image.open(msk_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "light_weight_refinenet/src/infer.py": {
        "torch": {
            "DataParallel_11": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rf_lw152(num_classes=10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "img_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "prepare_img(img).transpose(2, 0, 1)[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_14": {
                "f": {
                    "value": "./ckpt/resnet152.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_16": {
                "f": {
                    "value": "./ckpt/resnet152.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "light_weight_refinenet/src/train.py": {
        "torch": {
            "DataLoader_195": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(data_file=train_list, data_dir=train_dir, transform_trn=composed_trn, transform_val=composed_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(data_file=val_list, data_dir=val_dir, transform_trn=None, transform_val=composed_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_216": {
                "variable": {
                    "value": "optim_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "mom_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_354": {
                "variable": {
                    "value": "segmenter",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "create_segmenter(args.enc, args.enc_pretrained, args.num_classes[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_219": {
                "variable": {
                    "value": "optim_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "mom_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd_dec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_230": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_274": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segmenter(input_var)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(output, size=target_var.size()[1:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "segmenter(input_var)",
                            "Call"
                        ],
                        [
                            "cv2.resize(output[0, :num_classes].data.cpu().numpy().transpose(1, 2, 0), target.size()[1:][::-1], interpolation=cv2.INTER_CUBIC).argmax(axis=2).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "target_var.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_348": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "optim_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_350": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "light_weight_refinenet/src/util.py": {
        "torch": {
            "save_67": {
                "obj": {
                    "value": "dict_to_save",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/checkpoint.pth.tar'.format(self.ckpt_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "light_weight_refinenet/utils/helpers.py": {
        "torch": {
            "load_22": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "light_weight_refinenet/utils/layer_factory.py": {
        "torch": {
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size, stride=stride, padding=int(kernel_size / 2.0), groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size, stride=stride, padding=int(kernel_size / 2.0), groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "int(kernel_size / 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "int(kernel_size / 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "logger.py": {
        "torch": {
            "save_84": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.critic_directory, 'critic-%06d.pth' % iteration)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lwrf_infer.py": {
        "torch": {
            "DataParallel_15": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "rf_lw50(num_classes=10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "img_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "prepare_img(self.image).transpose(2, 0, 1)[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./light_weight_refinenet/resnet50.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "load_26": {
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./light_weight_refinenet/resnet50.pth.tar'",
                            "str"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "load_324": {
                "f": {
                    "value": "critic_ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(args.critic_ckpt) if load_ckpt else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_357": {
                "f": {
                    "value": "critic_ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(args.critic_ckpt) if load_ckpt else None",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.pushnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('push-norm0', nn.BatchNorm2d(1024)), ('push-relu0', nn.ReLU(inplace=True)), ('push-conv0', nn.Conv2d(1024, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('push-norm1', nn.BatchNorm2d(128)), ('push-relu1', nn.ReLU(inplace=True)), ('push-conv1', nn.Conv2d(128, 32, kernel_size=1, stride=1, bias=False)), ('push-norm2', nn.BatchNorm2d(32)), ('push-relu2', nn.ReLU(inplace=True)), ('push-conv2', nn.Conv2d(32, 1, kernel_size=1, stride=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.graspnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('grasp-norm0', nn.BatchNorm2d(1024)), ('grasp-relu0', nn.ReLU(inplace=True)), ('grasp-conv0', nn.Conv2d(1024, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('grasp-norm1', nn.BatchNorm2d(128)), ('grasp-relu1', nn.ReLU(inplace=True)), ('grasp-conv1', nn.Conv2d(128, 32, kernel_size=1, stride=1, bias=False)), ('grasp-norm2', nn.BatchNorm2d(32)), ('grasp-relu2', nn.ReLU(inplace=True)), ('grasp-conv2', nn.Conv2d(32, 1, kernel_size=1, stride=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "affine_mat_before",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "affine_mat_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[np.cos(-rotate_theta), np.sin(-rotate_theta), 0], [-np.sin(-rotate_theta), np.cos(-rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_before).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "np.asarray([[np.cos(-rotate_theta), np.sin(-rotate_theta), 0], [-np.sin(-rotate_theta), np.cos(-rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_before).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_125": {
                "variable": {
                    "value": "affine_mat_before",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "affine_mat_after",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "affine_mat_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[np.cos(rotate_theta), np.sin(rotate_theta), 0], [-np.sin(rotate_theta), np.cos(rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_after).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "np.asarray([[np.cos(rotate_theta), np.sin(rotate_theta), 0], [-np.sin(rotate_theta), np.cos(rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_after).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_151": {
                "variable": {
                    "value": "affine_mat_after",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_127": {
                "variable": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_before, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "input_color_data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_129": {
                "variable": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_before, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "input_color_data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_133": {
                "variable": {
                    "value": "rotate_color",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_color_data, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_134": {
                "variable": {
                    "value": "rotate_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_depth_data, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_135": {
                "variable": {
                    "value": "rotate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_mask_data, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_137": {
                "variable": {
                    "value": "rotate_color",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_color_data, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_138": {
                "variable": {
                    "value": "rotate_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_depth_data, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_139": {
                "variable": {
                    "value": "rotate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_mask_data, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_153": {
                "variable": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_after, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "push_out.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_155": {
                "variable": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_after, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "push_out.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "affine_mat_before",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "affine_mat_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[np.cos(-rotate_theta), np.sin(-rotate_theta), 0], [-np.sin(-rotate_theta), np.cos(-rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_before).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "np.asarray([[np.cos(-rotate_theta), np.sin(-rotate_theta), 0], [-np.sin(-rotate_theta), np.cos(-rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_before).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_76": {
                "variable": {
                    "value": "affine_mat_before",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "affine_mat_after",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "affine_mat_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[np.cos(rotate_theta), np.sin(rotate_theta), 0], [-np.sin(rotate_theta), np.cos(rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_after).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "np.asarray([[np.cos(rotate_theta), np.sin(rotate_theta), 0], [-np.sin(rotate_theta), np.cos(rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_after).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_102": {
                "variable": {
                    "value": "affine_mat_after",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_78": {
                "variable": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_before, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "input_color_data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_80": {
                "variable": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_before, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "input_color_data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_84": {
                "variable": {
                    "value": "rotate_color",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_color_data).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_85": {
                "variable": {
                    "value": "rotate_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_depth_data).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_86": {
                "variable": {
                    "value": "rotate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_mask_data).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_88": {
                "variable": {
                    "value": "rotate_color",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_color_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_89": {
                "variable": {
                    "value": "rotate_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_depth_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_90": {
                "variable": {
                    "value": "rotate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(input_mask_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False).cuda(), input_color_data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_before, requires_grad=False), input_color_data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_104": {
                "variable": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_after, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "push_out.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_106": {
                "variable": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "Variable(affine_mat_after, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "grasp_out.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_158": {
                "input": {
                    "value": "F.grid_sample(push_out, flow_grid_after)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_159": {
                "input": {
                    "value": "F.grid_sample(grasp_out, flow_grid_after)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_158": {
                "input": {
                    "value": "push_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pushnet(self.interm_feat)",
                            "Call"
                        ],
                        [
                            "self.pushnet(interm_feat)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), grasp_out.data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_159": {
                "input": {
                    "value": "grasp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graspnet(self.interm_feat)",
                            "Call"
                        ],
                        [
                            "self.graspnet(interm_feat)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), grasp_out.data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_109": {
                "input": {
                    "value": "F.grid_sample(push_out, flow_grid_after)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_110": {
                "input": {
                    "value": "F.grid_sample(grasp_out, flow_grid_after)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_109": {
                "input": {
                    "value": "push_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pushnet(self.interm_feat)",
                            "Call"
                        ],
                        [
                            "self.pushnet(interm_feat)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), grasp_out.data.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_110": {
                "input": {
                    "value": "grasp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graspnet(self.interm_feat)",
                            "Call"
                        ],
                        [
                            "self.graspnet(interm_feat)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False).cuda(), push_out.data.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(Variable(affine_mat_after, requires_grad=False), grasp_out.data.size())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "networks.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.dense121.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "(self.color_extractor(color), self.depth_extractor(depth), self.mask_extractor(mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "policies.py": {
        "torch": {
            "BatchNorm1d_46": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(self.bn1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(self.bn2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_92": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "self.net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "data": {
                    "value": "batch.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "SmoothL1Loss_30": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "input_color_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_color_image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_142": {
                "variable": {
                    "value": "input_color_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "input_depth_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_depth_image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_143": {
                "variable": {
                    "value": "input_depth_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "input_mask_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_mask_image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_144": {
                "variable": {
                    "value": "input_mask_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_50": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_36": {
                "f": {
                    "value": "snapshot_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 320, 320))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_218": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 320, 320))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 320, 320))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_231": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 320, 320))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_241": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 320, 320))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_243": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 320, 320))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}