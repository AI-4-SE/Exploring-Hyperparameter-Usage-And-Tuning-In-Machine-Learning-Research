{
    "lib/data/build.py": {
        "torch": {
            "RandomSampler_15": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vg_hdf5(cfg, split=split, transforms=transforms, num_im=num_im)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_17": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vg_hdf5(cfg, split=split, transforms=transforms, num_im=num_im)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_47": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "make_data_sampler(dataset, True if split == 'train' else False, is_distributed)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "images_per_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.DATASET.TRAIN_BATCH_SIZE if split == 'train' else cfg.DATASET.TEST_BATCH_SIZE",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vg_hdf5(cfg, split=split, transforms=transforms, num_im=num_im)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "images_per_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.DATASET.TRAIN_BATCH_SIZE if split == 'train' else cfg.DATASET.TEST_BATCH_SIZE",
                            "IfExp"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, images_per_batch, drop_last=False)",
                            "Call"
                        ],
                        [
                            "samplers.GroupedBatchSampler(sampler, group_ids, images_per_batch, drop_uneven=False)",
                            "Call"
                        ],
                        [
                            "samplers.IterationBasedBatchSampler(batch_sampler, num_iters, start_iter)",
                            "Call"
                        ],
                        [
                            "make_batch_data_sampler(dataset, sampler, aspect_grouping, images_per_gpu, num_iters, start_iter)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchCollator(cfg.DATASET.SIZE_DIVISIBILITY)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/data/evaluation/coco/coco_eval.py": {
        "torch": {
            "cat_284": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_285": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "recalls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_239": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_243": {
                "variable": {
                    "value": "gt_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_289": {
                "variable": {
                    "value": "thresholds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "'\\n'",
                            "Constant"
                        ],
                        [
                            "results + (', '.join(metric_vals) + '\\n')",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_38": {
                "obj": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/data/evaluation/gqa_coco/gqa_coco_eval.py": {
        "torch": {
            "cat_199": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_200": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_205": {
                "variable": {
                    "value": "recalls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_154": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_158": {
                "variable": {
                    "value": "gt_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_204": {
                "variable": {
                    "value": "thresholds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "GQACOCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "'\\n'",
                            "Constant"
                        ],
                        [
                            "results + (', '.join(metric_vals) + '\\n')",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'gqa_coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_38": {
                "obj": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "GQACOCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_gqa_coco(dataset.coco, gqa_coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/data/evaluation/sg/evaluator.py": {
        "torch": {
            "from_numpy_282": {
                "ndarray": {
                    "value": "box_union",
                    "type": "Call",
                    "possible_values": [
                        [
                            "boxes.reshape((-1, 2, 4))",
                            "Call"
                        ],
                        [
                            "np.concatenate((box_union.min(1)[:, :2], box_union.max(1)[:, 2:]), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "ndarray": {
                    "value": "boxes[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_286": {
                "ndarray": {
                    "value": "boxes[:, 4:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/data/evaluation/sg/sg_eval.py": {
        "torch": {
            "from_numpy_199": {
                "ndarray": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gt_boxes",
                            "Name"
                        ],
                        [
                            "gt_boxes",
                            "Name"
                        ],
                        [
                            "box_preds",
                            "Name"
                        ],
                        [
                            "pred_boxes[keep, :]",
                            "Subscript"
                        ],
                        [
                            "pred_boxes[keep, :]",
                            "Subscript"
                        ],
                        [
                            "pred_boxes[keep, :]",
                            "Subscript"
                        ],
                        [
                            "pred_boxes[keep, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/data/samplers/distributed.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_51": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_52": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {}
    },
    "lib/data/transforms/transforms.py": {
        "torch": {}
    },
    "lib/data/vg_hdf5.py": {
        "torch": {
            "from_numpy_135": {
                "ndarray": {
                    "value": "obj_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ],
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "obj_relations",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ],
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "ndarray": {
                    "value": "obj_relation_triplets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ],
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "obj_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ],
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_170": {
                "ndarray": {
                    "value": "obj_relations",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ],
                        [
                            "np.zeros((obj_boxes.shape[0], obj_boxes.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "ndarray": {
                    "value": "obj_relation_triplets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ],
                        [
                            "self.relationships[index].copy()",
                            "Call"
                        ],
                        [
                            "[(k[0], k[1], np.random.choice(v)) for (k, v) in all_rel_sets.items()]",
                            "ListComp"
                        ],
                        [
                            "np.array(obj_relation_triplets)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_172": {
                "ndarray": {
                    "value": "obj_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ],
                        [
                            "self.gt_classes[index].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "ndarray": {
                    "value": "boxes_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_boxes[im_to_first_box[i]:im_to_last_box[i] + 1, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_219": {
                "variable": {
                    "value": "cpu_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_284": {
                "obj": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[predictions[i] for i in image_ids]",
                            "ListComp"
                        ],
                        [
                            "self._accumulate_predictions_from_multiple_gpus(results_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_286": {
                "obj": {
                    "value": "predictions_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._accumulate_predictions_from_multiple_gpus(results_pred_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions_pred.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "boxes.astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_memory_allocated_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/parser.py": {
        "torch": {
            "DistributedDataParallel_191": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_scores[rel_inds[:, 0]], obj_scores[rel_inds[:, 1]], pred_scores[:, 1:].max(1)[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "prod_88": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/data/datasets/coco.py": {
        "torch": {
            "as_tensor_76": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/data/datasets/concat_dataset.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/data/datasets/evaluation/coco/coco_eval.py": {
        "torch": {
            "cat_284": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_285": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "recalls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_239": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_243": {
                "variable": {
                    "value": "gt_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_289": {
                "variable": {
                    "value": "thresholds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "'\\n'",
                            "Constant"
                        ],
                        [
                            "results + (', '.join(metric_vals) + '\\n')",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_38": {
                "obj": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/data/datasets/voc.py": {
        "torch": {
            "tensor_120": {
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "gt_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "data": {
                    "value": "difficult_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/engine/bbox_aug.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.bbox for boxlist_t in boxlist_ts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.get_field('scores') for boxlist_t in boxlist_ts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/engine/inference.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "cpu_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_108": {
                "obj": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[predictions[i] for i in image_ids]",
                            "ListComp"
                        ],
                        [
                            "compute_on_dataset(model, data_loader, device, inference_timer)",
                            "Call"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(predictions)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/engine/trainer.py": {
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "all_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/__init__.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/layers/_utils.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/batch_norm.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/dcn/deform_conv_func.py": {
        "torch": {
            "zeros_like_211": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_214": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/dcn/deform_conv_module.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels // self.groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_172": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/dcn/deform_pool_func.py": {
        "torch": {
            "zeros_like_70": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/dcn/deform_pool_module.py": {
        "torch": {
            "Sequential_54": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/misc.py": {
        "torch": {
            "interpolate_80": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/roi_align.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/layers/roi_pool.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/layers/sigmoid_focal_loss.py": {
        "torch": {
            "arange_46": {
                "variable": {
                    "value": "class_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ],
                        [
                            "logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "class_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/layers/smooth_l1_loss.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "Name",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/backbone/backbone.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/backbone/fbnet.py": {
        "torch": {
            "Sequential_101": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "rpn_feature",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('blocks', blocks), ('last', last)])",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/backbone/fbnet_builder.py": {
        "torch": {
            "zeros_245": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(C, 1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((C, 1, kernel_size, kernel_size), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "stage_info[2]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_751": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stage_cfg",
                            "Name"
                        ],
                        [
                            "stage_cfgs",
                            "Name"
                        ],
                        [
                            "arch_def['stages']",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_387": {
                "variable": {
                    "value": "bn_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "gn_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bn_type[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "output_depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_407": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_407": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_514": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dw1', dw1), ('dw2', dw2)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_775": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/backbone/fpn.py": {
        "torch": {
            "Conv2d_88": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "inner_top_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p5 if self.use_P5 else c5",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_98": {
                "input": {
                    "value": "p6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.p6(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/backbone/resnet.py": {
        "torch": {
            "Sequential_236": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu__329": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__333": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__342": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__364": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_365": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/balanced_positive_negative_pair_sampler.py": {
        "torch": {
            "nonzero_39": {
                "variable": {
                    "value": "positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_40": {
                "variable": {
                    "value": "negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_51": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/balanced_positive_negative_sampler.py": {
        "torch": {
            "nonzero_38": {
                "variable": {
                    "value": "positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/box_coder.py": {
        "torch": {
            "stack_49": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_codes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "dw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/detector/generalized_rcnn.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/modeling/make_layers.py": {
        "torch": {
            "Linear_89": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GroupNorm_36": {
                "num_groups": {
                    "value": "get_group_gn(out_channels, dim_per_gp, num_groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // divisor",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.GROUP_NORM.EPSILON",
                            "Attribute"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*module",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "fc",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "*module",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/matcher.py": {
        "torch": {
            "nonzero_94": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/pair_matcher.py": {
        "torch": {
            "nonzero_94": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/poolers.py": {
        "torch": {
            "sqrt_37": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxlist.area() for boxlist in boxlists])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "target_lvls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lvl0 + torch.log2(s / self.s0 + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target_lvls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lvls",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor(self.lvl0 + torch.log2(s / self.s0 + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_lvls, min=self.k_min, max=self.k_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.k_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.k_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "poolers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, num_channels, output_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "levels == level",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "torch.tensor(scales[0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "torch.tensor(scales[-1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_40": {
                "input": {
                    "value": "s / self.s0 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_83": {
                "size": {
                    "value": "(len(b), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "scales[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "scales[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/auxilary/multi_head_att.py": {
        "torch": {
            "softmax_13": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(scores)",
                            "Call"
                        ],
                        [
                            "attention(q, k, v, self.d_k, mask, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_18": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(scores)",
                            "Call"
                        ],
                        [
                            "attention(q, k, v, self.d_k, mask, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v_linear(v).view(bs, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "v.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.q_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.v_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.k_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_8": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q_linear(q).view(bs, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/baseline/baseline.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('logits') for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/grcnn/agcn/agcn.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "fc_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_24": {
                "variable": {
                    "value": "collect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "fc_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(self.fc(source))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.collect_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.update_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/grcnn/grcnn.py": {
        "torch": {
            "AdaptiveAvgPool2d_25": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.obj_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.rel_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "rel_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_inds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('features').detach() for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "obj_class_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('logits').detach() for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('logits') for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_58": {
                "n": {
                    "value": "len(proposal)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/imp/imp.py": {
        "torch": {
            "AdaptiveAvgPool2d_21": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.obj_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.pred_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "rel_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_inds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "x_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('features') for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_37": {
                "variable": {
                    "value": "self.edge_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_38": {
                "variable": {
                    "value": "self.node_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.subj_node_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim * 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.obj_node_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim * 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.subj_edge_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim * 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.obj_edge_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim * 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('logits') for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "self.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "self.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "self.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "self.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[sub_vert, hx_edge[t]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "[obj_vert, hx_edge[t]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "[sub_vert, hx_edge[t]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "[obj_vert, hx_edge[t]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_92": {
                "input": {
                    "value": "subj_pred_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_inds.new(sum([len(proposal) for proposal in proposals]), rel_inds.shape[0]).fill_(0).float().detach()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "message_pred_to_subj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.subj_node_gate(torch.cat([sub_vert, hx_edge[t]], 1)) * hx_edge[t]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_93": {
                "input": {
                    "value": "obj_pred_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_inds.new(sum([len(proposal) for proposal in proposals]), rel_inds.shape[0]).fill_(0).float().detach()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "message_pred_to_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.obj_node_gate(torch.cat([obj_vert, hx_edge[t]], 1)) * hx_edge[t]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/inference.py": {
        "torch": {
            "kthvalue_132": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_136": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "input": {
                    "value": "class_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_122": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/loss.py": {
        "torch": {
            "stack_69": {
                "variable": {
                    "value": "match_pair_quality_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "target_box_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_box_pairs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(target_box_pairs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "proposal_box_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_subj.view(-1, 4), box_obj.view(-1, 4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_80": {
                "variable": {
                    "value": "idx_subj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_subj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "idx_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_obj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "proposal_idx_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_subj.view(-1, 1), idx_obj.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_274": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "ce_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.new(class_logits.size(1)).fill_(1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_285": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_165": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "proposal_box_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_subj.view(-1, 4), box_obj.view(-1, 4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_189": {
                "variable": {
                    "value": "idx_subj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_subj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_190": {
                "variable": {
                    "value": "idx_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_obj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "proposal_idx_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_subj.view(-1, 1), idx_obj.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "box_pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxi, boxj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_59": {
                "n": {
                    "value": "match_ij.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/msdn/msdn.py": {
        "torch": {
            "AdaptiveAvgPool2d_21": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.obj_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.rel_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "rel_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_inds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "x_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('features').detach() for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_78": {
                "variable": {
                    "value": "feat_sub2pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_obj[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_sub",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_inds[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_79": {
                "variable": {
                    "value": "feat_obj2pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_obj[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_inds[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('logits') for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/msdn/msdn_base.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fea_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filter_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fea_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filter_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unary_term, pair_term]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w(F.relu(unary_term)) * self.w(F.relu(pair_term))",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(gate.sum(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([unary_term, pair_term], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(gate)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.w(gate)).mean(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w(gate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.wih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fea_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fea_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.whh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fea_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fea_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "pair_term * gate.expand(gate.size()[0], pair_term.size()[1])",
                            "BinOp"
                        ],
                        [
                            "pair_term * gate.view(-1, 1).expand(gate.size()[0], pair_term.size()[1])",
                            "BinOp"
                        ],
                        [
                            "self.wih(F.relu(input)) + self.whh(F.relu(hidden))",
                            "BinOp"
                        ],
                        [
                            "F.dropout(output, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_105": {
                "variable": {
                    "value": "source_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "source_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(transfer_list[:, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_106": {
                "variable": {
                    "value": "target_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "target_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(transfer_list[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_119": {
                "tensors": {
                    "value": "feature_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_25": {
                "input": {
                    "value": "pair_term",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pair_term.expand(unary_term.size()[0], pair_term.size()[1])",
                            "Call"
                        ],
                        [
                            "pair_term.expand(unary_term.size()[0], pair_term.size()[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_64": {
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_113": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transferred_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gate_module(target_f, source_f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(feature_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_113": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "target_features.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "target_features.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/relation_heads.py": {
        "torch": {
            "AdaptiveAvgPool2d_55": {
                "variable": {
                    "value": "self.box_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "self.freq_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.freq_dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "proposal_box_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_subj.view(-1, 4), box_obj.view(-1, 4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "idx_subj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_subj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "idx_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_obj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "proposal_idx_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_subj.view(-1, 1), idx_obj.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_171": {
                "tensors": {
                    "value": "(obj_labels[rel_inds[:, 0]], obj_labels[rel_inds[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_181": {
                "tensors": {
                    "value": "(obj_class_labels[rel_inds[:, 0]], obj_class_labels[rel_inds[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/reldn/reldn.py": {
        "torch": {
            "AdaptiveAvgPool2d_25": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.obj_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.pred_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pred_feature_extractor.out_channels, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.rel_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3 * self.dim, self.dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.rel_spt_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_RELATION_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "self.freq_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('freq_prior.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "rel_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_inds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "x_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('features').detach() for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_vert, obj_vert, x_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "rel_sem_class_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_sem_class_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_sem_class_logits, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposal.get_field('logits') for proposal in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "self.pred_feature_extractor.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "3 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/reldn/spatial.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "spt_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "spt_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(spt_feats, 0).float()",
                            "Call"
                        ],
                        [
                            "self.model(spt_feats)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "spt_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spt_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.hstack((delta_1, delta_2[:, :2]))",
                            "Call"
                        ],
                        [
                            "self._get_spt_features(boxes_subj.cpu().numpy(), boxes_obj.cpu().numpy(), proposal_pair.size[0], proposal_pair.size[1])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spt_feat).to(boxes_subj.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "28",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_10": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_11": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/reldn/visual.py": {
        "torch": {
            "Sequential_6": {
                "variable": {
                    "value": "self.subj_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/relpn/relationshipness.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.subj_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.obj_prof",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_43": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_subj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.subj_proj(x)",
                            "Call"
                        ],
                        [
                            "self.subj_proj(x)",
                            "Call"
                        ],
                        [
                            "self.self_att_subj(x_subj, x_subj, x_subj).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x_obj.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "relness",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x_subj, x_obj.t())",
                            "Call"
                        ],
                        [
                            "scores + pos_scores",
                            "BinOp"
                        ],
                        [
                            "torch.mm(x_subj, x_obj.t())",
                            "Call"
                        ],
                        [
                            "scores + pos_scores",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.subj_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.obj_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_101": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_subj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.subj_proj(x)",
                            "Call"
                        ],
                        [
                            "self.subj_proj(x)",
                            "Call"
                        ],
                        [
                            "self.self_att_subj(x_subj, x_subj, x_subj).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x_obj.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "relness",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x_subj, x_obj.t())",
                            "Call"
                        ],
                        [
                            "scores + pos_scores",
                            "BinOp"
                        ],
                        [
                            "torch.mm(x_subj, x_obj.t())",
                            "Call"
                        ],
                        [
                            "scores + pos_scores",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.sub_pos_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(6, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.obj_pos_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(6, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_48": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_subj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sub_pos_encoder(pos)",
                            "Call"
                        ],
                        [
                            "self.sub_pos_encoder(pos)",
                            "Call"
                        ],
                        [
                            "self.self_att_pos_subj(pos_subj, pos_subj, pos_subj).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pos_obj.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.sub_pos_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(6, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.obj_pos_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(6, 64)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_110": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_subj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sub_pos_encoder(pos)",
                            "Call"
                        ],
                        [
                            "self.sub_pos_encoder(pos)",
                            "Call"
                        ],
                        [
                            "self.self_att_pos_subj(pos_subj, pos_subj, pos_subj).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pos_obj.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/relpn/relpn.py": {
        "torch": {
            "stack_55": {
                "variable": {
                    "value": "match_pair_quality_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "target_box_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_box_pairs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(target_box_pairs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "proposal_box_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_subj.view(-1, 4), box_obj.view(-1, 4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_66": {
                "variable": {
                    "value": "idx_subj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_subj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_67": {
                "variable": {
                    "value": "idx_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_obj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "proposal_idx_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_subj.view(-1, 1), idx_obj.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_335": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "ce_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.new(class_logits.size(1)).fill_(1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_156": {
                "variable": {
                    "value": "(relness_sorted, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relness.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "proposal_box_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_subj.view(-1, 4), box_obj.view(-1, 4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_222": {
                "variable": {
                    "value": "idx_subj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_subj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_223": {
                "variable": {
                    "value": "idx_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_obj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "proposal_idx_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_subj.view(-1, 1), idx_obj.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_260": {
                "variable": {
                    "value": "(relness_sorted, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relness.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "box_pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxi, boxj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_190": {
                "input": {
                    "value": "relness.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "(labels[img_idx] > 0).view(-1, 1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_254": {
                "n": {
                    "value": "obj_logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/relpn/utils.py": {
        "torch": {
            "stack_16": {
                "tensors": {
                    "value": "(dim0, dim1, dim2, dim3, dim4, dim5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/roi_relation_box_feature_extractors.py": {
        "torch": {
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*xconvs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/roi_relation_box_predictors.py": {
        "torch": {
            "AdaptiveAvgPool2d_15": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/roi_relation_feature_extractors.py": {
        "torch": {
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_159": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "*xconvs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_RELATION_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_RELATION_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_RELATION_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/roi_relation_predictors.py": {
        "torch": {
            "AdaptiveAvgPool2d_16": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_RELATION_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_RELATION_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_RELATION_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_RELATION_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/relation_heads/sparse_targets.py": {
        "torch": {
            "Tensor_71": {
                "variable": {
                    "value": "im_inds_batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_84": {
                "variable": {
                    "value": "num_obj_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "im_ind * torch.ones(num_proposals_im, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((im_inds, im_ind * torch.ones(num_proposals_im, 1)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_86": {
                "variable": {
                    "value": "num_obj_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_obj_im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.unique(im_inds)",
                            "Call"
                        ],
                        [
                            "torch.cumsum(num_obj_im, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unique_92": {
                "variable": {
                    "value": "num_rels_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_inds_pairs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "rel_ind_offset_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_ind_offset_im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_obj_im[im_inds_pairs - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(rel_ind_offset_im)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_18": {
                "variable": {
                    "value": "self.obj_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "pred_dist.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "pred_dist.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(rel_ind_sub[:, None], rel_ind_obj[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "bbox_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bbox_batch, prop_per_im.bbox)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "output_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_batch, prop_per_im.extra_fields[field])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "im_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds, im_ind * torch.ones(num_proposals_im, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "num_proposals_im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prop_per_im.bbox.size(0)",
                            "Call"
                        ],
                        [
                            "prop_per_im.bbox.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "num_proposals_im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prop_per_im.bbox.size(0)",
                            "Call"
                        ],
                        [
                            "prop_per_im.bbox.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/roi_heads/box_head/box_head.py": {
        "torch": {
            "AdaptiveAvgPool2d_19": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/roi_heads/box_head/inference.py": {
        "torch": {
            "softmax_62": {
                "variable": {
                    "value": "class_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "class_logit.split(boxes_per_image, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_254": {
                "variable": {
                    "value": "(vs, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores_pre[inds_all]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kthvalue_184": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_188": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_188": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_174": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ],
                        [
                            "valid_cls.view(-1).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_218": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "scores.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_229": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ],
                        [
                            "valid_cls.view(-1).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/roi_heads/box_head/loss.py": {
        "torch": {
            "cross_entropy_171": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_176": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_111": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img.view(-1) | neg_inds_img.view(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "map_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/roi_heads/box_head/roi_box_feature_extractors.py": {
        "torch": {
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*xconvs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/roi_heads/box_head/roi_box_predictors.py": {
        "torch": {
            "AdaptiveAvgPool2d_15": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/roi_heads/roi_heads.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/modeling/rpn/anchor_generator.py": {
        "torch": {
            "from_numpy_243": {
                "ndarray": {
                    "value": "anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "boxlist.bbox",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_80": {
                "variable": {
                    "value": "shifts_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "shifts_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_86": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "inds_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/rpn/inference.py": {
        "torch": {
            "cat_101": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "objectness",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_167": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "inds_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "topk_177": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/rpn/loss.py": {
        "torch": {
            "nonzero_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "regression_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_127": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/rpn/retinanet/inference.py": {
        "torch": {
            "kthvalue_166": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.fpn_post_nms_top_n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_171": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_171": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_154": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/rpn/retinanet/loss.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels.int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "regression_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/rpn/retinanet/retinanet.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "*cls_tower",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*bbox_tower",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/rpn/rpn.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.conv(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/modeling/rpn/utils.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/modeling/utils.py": {
        "torch": {
            "cat_16": {
                "tensors": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/solver/build.py": {
        "torch": {
            "SGD_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.SOLVER.BASE_LR",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.BASE_LR * cfg.SOLVER.BIAS_LR_FACTOR",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/solver/lr_scheduler.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/structures/bounding_box.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "scaled_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "cropped_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/structures/bounding_box_pair.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "bbox_pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox_pair",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(bbox_pair, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox_pair.device if isinstance(bbox_pair, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "scaled_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "cropped_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_267": {
                "tensors": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/structures/boxlist_ops.py": {
        "torch": {
            "max_80": {
                "variable": {
                    "value": "lt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_81": {
                "variable": {
                    "value": "rb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/structures/image_list.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/structures/keypoint.py": {
        "torch": {
            "as_tensor_13": {
                "variable": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "type(self)(resized_data, size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(flipped_data, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints.to(*args, **kwargs), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints[item], self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keypoints.device if isinstance(keypoints, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "data": {
                    "value": "flip_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[names.index(i) for i in flipped_names]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/structures/segmentation_mask.py": {
        "torch": {
            "from_numpy_332": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks",
                            "Name"
                        ],
                        [
                            "cv2.UMat(mask)",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(rle)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_437": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.convert_to_binarymask() for p in self.polygons]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_442": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_223": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "polygons",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(p, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "polygons",
                            "Name"
                        ],
                        [
                            "PolygonInstance(p, size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_59": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_61": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_67": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/utils/c2_model_loading.py": {
        "torch": {
            "from_numpy_124": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/utils/checkpoint.py": {
        "torch": {
            "save_51": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'checkpoint_{:07d}.pth'.format(resume))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'checkpoint_{:07d}.pth'.format(resume))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_107": {
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_last_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "self.get_checkpoint_file(resume)",
                            "Call"
                        ],
                        [
                            "catalog_f",
                            "Name"
                        ],
                        [
                            "cached_f",
                            "Name"
                        ],
                        [
                            "catalog_f",
                            "Name"
                        ],
                        [
                            "cached_f",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_107": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/utils/collect_env.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/utils/comm.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/utils/imports.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/utils/metric_logger.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/scene_parser/rcnn/utils/model_serialization.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "match_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/scene_parser/rcnn/utils/model_zoo.py": {
        "torch": {}
    },
    "lib/scene_parser/rcnn/utils/visualize.py": {
        "torch": {
            "nonzero_17": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_17": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/box.py": {
        "torch": {
            "min_22": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_26": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/pytorch_misc.py": {
        "torch": {
            "gather_58": {
                "variable": {
                    "value": "gt_ranks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ranking.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "labels.data[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "gt_ranks",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_106": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "new_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_tensor.size(0) if n is None else n",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "new_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_tensor.new(new_size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_122": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "vec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "arange_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vec.new(vec.size(0)).long()",
                            "Call"
                        ],
                        [
                            "tensor.new(size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "rez",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_311": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "arange_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vec.new(vec.size(0)).long()",
                            "Call"
                        ],
                        [
                            "tensor.new(size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_339": {
                "tensors": {
                    "value": "[x[:, None] for x in unraveled[::-1]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "set_device_58": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}