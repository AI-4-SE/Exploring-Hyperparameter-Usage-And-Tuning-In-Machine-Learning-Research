{
    "lanenet_model/lanenet_postprocess.py": {
        "sklearn": {
            "DBSCAN_167": {
                "variable": {
                    "value": "db",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "CFG.POSTPROCESS.DBSCAN_EPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "CFG.POSTPROCESS.DBSCAN_MIN_SAMPLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StandardScaler_169": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data_provider/lanenet_data_feed_pipline.py": {
        "tensorflow": {
            "TFRecordDataset_337": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecords_file_paths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "glob.glob('{:s}/{:s}*.tfrecords'.format(self._tfrecords_dir, self._dataset_flags))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_333": {
                "name": {
                    "value": "input_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data_provider/tf_io_pipline_tools.py": {
        "tensorflow": {
            "parse_single_example_114": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "{'gt_image_raw': tf.FixedLenFeature([], tf.string), 'gt_binary_image_raw': tf.FixedLenFeature([], tf.string), 'gt_instance_image_raw': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "gt_image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[RESIZE_IMAGE_HEIGHT, RESIZE_IMAGE_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_raw_125": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['gt_image_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_image, gt_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32)), tf.constant(1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(gt_image, 0.8, 1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(gt_image, 0.05)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(gt_image, 0.7, 1.3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gt_image, 0.0, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "gt_image_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([RESIZE_IMAGE_HEIGHT, RESIZE_IMAGE_WIDTH, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_129": {
                "variable": {
                    "value": "gt_binary_image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[RESIZE_IMAGE_HEIGHT, RESIZE_IMAGE_WIDTH, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_raw_130": {
                "variable": {
                    "value": "gt_binary_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['gt_binary_image_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "gt_binary_image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_binary_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_binary_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_binary_image, gt_binary_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_binary_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_binary_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "gt_binary_image_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([RESIZE_IMAGE_HEIGHT, RESIZE_IMAGE_WIDTH, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_134": {
                "variable": {
                    "value": "gt_instance_image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[RESIZE_IMAGE_HEIGHT, RESIZE_IMAGE_WIDTH, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_raw_135": {
                "variable": {
                    "value": "gt_instance_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['gt_instance_image_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "gt_instance_image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_instance_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_instance_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_instance_image, gt_instance_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_instance_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_instance_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "gt_instance_image_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([RESIZE_IMAGE_HEIGHT, RESIZE_IMAGE_WIDTH, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_149": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_image, gt_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32)), tf.constant(1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(gt_image, 0.8, 1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(gt_image, 0.05)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(gt_image, 0.7, 1.3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gt_image, 0.0, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_170": {
                "variable": {
                    "value": "gt_binary_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_binary_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_binary_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_binary_image, gt_binary_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_binary_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_binary_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "gt_instance_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_instance_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_instance_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_instance_image, gt_instance_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_instance_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_instance_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_231": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "concat_images",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[gt_image, gt_binary_image, gt_instance_image]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_crop_248": {
                "variable": {
                    "value": "concat_cropped_images",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "concat_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_image, gt_binary_image, gt_instance_image], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([gt_image, gt_binary_image, gt_instance_image], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[cropped_size[1], cropped_size[0], tf.shape(concat_images)[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "tf.random.set_random_seed(1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_254": {
                "variable": {
                    "value": "cropped_gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_cropped_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.random_crop(concat_images, [cropped_size[1], cropped_size[0], tf.shape(concat_images)[-1]], seed=tf.random.set_random_seed(1234))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[cropped_size[1], cropped_size[0], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_259": {
                "variable": {
                    "value": "cropped_gt_binary_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_cropped_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.random_crop(concat_images, [cropped_size[1], cropped_size[0], tf.shape(concat_images)[-1]], seed=tf.random.set_random_seed(1234))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[cropped_size[1], cropped_size[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_264": {
                "variable": {
                    "value": "cropped_gt_instance_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_cropped_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.random_crop(concat_images, [cropped_size[1], cropped_size[0], tf.shape(concat_images)[-1]], seed=tf.random.set_random_seed(1234))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[cropped_size[1], cropped_size[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_281": {
                "variable": {
                    "value": "concat_images",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[gt_image, gt_binary_image, gt_instance_image]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_flip_left_right_285": {
                "variable": {
                    "value": "concat_flipped_images",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "concat_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_image, gt_binary_image, gt_instance_image], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([gt_image, gt_binary_image, gt_instance_image], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "tf.random.set_random_seed(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_290": {
                "variable": {
                    "value": "flipped_gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_flipped_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image=concat_images, seed=tf.random.set_random_seed(1))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_height, image_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_295": {
                "variable": {
                    "value": "flipped_gt_binary_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_flipped_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image=concat_images, seed=tf.random.set_random_seed(1))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_height, image_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_300": {
                "variable": {
                    "value": "flipped_gt_instance_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_flipped_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image=concat_images, seed=tf.random.set_random_seed(1))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_height, image_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_saturation_318": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_image, gt_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32)), tf.constant(1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(gt_image, 0.8, 1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(gt_image, 0.05)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(gt_image, 0.7, 1.3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gt_image, 0.0, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_320": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_image, gt_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32)), tf.constant(1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(gt_image, 0.8, 1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(gt_image, 0.05)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(gt_image, 0.7, 1.3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gt_image, 0.0, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_322": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_image, gt_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32)), tf.constant(1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(gt_image, 0.8, 1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(gt_image, 0.05)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(gt_image, 0.7, 1.3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gt_image, 0.0, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.7",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_324": {
                "variable": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_image, gt_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32)), tf.constant(1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(gt_image, 0.8, 1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(gt_image, 0.05)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(gt_image, 0.7, 1.3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gt_image, 0.0, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_43": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_157": {
                "input_": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "begin": {
                    "value": "[crop_top, crop_left, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[crop_height, crop_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordWriter_60": {
                "path": {
                    "value": "tfrecords_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Example_94": {
                "variable": {
                    "value": "_example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'gt_image_raw': bytes_feature(_gt_image_raw), 'gt_binary_image_raw': bytes_feature(_gt_binary_image_raw), 'gt_instance_image_raw': bytes_feature(_gt_instance_image_raw)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_231": {
                "x": {
                    "value": "gt_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['gt_image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_image, gt_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(gt_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "central_crop(image=gt_image, crop_height=CROP_IMAGE_HEIGHT, crop_width=CROP_IMAGE_WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.divide(gt_image, tf.constant(127.5, dtype=tf.float32)), tf.constant(1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(gt_image, 0.8, 1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(gt_image, 0.05)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(gt_image, 0.7, 1.3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gt_image, 0.0, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(127.5, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_232": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_34": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_43": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_231": {
                "value": {
                    "value": "127.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_251": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_287": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_118": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_119": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_120": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_250": {
                "input": {
                    "value": "concat_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_image, gt_binary_image, gt_instance_image], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([gt_image, gt_binary_image, gt_instance_image], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_95": {
                "feature": {
                    "value": "{'gt_image_raw': bytes_feature(_gt_image_raw), 'gt_binary_image_raw': bytes_feature(_gt_binary_image_raw), 'gt_instance_image_raw': bytes_feature(_gt_instance_image_raw)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "lanenet_model/lanenet.py": {
        "tensorflow": {
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lanenet_model/lanenet_back_end.py": {
        "tensorflow": {
            "reduce_sum_54": {
                "variable": {
                    "value": "loss_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(onehot_labels, classes_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_56": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "weights": {
                    "value": "loss_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(onehot_labels, classes_weights), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_41": {
                "variable": {
                    "value": "phase",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self._phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_43": {
                "x": {
                    "value": "phase",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._phase",
                            "Attribute"
                        ],
                        [
                            "tf.constant(self._phase, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant('train', dtype=tf.string)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_129": {
                "variable": {
                    "value": "l2_reg_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_54": {
                "x": {
                    "value": "onehot_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "classes_weights",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "one_hot_80": {
                "variable": {
                    "value": "binary_label_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.cast(binary_label, tf.int32), shape=[binary_label.get_shape().as_list()[0], binary_label.get_shape().as_list()[1], binary_label.get_shape().as_list()[2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "CFG.TRAIN.CLASSES_NUMS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "binary_label_plain",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "binary_label",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[binary_label.get_shape().as_list()[0] * binary_label.get_shape().as_list()[1] * binary_label.get_shape().as_list()[2] * binary_label.get_shape().as_list()[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_with_counts_96": {
                "variable": {
                    "value": "(unique_labels, unique_id, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "binary_label_plain",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(binary_label, shape=[binary_label.get_shape().as_list()[0] * binary_label.get_shape().as_list()[1] * binary_label.get_shape().as_list()[2] * binary_label.get_shape().as_list()[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_97": {
                "variable": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(counts, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_98": {
                "variable": {
                    "value": "inverse_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(tf.add(tf.divide(counts, tf.reduce_sum(counts)), tf.constant(1.02)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "binary_seg_score",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "binary_seg_logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "argmax_161": {
                "variable": {
                    "value": "binary_seg_prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_seg_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits=binary_seg_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "binary_seg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "instance_seg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_134": {
                "variable": {
                    "value": "l2_reg_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "l2_reg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(0.0, tf.float32)",
                            "Call"
                        ],
                        [
                            "l2_reg_loss * 0.001",
                            "BinOp"
                        ],
                        [
                            "tf.add(l2_reg_loss, tf.nn.l2_loss(vv))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.nn.l2_loss(vv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "binary_seg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "instance_seg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "tf.cast(binary_label, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[binary_label.get_shape().as_list()[0], binary_label.get_shape().as_list()[1], binary_label.get_shape().as_list()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_100": {
                "x": {
                    "value": "tf.add(tf.divide(counts, tf.reduce_sum(counts)), tf.constant(1.02))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "binary_label",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_100": {
                "x": {
                    "value": "tf.divide(counts, tf.reduce_sum(counts))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_134": {
                "t": {
                    "value": "vv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_100": {
                "x": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(counts, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(counts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "1.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(counts, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lanenet_model/lanenet_discriminative_loss.py": {
        "tensorflow": {
            "reshape_36": {
                "variable": {
                    "value": "correct_label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "correct_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(correct_label, [label_shape[1] * label_shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[label_shape[1] * label_shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "reshaped_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[label_shape[1] * label_shape[0], feature_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_with_counts_44": {
                "variable": {
                    "value": "(unique_labels, unique_id, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(correct_label, [label_shape[1] * label_shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_45": {
                "variable": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(counts, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_46": {
                "variable": {
                    "value": "num_instances",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_49": {
                "variable": {
                    "value": "segmented_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "reshaped_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prediction, [label_shape[1] * label_shape[0], feature_dim])",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "unique_id",
                    "type": "Name",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "num_instances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.size(unique_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_51": {
                "variable": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "segmented_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(reshaped_pred, unique_id, num_instances)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(counts, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_52": {
                "variable": {
                    "value": "mu_expand",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(segmented_sum, tf.reshape(counts, (-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "unique_id",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "norm_54": {
                "variable": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.subtract(mu_expand, reshaped_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_55": {
                "variable": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.subtract(mu_expand, reshaped_pred), axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distance, delta_v)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(distance, 0.0, distance)",
                            "Call"
                        ],
                        [
                            "tf.square(distance)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "delta_v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clip_by_value_56": {
                "variable": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.subtract(mu_expand, reshaped_pred), axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distance, delta_v)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(distance, 0.0, distance)",
                            "Call"
                        ],
                        [
                            "tf.square(distance)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.subtract(mu_expand, reshaped_pred), axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distance, delta_v)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(distance, 0.0, distance)",
                            "Call"
                        ],
                        [
                            "tf.square(distance)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_57": {
                "variable": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.subtract(mu_expand, reshaped_pred), axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distance, delta_v)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(distance, 0.0, distance)",
                            "Call"
                        ],
                        [
                            "tf.square(distance)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsorted_segment_sum_59": {
                "variable": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.subtract(mu_expand, reshaped_pred), axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distance, delta_v)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(distance, 0.0, distance)",
                            "Call"
                        ],
                        [
                            "tf.square(distance)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "unique_id",
                    "type": "Name",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "num_instances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.size(unique_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_60": {
                "variable": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(distance, unique_id, num_instances)",
                            "Call"
                        ],
                        [
                            "tf.div(l_var, counts)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(l_var)",
                            "Call"
                        ],
                        [
                            "tf.divide(l_var, tf.cast(num_instances, tf.float32))",
                            "Call"
                        ],
                        [
                            "param_var * l_var",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(out_var_op)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(counts, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(distance, unique_id, num_instances)",
                            "Call"
                        ],
                        [
                            "tf.div(l_var, counts)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(l_var)",
                            "Call"
                        ],
                        [
                            "tf.divide(l_var, tf.cast(num_instances, tf.float32))",
                            "Call"
                        ],
                        [
                            "param_var * l_var",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(out_var_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_62": {
                "variable": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(distance, unique_id, num_instances)",
                            "Call"
                        ],
                        [
                            "tf.div(l_var, counts)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(l_var)",
                            "Call"
                        ],
                        [
                            "tf.divide(l_var, tf.cast(num_instances, tf.float32))",
                            "Call"
                        ],
                        [
                            "param_var * l_var",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(out_var_op)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(num_instances, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "mu_interleaved_rep",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(segmented_sum, tf.reshape(counts, (-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_instances, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "mu_band_rep",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(segmented_sum, tf.reshape(counts, (-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_instances]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "mu_band_rep",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_band_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(mu, [1, num_instances])",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_band_rep, (num_instances * num_instances, feature_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_instances * num_instances, feature_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "subtract_72": {
                "variable": {
                    "value": "mu_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mu_band_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(mu, [1, num_instances])",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_band_rep, (num_instances * num_instances, feature_dim))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mu_interleaved_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(mu, [num_instances, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "intermediate_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(mu_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "zero_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_76": {
                "variable": {
                    "value": "bool_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "intermediate_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(mu_diff), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_77": {
                "variable": {
                    "value": "mu_diff_bool",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.subtract(mu_band_rep, mu_interleaved_rep)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "bool_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.not_equal(intermediate_tensor, zero_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_79": {
                "variable": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_diff_bool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(mu_diff, bool_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_80": {
                "variable": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * delta_d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(mu_diff_bool, axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(2.0 * delta_d, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mu_norm, 0.0, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.square(mu_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_81": {
                "variable": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(mu_diff_bool, axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(2.0 * delta_d, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mu_norm, 0.0, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.square(mu_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(mu_diff_bool, axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(2.0 * delta_d, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mu_norm, 0.0, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.square(mu_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_82": {
                "variable": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(mu_diff_bool, axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(2.0 * delta_d, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mu_norm, 0.0, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.square(mu_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "l_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mu_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(mu_diff_bool, axis=1, ord=1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(2.0 * delta_d, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mu_norm, 0.0, mu_norm)",
                            "Call"
                        ],
                        [
                            "tf.square(mu_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "l_reg",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.norm(mu, axis=1, ord=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_120": {
                "variable": {
                    "value": "output_ta_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_122": {
                "variable": {
                    "value": "output_ta_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_124": {
                "variable": {
                    "value": "output_ta_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_126": {
                "variable": {
                    "value": "output_ta_reg",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_129": {
                "variable": {
                    "value": "(_, _, out_loss_op, out_var_op, out_dist_op, out_reg_op, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "Name",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[correct_label, prediction, output_ta_loss, output_ta_var, output_ta_dist, output_ta_reg, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "disc_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out_loss_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_loss_op.stack()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "l_var",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out_var_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_var_op.stack()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "l_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out_dist_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_dist_op.stack()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_140": {
                "variable": {
                    "value": "l_reg",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out_reg_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_reg_op.stack()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(counts, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "subtract_54": {
                "x": {
                    "value": "mu_expand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(mu, unique_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reshaped_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prediction, [label_shape[1] * label_shape[0], feature_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_62": {
                "x": {
                    "value": "num_instances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.size(unique_labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_74": {
                "x": {
                    "value": "mu_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.subtract(mu_band_rep, mu_interleaved_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_86": {
                "tensor": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(segmented_sum, tf.reshape(counts, (-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_106": {
                "x": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(batch)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_106": {
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "mnn_project/freeze_lanenet_model.py": {
        "tensorflow": {
            "Saver_57": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_59": {
                "variable": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_64": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 256, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "binary_seg_ret",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "binary_seg_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(binary_seg_ret, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(binary_seg_ret, axis=0, name='final_binary_output')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "binary_seg_ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_seg_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(binary_seg_ret, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(binary_seg_ret, axis=0, name='final_binary_output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "final_binary_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "instance_seg_ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "instance_seg_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(instance_seg_ret, axis=0, name='final_pixel_embedding_output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "final_pixel_embedding_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_69": {
                "variable": {
                    "value": "converted_graph_def",
                    "type": "Name",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=sess_config)",
                            "Call"
                        ]
                    ]
                },
                "input_graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "['lanenet/input_tensor', 'lanenet/final_binary_output', 'lanenet/final_pixel_embedding_output']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "lanenet",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "lanenet/",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_79": {
                "name": {
                    "value": "pb_file_path",
                    "type": "Name",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_segmentation_zoo/cnn_basenet.py": {
        "tensorflow": {
            "moments_201": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_251": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2] if data_format == 'NHWC' else [2, 3]",
                            "IfExp"
                        ],
                        [
                            "[1, 2]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_256": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[c]), dtype=tf.float32, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_258": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(1.0, shape=[c]), dtype=tf.float32, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "dense_300": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "lambda x: tf.identity(x, name='output')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[kernel_size[0], kernel_size[1]] + [in_channel / split, out_channel]",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size] + [in_channel / split, out_channel]",
                            "BinOp"
                        ],
                        [
                            "[k_size[0], k_size[1]] + [in_channel, out_dims]",
                            "BinOp"
                        ],
                        [
                            "[k_size, k_size] + [in_channel, out_dims]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_85": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.bias_add(conv, b, data_format=data_format) if use_bias else conv",
                    "type": "IfExp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_98": {
                "features": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_108": {
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_142": {
                "value": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, kernel_size[0], kernel_size[1], 1] if data_format == 'NHWC' else [1, 1, kernel_size[0], kernel_size[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_166": {
                "value": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, kernel_size[0], kernel_size[1], 1] if data_format == 'NHWC' else [1, 1, kernel_size[0], kernel_size[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_183": {
                "input_tensor": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2] if data_format == 'NHWC' else [2, 3]",
                            "IfExp"
                        ],
                        [
                            "[1, 2]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_213": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channnel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[c]), dtype=tf.float32, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_218": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channnel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(1.0, shape=[c]), dtype=tf.float32, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_221": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_223": {
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[c]), dtype=tf.float32, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(1.0, shape=[c]), dtype=tf.float32, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_260": {
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[c]), dtype=tf.float32, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(1.0, shape=[c]), dtype=tf.float32, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_272": {
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(value=[input_shape[0], 1, 1, input_shape[3]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(np.prod(shape))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "variable": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([tf.shape(inputdata)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_298": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_normalization_316": {
                "inputs": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_329": {
                "variable": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "variable": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, group_size, c // group_size, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_333": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_337": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[c])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_338": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[c])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(1.0, shape=[c]), dtype=tf.float32, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, c, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[c]), dtype=tf.float32, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, c, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, c, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_343": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_345": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "output * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, f1, f2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_358": {
                "input": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2] if data_format == 'NHWC' else [2, 3]",
                            "IfExp"
                        ],
                        [
                            "[1, 2]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_394": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Name"
                        ],
                        [
                            "kernel_size",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_437": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[kernel_size[0], kernel_size[1]] + [in_channel / split, out_channel]",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size] + [in_channel / split, out_channel]",
                            "BinOp"
                        ],
                        [
                            "[k_size[0], k_size[1]] + [in_channel, out_dims]",
                            "BinOp"
                        ],
                        [
                            "[k_size, k_size] + [in_channel, out_dims]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "atrous_conv2d_443": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "dilation_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_467": {
                "variable": {
                    "value": "noise_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[input_shape[0], 1, 1, input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_475": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_68": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_77": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_79": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "channel_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ],
                        [
                            "3 if data_format == 'channels_last' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "split_80": {
                "variable": {
                    "value": "kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.conv2d(i, k, strides, padding, data_format=data_format) for (i, k) in zip(inputs, kernels)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "channel_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ],
                        [
                            "3 if data_format == 'channels_last' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "divide_254": {
                "x": {
                    "value": "inputdata - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(var + epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_392": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_435": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_441": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_447": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputdata, w, strides, padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, channel_axis)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(value=input_tensor, filters=w, rate=rate, padding=padding, name='dilation_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_variable('b', [out_dims], initializer=b_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_468": {
                "x": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(value=[input_shape[0], 1, 1, input_shape[3]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "spatial_dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_488": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_254": {
                "x": {
                    "value": "var + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_258": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_293": {
                "values": {
                    "value": "[tf.shape(inputdata)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "x": {
                    "value": "var + esp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_337": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_338": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_489": {
                "features": {
                    "value": "-inputdata",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_85": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputdata, w, strides, padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, channel_axis)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(value=input_tensor, filters=w, rate=rate, padding=padding, name='dilation_conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_variable('b', [out_dims], initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_218": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_300": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_293": {
                "input": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputdata, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, [-1, group_size, c // group_size, h, w])",
                            "Call"
                        ],
                        [
                            "(inputdata - mean) / tf.sqrt(var + esp)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "semantic_segmentation_zoo/vgg16_based_fcn.py": {
        "tensorflow": {
            "placeholder_368": {
                "variable": {
                    "value": "test_in_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 256, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "phase",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self._phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_44": {
                "x": {
                    "value": "phase",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._phase",
                            "Attribute"
                        ],
                        [
                            "tf.constant(self._phase, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant('train', dtype=tf.string)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "variable": {
                    "value": "deconv_weights_stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(tf.constant(2.0, tf.float32), tf.multiply(tf.cast(previous_kernel_size * previous_kernel_size, tf.float32), tf.cast(tf.shape(input_tensor)[3], tf.float32)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_98": {
                "variable": {
                    "value": "deconv_weights_init",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "deconv_weights_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.divide(tf.constant(2.0, tf.float32), tf.multiply(tf.cast(previous_kernel_size * previous_kernel_size, tf.float32), tf.cast(tf.shape(input_tensor)[3], tf.float32))))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_111": {
                "variable": {
                    "value": "fuse_feats",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "previous_feats_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "deconv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.deconv2d(inputdata=input_tensor, out_channel=out_channels_nums, kernel_size=kernel_size, stride=stride, use_bias=use_bias, w_init=deconv_weights_init, name='deconv')",
                            "Call"
                        ],
                        [
                            "self.layerbn(inputdata=deconv, is_training=self._is_training, name='deconv_bn')",
                            "Call"
                        ],
                        [
                            "self.relu(inputdata=deconv, name='deconv_relu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "fuse_feats",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_44": {
                "value": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sqrt_299": {
                "variable": {
                    "value": "binary_final_logits_conv_weights_stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(tf.constant(2.0, tf.float32), tf.multiply(4.0 * 4.0, tf.cast(tf.shape(decode_stage_1_fuse)[3], tf.float32)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_304": {
                "variable": {
                    "value": "binary_final_logits_conv_weights_init",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "binary_final_logits_conv_weights_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.divide(tf.constant(2.0, tf.float32), tf.multiply(4.0 * 4.0, tf.cast(tf.shape(decode_stage_1_fuse)[3], tf.float32))))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "divide_94": {
                "x": {
                    "value": "tf.constant(2.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(tf.cast(previous_kernel_size * previous_kernel_size, tf.float32), tf.cast(tf.shape(input_tensor)[3], tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "binary_seg_decode",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "instance_seg_decode",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_94": {
                "value": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_95": {
                "x": {
                    "value": "tf.cast(previous_kernel_size * previous_kernel_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.shape(input_tensor)[3], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_300": {
                "x": {
                    "value": "tf.constant(2.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(4.0 * 4.0, tf.cast(tf.shape(decode_stage_1_fuse)[3], tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "previous_kernel_size * previous_kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "tf.shape(input_tensor)[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_300": {
                "value": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_301": {
                "x": {
                    "value": "4.0 * 4.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.shape(decode_stage_1_fuse)[3], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_302": {
                "x": {
                    "value": "tf.shape(decode_stage_1_fuse)[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_302": {
                "input": {
                    "value": "decode_stage_1_fuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._decode_block(input_tensor=decode_stage_2_fuse, previous_feats_tensor=self._net_intermediate_results['encode_stage_1_share']['data'], name='decode_stage_1_fuse', out_channels_nums=64)",
                            "Call"
                        ],
                        [
                            "self._decode_block(input_tensor=decode_stage_2_fuse, previous_feats_tensor=self._net_intermediate_results['encode_stage_1_share']['data'], name='decode_stage_1_fuse', out_channels_nums=64, need_activate=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/evaluate_lanenet_on_tusimple.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 256, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_62": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_65": {
                "variable": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_70": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/evaluate_model_utils.py": {
        "tensorflow": {
            "softmax_22": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "variable": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_25": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(final_output, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_26": {
                "variable": {
                    "value": "pix_cls_ret",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(label_tensor, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_27": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pix_cls_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_tensor, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_28": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.count_nonzero(pix_cls_ret)",
                            "Call"
                        ],
                        [
                            "tf.divide(accuracy, tf.cast(tf.shape(tf.gather_nd(label_tensor, tf.where(tf.equal(label_tensor, 1))))[0], tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.shape(tf.gather_nd(label_tensor, tf.where(tf.equal(label_tensor, 1))))[0], tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_43": {
                "variable": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_45": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(final_output, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_46": {
                "variable": {
                    "value": "pix_cls_ret",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(label_tensor, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "variable": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_64": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(label_tensor, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_65": {
                "variable": {
                    "value": "pix_cls_ret",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(label_tensor, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_66": {
                "variable": {
                    "value": "label_cls_ret",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.where(tf.equal(label_tensor, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_51": {
                "x": {
                    "value": "false_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(pix_cls_ret)[0], tf.int64) - tf.count_nonzero(tf.gather_nd(label_tensor, idx))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.shape(pix_cls_ret)[0], tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_69": {
                "x": {
                    "value": "mis_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(label_cls_ret)[0], tf.int64) - tf.count_nonzero(pix_cls_ret)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.shape(label_cls_ret)[0], tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(img, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_23": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_25": {
                "x": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "tf.shape(tf.gather_nd(label_tensor, tf.where(tf.equal(label_tensor, 1))))[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_45": {
                "x": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.argmax(logits, axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "tf.shape(pix_cls_ret)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_47": {
                "input": {
                    "value": "tf.gather_nd(label_tensor, idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_51": {
                "x": {
                    "value": "tf.shape(pix_cls_ret)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_62": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits=input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_64": {
                "x": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_66": {
                "condition": {
                    "value": "tf.equal(label_tensor, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "tf.shape(label_cls_ret)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_67": {
                "input": {
                    "value": "pix_cls_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_tensor, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_69": {
                "x": {
                    "value": "tf.shape(label_cls_ret)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_81": {
                "input_tensor": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(img, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_82": {
                "input_tensor": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(img, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_82": {
                "input_tensor": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(img, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_48": {
                "params": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(final_output, 1))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(label_tensor, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_66": {
                "x": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "tf.gather_nd(label_tensor, tf.where(tf.equal(label_tensor, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "pix_cls_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_tensor, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_51": {
                "input": {
                    "value": "pix_cls_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_tensor, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(final_output, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_67": {
                "input": {
                    "value": "label_cls_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_tensor, tf.where(tf.equal(label_tensor, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_69": {
                "input": {
                    "value": "label_cls_ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_tensor, tf.where(tf.equal(label_tensor, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_30": {
                "params": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.where(tf.equal(label_tensor, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_30": {
                "condition": {
                    "value": "tf.equal(label_tensor, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_30": {
                "x": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_lanenet.py": {
        "tensorflow": {
            "placeholder_86": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 256, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_96": {
                "variable": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_101": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/train_lanenet.py": {
        "tensorflow": {
            "Saver_385": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_392": {
                "variable": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_397": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': CFG.TRAIN.GPU_NUM}, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_399": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tboard_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'tboard/tusimple_lanenet_{:s}'.format(net_flag)",
                            "Call"
                        ],
                        [
                            "'tboard/tusimple_lanenet_multi_gpu_{:s}'.format(net_flag)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_534": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "polynomial_decay_535": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "CFG.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "CFG.TRAIN.EPOCHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_543": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.polynomial_decay(learning_rate=CFG.TRAIN.LEARNING_RATE, global_step=global_step, decay_steps=CFG.TRAIN.EPOCHS, power=0.9)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate=CFG.TRAIN.LEARNING_RATE, global_step=global_step, decay_steps=CFG.TRAIN.EPOCHS, power=0.9)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "CFG.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_569": {
                "variable": {
                    "value": "avg_train_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_tower_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_570": {
                "variable": {
                    "value": "avg_val_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "val_tower_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_573": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "CFG.TRAIN.MOVING_AVERAGE_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_579": {
                "variable": {
                    "value": "batchnorm_updates_op",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*batchnorm_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_581": {
                "variable": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "apply_gradient_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(grads, global_step=global_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "variables_averages_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variable_averages.apply(variables_to_average)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_588": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tboard_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'tboard/tusimple_lanenet_{:s}'.format(net_flag)",
                            "Call"
                        ],
                        [
                            "'tboard/tusimple_lanenet_multi_gpu_{:s}'.format(net_flag)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_590": {
                "variable": {
                    "value": "avg_train_loss_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "average_train_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "avg_train_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(train_tower_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_593": {
                "variable": {
                    "value": "avg_val_loss_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "average_val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "avg_val_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(val_tower_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_596": {
                "variable": {
                    "value": "learning_rate_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_scalar",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.polynomial_decay(learning_rate=CFG.TRAIN.LEARNING_RATE, global_step=global_step, decay_steps=CFG.TRAIN.EPOCHS, power=0.9)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate=CFG.TRAIN.LEARNING_RATE, global_step=global_step, decay_steps=CFG.TRAIN.EPOCHS, power=0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_600": {
                "variable": {
                    "value": "train_merge_summary_op",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[avg_train_loss_scalar, learning_rate_scalar] + train_summary_op_updates",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "merge_603": {
                "variable": {
                    "value": "val_merge_summary_op",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[avg_val_loss_scalar]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_606": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_614": {
                "variable": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': CFG.TRAIN.GPU_NUM}",
                    "type": "Dict",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_625": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': CFG.TRAIN.GPU_NUM}, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_174": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "optimizer.compute_gradients(total_loss)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "average_gradients(tower_grads)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_175": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(grads, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_248": {
                "variable": {
                    "value": "train_prediction_score",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "train_prediction_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_compute_ret['binary_seg_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_249": {
                "variable": {
                    "value": "train_prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "train_prediction_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits=train_prediction_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_267": {
                "variable": {
                    "value": "train_cost_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_cost",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_total_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_compute_ret['total_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_270": {
                "variable": {
                    "value": "train_accuracy_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_accuracy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.calculate_model_precision(train_compute_ret['binary_seg_logits'], train_binary_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_273": {
                "variable": {
                    "value": "train_binary_seg_loss_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_binary_seg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_binary_seg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_compute_ret['binary_seg_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_276": {
                "variable": {
                    "value": "train_instance_seg_loss_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_instance_seg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_disc_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_compute_ret['discriminative_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_279": {
                "variable": {
                    "value": "train_fn_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_fn",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.calculate_model_fn(train_compute_ret['binary_seg_logits'], train_binary_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_282": {
                "variable": {
                    "value": "train_fp_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_fp",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_fp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.calculate_model_fp(train_compute_ret['binary_seg_logits'], train_binary_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_285": {
                "variable": {
                    "value": "train_binary_seg_ret_img",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_binary_seg_ret",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_binary_seg_ret_for_summary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.get_image_summary(img=train_prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_288": {
                "variable": {
                    "value": "train_embedding_feats_ret_img",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train_embedding_feats_ret",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_embedding_ret_for_summary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.get_image_summary(img=train_pix_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_291": {
                "variable": {
                    "value": "train_merge_summary_op",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[train_accuracy_scalar, train_cost_scalar, train_binary_seg_loss_scalar, train_instance_seg_loss_scalar, train_fn_scalar, train_fp_scalar, train_binary_seg_ret_img, train_embedding_feats_ret_img]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_312": {
                "variable": {
                    "value": "val_prediction_score",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "val_prediction_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "val_compute_ret['binary_seg_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_313": {
                "variable": {
                    "value": "val_prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "val_prediction_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits=val_prediction_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_331": {
                "variable": {
                    "value": "val_cost_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_cost",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_total_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "val_compute_ret['total_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_334": {
                "variable": {
                    "value": "val_accuracy_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_accuracy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.calculate_model_precision(val_compute_ret['binary_seg_logits'], val_binary_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_337": {
                "variable": {
                    "value": "val_binary_seg_loss_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_binary_seg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_binary_seg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "val_compute_ret['binary_seg_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_340": {
                "variable": {
                    "value": "val_instance_seg_loss_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_instance_seg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_disc_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "val_compute_ret['discriminative_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_343": {
                "variable": {
                    "value": "val_fn_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_fn",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.calculate_model_fn(val_compute_ret['binary_seg_logits'], val_binary_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_346": {
                "variable": {
                    "value": "val_fp_scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_fp",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_fp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.calculate_model_fp(val_compute_ret['binary_seg_logits'], val_binary_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_349": {
                "variable": {
                    "value": "val_binary_seg_ret_img",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_binary_seg_ret",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_binary_seg_ret_for_summary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.get_image_summary(img=val_prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_352": {
                "variable": {
                    "value": "val_embedding_feats_ret_img",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "val_embedding_feats_ret",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_embedding_ret_for_summary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_model_utils.get_image_summary(img=val_pix_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_355": {
                "variable": {
                    "value": "val_merge_summary_op",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[val_accuracy_scalar, val_cost_scalar, val_binary_seg_loss_scalar, val_instance_seg_loss_scalar, val_fn_scalar, val_fp_scalar, val_binary_seg_ret_img, val_embedding_feats_ret_img]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_362": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "polynomial_decay_363": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "CFG.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "CFG.TRAIN.EPOCHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_370": {
                "variable": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_97": {
                "variable": {
                    "value": "_op",
                    "type": "Name",
                    "possible_values": []
                },
                "ref": {
                    "value": "vv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                },
                "value": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pretrained_weights[weights_key][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_168": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_228": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_372": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.polynomial_decay(learning_rate=CFG.TRAIN.LEARNING_RATE, global_step=global_step, decay_steps=CFG.TRAIN.EPOCHS, power=0.9)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate=CFG.TRAIN.LEARNING_RATE, global_step=global_step, decay_steps=CFG.TRAIN.EPOCHS, power=0.9)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "CFG.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_412": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_548": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_631": {
                "graph_or_graph_def": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'{:s}/lanenet_model.pb'.format(model_save_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_637": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_371": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_548": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_550": {
                "device_name": {
                    "value": "'/gpu:{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_551": {
                "name": {
                    "value": "'tower_{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_558": {
                "variable": {
                    "value": "batchnorm_updates",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_559": {
                "variable": {
                    "value": "train_summary_op_updates",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_563": {
                "name": {
                    "value": "'validation_{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}