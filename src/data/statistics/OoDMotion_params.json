{
    "visualise.py": {
        "sklearn": {
            "StandardScaler_13": {
                "variable": {
                    "value": "standardise",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "job",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "job",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "test_loaders[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "job",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "OoD_val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.OoD_val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "job",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "is_available_27": {
                "variable": {
                    "value": "is_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./checkpoint/pretrained/h36m_in10_out10_dctn20.pth.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_44": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./checkpoint/pretrained/h36m_in10_out10_dctn20.pth.tar'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_data[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "H36motion(path_to_data=opt.data_dir, actions=act, input_n=input_n, output_n=output_n, split=1, sample_rate=sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.job",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.view(-1, seq_len).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_86": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "is_available_34": {
                "variable": {
                    "value": "is_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_88": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, 48, n_z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "test_data[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "H36motion(path_to_data='h3.6m/dataset/', actions=act, input_n=10, output_n=10, split=1, sample_rate=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_88": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "interpretability.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "is_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/test/ckpt_main_cmu_mocap_in50_out25_dctn35_dropout_0.3_var_lambda_0.003_nz_8_lr_0.0005_n_layers_6_last.pth.tar'",
                            "Constant"
                        ],
                        [
                            "opt.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_64": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/test/ckpt_main_cmu_mocap_in50_out25_dctn35_dropout_0.3_var_lambda_0.003_nz_8_lr_0.0005_n_layers_6_last.pth.tar'",
                            "Constant"
                        ],
                        [
                            "opt.model_path",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "train_data[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "H36motion(path_to_data='h3.6m/', actions=[act], input_n=input_n, output_n=output_n, sample_rate=sample_rate, split=0, dct_n=dct_n)",
                            "Call"
                        ],
                        [
                            "CMU_Motion(path_to_data='cmu_mocap/', actions=[act], input_n=input_n, output_n=output_n, split=0, dct_n=dct_n)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "test_data[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "H36motion(path_to_data='h3.6m/', actions=[act], input_n=input_n, output_n=output_n, sample_rate=sample_rate, split=1, data_mean=data_mean, data_std=data_std, dct_n=dct_n)",
                            "Call"
                        ],
                        [
                            "CMU_Motion(path_to_data='cmu_mocap/', actions=[act], input_n=input_n, output_n=output_n, split=1, data_mean=data_mean, data_std=data_std, dim_used=dim_used, dct_n=dct_n)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "val_data[act]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "H36motion(path_to_data='h3.6m/', actions=[act], input_n=input_n, output_n=output_n, split=2, sample_rate=2, data_mean=data_mean, data_std=data_std, dct_n=dct_n)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "is_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "methods.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_methods.py": {
        "torch": {
            "clip_grad_norm__21": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clipping_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_37": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/test/ckpt_main_in10_out10_dctn20_var__last.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_39": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/test/ckpt_main_in10_out10_dctn20_var__last.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, :dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_203": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_241": {
                "variable": {
                    "value": "outputs_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, :dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_241": {
                "variable": {
                    "value": "outputs_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_235": {
                "input": {
                    "value": "torch.norm(pred_eul[:, j, :] - targ_eul[:, j, :], 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_236": {
                "input": {
                    "value": "torch.norm(targ_p3d[:, j, :, :].contiguous().view(-1, 3) - pred_p3d[:, j, :, :].contiguous().view(-1, 3), 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_261": {
                "input": {
                    "value": "torch.norm(targ_p3d[:, j, :, :].contiguous().view(-1, 3) - pred_p3d[:, j, :, :].contiguous().view(-1, 3), 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_264": {
                "input": {
                    "value": "torch.norm(targ_p3d[:, j, :, :].contiguous().view(-1, 3) - pred_p3d[:, j, :, :].contiguous().view(-1, 3), 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_235": {
                "input": {
                    "value": "pred_eul[:, j, :] - targ_eul[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_236": {
                "input": {
                    "value": "targ_p3d[:, j, :, :].contiguous().view(-1, 3) - pred_p3d[:, j, :, :].contiguous().view(-1, 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_261": {
                "input": {
                    "value": "targ_p3d[:, j, :, :].contiguous().view(-1, 3) - pred_p3d[:, j, :, :].contiguous().view(-1, 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_264": {
                "input": {
                    "value": "targ_p3d[:, j, :, :].contiguous().view(-1, 3) - pred_p3d[:, j, :, :].contiguous().view(-1, 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pose_generator.py": {
        "torch": {
            "is_available_27": {
                "variable": {
                    "value": "is_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_129": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'lr': lr, 'err': model.accum_loss['val_loss'].avg, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'ckpt_' + str(epoch) + '_weights.path.tar'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/GCN_Architecture.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_node_n, node_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "support",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_96": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * in_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_99": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * in_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_102": {
                "variable": {
                    "value": "self.act_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_142": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.gcbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.gcbs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_171": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_172": {
                "variable": {
                    "value": "self.act_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_174": {
                "variable": {
                    "value": "self.normalised_act_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_159": {
                "variable": {
                    "value": "self.decoder_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.decoder_gcbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.decoder_gcbs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_194": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_z_sigma(y_gen)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gamma, min=-20.0, max=3.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normal_195": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "gamma.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_212": {
                "variable": {
                    "value": "reconstructions_log_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gc_decoder_sigma(z)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_195": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_196": {
                "input": {
                    "value": "torch.exp(gamma / 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.normal(mean=0, std=1.0, size=gamma.shape).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_214": {
                "input": {
                    "value": "torch.exp(gamma) + torch.pow(mu, 2) - 1 - gamma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_196": {
                "input": {
                    "value": "gamma / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_214": {
                "input": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_z_sigma(y_gen)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gamma, min=-20.0, max=3.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_214": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_z_mu(y_gen)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/cmu_motion.py": {
        "torch": {}
    },
    "utils/cmu_motion_3d.py": {
        "torch": {}
    },
    "utils/data_utils.py": {
        "torch": {
            "zeros_like_548": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotdiff[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_552": {
                "variable": {
                    "value": "r_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(2, 3) * 10",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(r)).cuda().float()",
                            "Call"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(rotdiff[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_554": {
                "variable": {
                    "value": "r0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(2, 3) * 10",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(r)).cuda().float()",
                            "Call"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(rotdiff[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r_norm.unsqueeze(1).repeat(1, 3) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_559": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sintheta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "np.linalg.norm(r) / 2",
                            "BinOp"
                        ],
                        [
                            "r_norm / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "costheta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(np.trace(R) - 1) / 2",
                            "BinOp"
                        ],
                        [
                            "(t1 + t2 + t3 - 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_561": {
                "variable": {
                    "value": "q[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "theta / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_562": {
                "variable": {
                    "value": "q[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "r0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.divide(r, np.linalg.norm(r) + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "np.divide(r, theta + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "np.divide(q[1:], np.linalg.norm(q[1:]) + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "-r0",
                            "UnaryOp"
                        ],
                        [
                            "torch.div(r, r_norm.unsqueeze(1).repeat(1, 3) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.div(r, theta.unsqueeze(1).repeat(1, 3) + 1e-07)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sin(theta / 2).unsqueeze(1).repeat(1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_574": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_574": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_575": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "theta.repeat(1, 3) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_576": {
                "variable": {
                    "value": "sinhalf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_577": {
                "variable": {
                    "value": "coshalf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_578": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(exp, theta.repeat(1, 3) + 1e-07)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sinhalf.repeat(1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_579": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coshalf, q1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_590": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(2, 3) * 10",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(r)).cuda().float()",
                            "Call"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(rotdiff[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_591": {
                "variable": {
                    "value": "r0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(2, 3) * 10",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(r)).cuda().float()",
                            "Call"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(rotdiff[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "theta.unsqueeze(1).repeat(1, 3) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_592": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.divide(r, np.linalg.norm(r) + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "np.divide(r, theta + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "np.divide(q[1:], np.linalg.norm(q[1:]) + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "-r0",
                            "UnaryOp"
                        ],
                        [
                            "torch.div(r, r_norm.unsqueeze(1).repeat(1, 3) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.div(r, theta.unsqueeze(1).repeat(1, 3) + 1e-07)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_512": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_spec1[:, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "R_spec1[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_521": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_spec2[:, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "R_spec2[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_531": {
                "variable": {
                    "value": "eul_remain[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "R_remain[:, 1, 2] / torch.cos(eul_remain[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "R_remain[:, 2, 2] / torch.cos(eul_remain[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_533": {
                "variable": {
                    "value": "eul_remain[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "R_remain[:, 0, 1] / torch.cos(eul_remain[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "R_remain[:, 0, 0] / torch.cos(eul_remain[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_562": {
                "input": {
                    "value": "theta / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_562": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_600": {
                "input": {
                    "value": "1 - torch.cos(theta).unsqueeze(1).repeat(1, 9).view(-1, 3, 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(r1, r1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "asin_530": {
                "input": {
                    "value": "R_remain[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_599": {
                "input": {
                    "value": "torch.sin(theta).unsqueeze(1).repeat(1, 9).view(-1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "r1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "r[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(r0).repeat(1, 3)",
                            "Call"
                        ],
                        [
                            "r1.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "r1 - r1.transpose(1, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_601": {
                "input": {
                    "value": "r1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "r[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(r0).repeat(1, 3)",
                            "Call"
                        ],
                        [
                            "r1.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "r1 - r1.transpose(1, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "r[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(r0).repeat(1, 3)",
                            "Call"
                        ],
                        [
                            "r1.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "r1 - r1.transpose(1, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_504": {
                "*size": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "R.data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "r1.data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_531": {
                "input": {
                    "value": "eul_remain[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_532": {
                "input": {
                    "value": "eul_remain[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_533": {
                "input": {
                    "value": "eul_remain[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_534": {
                "input": {
                    "value": "eul_remain[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_600": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.arctan2(sintheta, costheta)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(r)",
                            "Call"
                        ],
                        [
                            "2 * np.arctan2(sinhalftheta, coshalftheta)",
                            "BinOp"
                        ],
                        [
                            "np.mod(theta + 2 * np.pi, 2 * np.pi)",
                            "Call"
                        ],
                        [
                            "2 * np.pi - theta",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(sintheta, costheta)",
                            "Call"
                        ],
                        [
                            "torch.norm(exp, p=2, dim=1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.norm(r, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_600": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_601": {
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.arctan2(sintheta, costheta)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(r)",
                            "Call"
                        ],
                        [
                            "2 * np.arctan2(sinhalftheta, coshalftheta)",
                            "BinOp"
                        ],
                        [
                            "np.mod(theta + 2 * np.pi, 2 * np.pi)",
                            "Call"
                        ],
                        [
                            "2 * np.pi - theta",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(sintheta, costheta)",
                            "Call"
                        ],
                        [
                            "torch.norm(exp, p=2, dim=1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.norm(r, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_601": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "*size": {
                    "value": "len(idx_spec1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_518": {
                "*size": {
                    "value": "len(idx_spec2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_529": {
                "*size": {
                    "value": "len(idx_remain)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_560": {
                "*size": {
                    "value": "R.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_868": {
                "ndarray": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(2, 3) * 10",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(r)).cuda().float()",
                            "Call"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(rotdiff[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_440": {
                "ndarray": {
                    "value": "action_sequence",
                    "type": "Call",
                    "possible_values": [
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ],
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Name"
                        ],
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ],
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ],
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ],
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ],
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ],
                        [
                            "readCSVasFloat(filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_599": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_766": {
                "ndarray": {
                    "value": "the_sequence1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "p3d1.view(num_frames1, -1).cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_779": {
                "ndarray": {
                    "value": "the_sequence2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "p3d2.view(num_frames2, -1).cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_739": {
                "ndarray": {
                    "value": "the_sequence",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "np.array(action_sequence[even_list, :])",
                            "Call"
                        ],
                        [
                            "p3d.view(num_frames, -1).cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/forward_kinematics.py": {
        "torch": {
            "unsqueeze_234": {
                "variable": {
                    "value": "p3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "R[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "R[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "R[:, parent[i], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_239": {
                "variable": {
                    "value": "R[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_240": {
                "input": {
                    "value": "p3d[0, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "R[:, parent[i], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_281": {
                "ndarray": {
                    "value": "np.vstack((expmap_pred, expmap_gt))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_234": {
                "ndarray": {
                    "value": "offset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([0.0, 0.0, 0.0, -132.948591, 0.0, 0.0, 0.0, -442.894612, 0.0, 0.0, -454.206447, 0.0, 0.0, 0.0, 162.767078, 0.0, 0.0, 74.999437, 132.948826, 0.0, 0.0, 0.0, -442.894413, 0.0, 0.0, -454.20659, 0.0, 0.0, 0.0, 162.767426, 0.0, 0.0, 74.999948, 0.0, 0.1, 0.0, 0.0, 233.383263, 0.0, 0.0, 257.077681, 0.0, 0.0, 121.134938, 0.0, 0.0, 115.002227, 0.0, 0.0, 257.077681, 0.0, 0.0, 151.034226, 0.0, 0.0, 278.882773, 0.0, 0.0, 251.733451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 99.999627, 0.0, 100.000188, 0.0, 0.0, 0.0, 0.0, 0.0, 257.077681, 0.0, 0.0, 151.031437, 0.0, 0.0, 278.892924, 0.0, 0.0, 251.72868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 99.999888, 0.0, 137.499922, 0.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "offset.reshape(-1, 3)",
                            "Call"
                        ],
                        [
                            "70 * np.array([0, 0, 0, 0, 0, 0, 1.65674, -1.80282, 0.62477, 2.5972, -7.13576, 0, 2.49236, -6.8477, 0, 0.19704, -0.54136, 2.14581, 0, 0, 1.11249, 0, 0, 0, -1.6107, -1.80282, 0.62476, -2.59502, -7.12977, 0, -2.4678, -6.78024, 0, -0.23024, -0.63258, 2.13368, 0, 0, 1.11569, 0, 0, 0, 0.01961, 2.0545, -0.14112, 0.01021, 2.06436, -0.05921, 0, 0, 0, 0.00713, 1.56711, 0.14968, 0.03429, 1.56041, -0.10006, 0.01305, 1.6256, -0.05265, 0, 0, 0, 3.54205, 0.90436, -0.17364, 4.86513, 0, 0, 3.35554, 0, 0, 0, 0, 0, 0.66117, 0, 0, 0.53306, 0, 0, 0, 0, 0, 0.5412, 0, 0.5412, 0, 0, 0, -3.49802, 0.75994, -0.32616, -5.02649, 0, 0, -3.36431, 0, 0, 0, 0, 0, -0.73041, 0, 0, -0.58887, 0, 0, 0, 0, 0, -0.59786, 0, 0.59786])",
                            "BinOp"
                        ],
                        [
                            "offset.reshape(-1, 3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/h36motion.py": {
        "torch": {}
    },
    "utils/h36motion3d.py": {
        "torch": {}
    },
    "utils/loss_funcs.py": {
        "torch": {
            "matmul_68": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, :dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "mean_errors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(pred_eul - targ_eul, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, :dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "mean_3d_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(targ_p3d - pred_p3d, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, :dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_136": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_149": {
                "variable": {
                    "value": "mean_3d_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(targ_p3d - pred_p3d, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "variable": {
                    "value": "outputs_p3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, 0:dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_170": {
                "variable": {
                    "value": "outputs_p3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_176": {
                "variable": {
                    "value": "mean_3d_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(pred_3d - targ_3d, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, 0:dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_187": {
                "variable": {
                    "value": "outputs_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "mean_3d_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(pred_3d - targ_3d, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_29": {
                "variable": {
                    "value": "pred_cart",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, :dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "pred_cart",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_32": {
                "variable": {
                    "value": "joint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(targ_cart - pred_cart, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "pred_expmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idct_m[:, :dct_n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs.view(-1, dct_n).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "pred_expmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_36": {
                "variable": {
                    "value": "joint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pred_expmap - targ_expmap)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "neg_gauss_log_lik",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "latent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "latent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_44": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstructions - inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_87": {
                "input": {
                    "value": "pred_eul - targ_eul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_124": {
                "input": {
                    "value": "targ_p3d - pred_p3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_149": {
                "input": {
                    "value": "targ_p3d - pred_p3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_176": {
                "input": {
                    "value": "pred_3d - targ_3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_195": {
                "input": {
                    "value": "pred_3d - targ_3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_32": {
                "input": {
                    "value": "targ_cart - pred_cart",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "pred_expmap - targ_expmap",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "torch.sum(gauss_log_lik, axis=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "gauss_log_lik",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-mse",
                            "UnaryOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "idct_m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(idct_m)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/pose3dpw.py": {
        "torch": {}
    },
    "utils/pose3dpw3d.py": {
        "torch": {}
    },
    "utils/utils.py": {
        "torch": {
            "save_31": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_path, file_name[1])",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_path, file_name[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_34": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_path, file_name[1])",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_path, file_name[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/vgae.py": {
        "torch": {
            "Parameter_35": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_node_n, node_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "support",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_111": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * in_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * in_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_117": {
                "variable": {
                    "value": "self.act_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_158": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.gcbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.gcbs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_187": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_188": {
                "variable": {
                    "value": "self.act_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_219": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_z_sigma(y)",
                            "Call"
                        ],
                        [
                            "self.gc_sigma(y)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gamma, min=-5.0, max=5.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normal_220": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "gamma.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_230": {
                "variable": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL_per_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * torch.sum(torch.exp(gamma) + torch.pow(mu, 2) - 1 - gamma, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_274": {
                "variable": {
                    "value": "self.decoder_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_279": {
                "variable": {
                    "value": "self.decoder_gcbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.decoder_gcbs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_284": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_285": {
                "variable": {
                    "value": "self.act_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_316": {
                "variable": {
                    "value": "reconstructions_log_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gc_decoder_sigma(y)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_344": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "node_n * hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_383": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mu - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_169": {
                "variable": {
                    "value": "self.bn_down_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_node_n * out_hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_175": {
                "variable": {
                    "value": "self.bn_down_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_node_n * out_hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_258": {
                "variable": {
                    "value": "self.bn_up_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_node_n * out_hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_264": {
                "variable": {
                    "value": "self.bn_up_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_node_n * out_hidden_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_220": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_221": {
                "input": {
                    "value": "torch.exp(gamma / 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.normal(mean=0, std=1.0, size=gamma.shape).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_225": {
                "input": {
                    "value": "torch.exp(gamma) + torch.pow(mu, 2) - 1 - gamma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_385": {
                "input": {
                    "value": "torch.sum(self.gauss_log_lik, axis=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_221": {
                "input": {
                    "value": "gamma / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_385": {
                "input": {
                    "value": "self.gauss_log_lik",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_225": {
                "input": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_z_sigma(y)",
                            "Call"
                        ],
                        [
                            "self.gc_sigma(y)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gamma, min=-5.0, max=5.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_225": {
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_z_mu(y)",
                            "Call"
                        ],
                        [
                            "self.gc_mu(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}