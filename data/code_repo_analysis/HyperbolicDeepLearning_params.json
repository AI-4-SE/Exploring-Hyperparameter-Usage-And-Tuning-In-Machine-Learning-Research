{
    "HVAE/Data.py": {
        "sklearn": {
            "train_test_split_12": {
                "variable": {
                    "value": "(X_train, X_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_split",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_13": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_18": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(data, test_size=test_split, random_state=42)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(X_train.values)",
                            "Call"
                        ],
                        [
                            "X_train.double()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_19": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(data, test_size=test_split, random_state=42)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(X_test.values)",
                            "Call"
                        ],
                        [
                            "X_test.double()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "workers",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "HVAE/Loss.py": {
        "torch": {
            "max_28": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lpz + lpx_z - lqz_x",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "(targets - inputs) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=0, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_31": {
                "input": {
                    "value": "value0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "HVAE/Modules.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.learned_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_39": {
                "variable": {
                    "value": "log_Sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(param)",
                            "Call"
                        ],
                        [
                            "self.output_layer(e)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.sigma_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_94": {
                "variable": {
                    "value": "log_Sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma_out(e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_142": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "HVAE/RiemannLayers.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "HVAE/Train.py": {
        "torch": {
            "LeakyReLU_90": {
                "variable": {
                    "value": "activ",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "(inputs - targets) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "HVAE/VAE.py": {
        "torch": {
            "Parameter_25": {
                "variable": {
                    "value": "self.latent_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.enc.z)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.latent_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learn_prior_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.enc.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_30": {
                "input": {
                    "value": "self.latent_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_30": {
                "input": {
                    "value": "math.log(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_30": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "input": {
                    "value": "decoder_dist_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dec(latent_samples)",
                            "Call"
                        ],
                        [
                            "self.dec(self.prior(*self.latent_param, self.c, self.enc.z).sample(torch.Size([N])))",
                            "Call"
                        ],
                        [
                            "self.dec(posterior.rsample(torch.Size([1])).squeeze(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_49": {
                "input": {
                    "value": "decoder_dist_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dec(latent_samples)",
                            "Call"
                        ],
                        [
                            "self.dec(self.prior(*self.latent_param, self.c, self.enc.z).sample(torch.Size([N])))",
                            "Call"
                        ],
                        [
                            "self.dec(posterior.rsample(torch.Size([1])).squeeze(0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HVAE/WrappedNormal.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "event_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "self.zeros",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "event_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_60": {
                "variable": {
                    "value": "N_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(self.Sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "N_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_63": {
                "variable": {
                    "value": "sqrtC",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sinh_65": {
                "input": {
                    "value": "sqrtC.mul(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_65": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.manifold.dist(self.mu, u, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "HVAE/main.py": {
        "torch": {
            "LeakyReLU_84": {
                "variable": {
                    "value": "activ",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_109": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}