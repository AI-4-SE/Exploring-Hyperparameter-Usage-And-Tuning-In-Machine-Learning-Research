{
    "Code/config/models/character_seq2seq.py": {
        "tensorflow": {}
    },
    "Code/config/models/multi_features_nmt.py": {
        "tensorflow": {}
    },
    "Code/config/models/multi_source_nmt.py": {
        "tensorflow": {}
    },
    "Code/config/models/nmt_medium_fp16.py": {
        "tensorflow": {}
    },
    "Code/config/models/template.py": {
        "tensorflow": {}
    },
    "Code/config/models/transformer_fp16.py": {
        "tensorflow": {}
    },
    "Code/examples/serving/nmt_client.py": {
        "tensorflow": {
            "make_ndarray_24": {
                "tensor": {
                    "value": "result.outputs['length']",
                    "possible_values": []
                }
            },
            "make_ndarray_25": {
                "tensor": {
                    "value": "result.outputs['tokens']",
                    "possible_values": []
                }
            },
            "make_tensor_proto_50": {
                "values": {
                    "value": "[tokens]",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, length)",
                    "possible_values": []
                }
            },
            "make_tensor_proto_52": {
                "values": {
                    "value": "[length]",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/bin/ark_to_records.py": {
        "tensorflow": {
            "TFRecordWriter_71": {
                "variable": {
                    "value": "record_writer",
                    "possible_values": []
                },
                "path": {
                    "value": "out_prefix + '.records'",
                    "possible_values": []
                }
            },
            "TFRecordWriter_137": {
                "variable": {
                    "value": "record_writer",
                    "possible_values": []
                },
                "path": {
                    "value": "out_prefix + '.records'",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/bin/average_checkpoints.py": {
        "tensorflow": {
            "set_verbosity_11": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/bin/main.py": {
        "tensorflow": {
            "ConfigProto_121": {
                "variable": {
                    "value": "session_config",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "args.intra_op_parallelism_threads",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "args.inter_op_parallelism_threads",
                    "possible_values": []
                }
            },
            "set_verbosity_93": {
                "level": {
                    "value": "getattr(tf.logging, args.log_level)",
                    "possible_values": []
                }
            },
            "info_117": {
                "msg": {
                    "value": "Creating model directory %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['model_dir']",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/config.py": {
        "tensorflow": {
            "latest_checkpoint_70": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "possible_values": []
                }
            },
            "warn_71": {
                "msg": {
                    "value": "You provided a model configuration but a checkpoint already exists. The model configuration must define the same model as the one used for the initial training. However, you can change non structural values like dropout.",
                    "possible_values": []
                }
            },
            "info_88": {
                "msg": {
                    "value": "Loading serialized model description from %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "serial_model_file",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_description.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/decoders/decoder.py": {
        "tensorflow": {
            "sequence_mask_22": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(logits)[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "possible_values": []
                }
            },
            "expand_dims_24": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(logits)[1], dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "reduce_max_28": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ],
                        [
                            "tf.add(log_probs, masked_probs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ],
                        [
                            "tf.add(log_probs, masked_probs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "units": {
                    "value": "vocab_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_268": {
                "variable": {
                    "value": "finished",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_270": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_ids",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "while_loop_302": {
                "variable": {
                    "value": "(_, _, outputs, lengths, log_probs, _)",
                    "possible_values": []
                },
                "cond": {
                    "value": "_condition",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(step, finished, inputs, lengths, log_probs, state)",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(tf.TensorShape([]), finished.get_shape(), tf.TensorShape([None, None]), lengths.get_shape(), log_probs.get_shape(), tf.contrib.framework.nest.map_structure(get_state_shape_invariants, state))",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_99": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "possible_values": [
                        [
                            "tf.constant(k, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "add_279": {
                "variable": {
                    "value": "inputs_lengths",
                    "possible_values": []
                },
                "x": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - tf.cast(finished, lengths.dtype)",
                    "possible_values": []
                }
            },
            "log_softmax_282": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "argmax_283": {
                "variable": {
                    "value": "sample_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_max_286": {
                "variable": {
                    "value": "sample_probs",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "add_288": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ],
                        [
                            "tf.add(log_probs, masked_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "masked_probs",
                    "possible_values": [
                        [
                            "tf.squeeze(sample_probs, -1) * (1.0 - tf.cast(finished, sample_probs.dtype))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_290": {
                "variable": {
                    "value": "next_inputs",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, tf.cast(sample_ids, inputs.dtype)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "logical_or_292": {
                "variable": {
                    "value": "next_finished",
                    "possible_values": []
                },
                "x": {
                    "value": "finished",
                    "possible_values": [
                        [
                            "tf.tile([False], [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.equal(tf.squeeze(sample_ids, axis=[1]), end_id)",
                    "possible_values": []
                }
            },
            "maximum_105": {
                "variable": {
                    "value": "read_probability",
                    "possible_values": []
                },
                "x": {
                    "value": "read_probability - k * step",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "shape_267": {
                "input": {
                    "value": "initial_ids",
                    "possible_values": []
                }
            },
            "logical_not_276": {
                "x": {
                    "value": "tf.reduce_all(finished)",
                    "possible_values": []
                }
            },
            "logical_or_298": {
                "variable": {
                    "value": "next_finished",
                    "possible_values": []
                },
                "x": {
                    "value": "next_finished",
                    "possible_values": [
                        [
                            "tf.logical_or(finished, tf.equal(tf.squeeze(sample_ids, axis=[1]), end_id))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(next_finished, step >= decode_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "step >= decode_length",
                    "possible_values": []
                }
            },
            "pow_107": {
                "variable": {
                    "value": "read_probability",
                    "possible_values": []
                },
                "x": {
                    "value": "k",
                    "possible_values": [
                        [
                            "tf.constant(k, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "step",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_all_276": {
                "input_tensor": {
                    "value": "finished",
                    "possible_values": [
                        [
                            "tf.tile([False], [batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_287": {
                "input": {
                    "value": "sample_probs",
                    "possible_values": [
                        [
                            "tf.reduce_max(probs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "equal_294": {
                "x": {
                    "value": "tf.squeeze(sample_ids, axis=[1])",
                    "possible_values": []
                },
                "y": {
                    "value": "end_id",
                    "possible_values": []
                }
            },
            "shape_23": {
                "input": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "finished",
                    "possible_values": [
                        [
                            "tf.tile([False], [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "lengths.dtype",
                    "possible_values": []
                }
            },
            "cast_287": {
                "x": {
                    "value": "finished",
                    "possible_values": [
                        [
                            "tf.tile([False], [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_probs.dtype",
                    "possible_values": []
                }
            },
            "cast_290": {
                "x": {
                    "value": "sample_ids",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "possible_values": []
                }
            },
            "squeeze_294": {
                "input": {
                    "value": "sample_ids",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "TensorShape_307": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_309": {
                "dims": {
                    "value": "[None, None]",
                    "possible_values": []
                }
            },
            "map_structure_312": {
                "func": {
                    "value": "get_state_shape_invariants",
                    "possible_values": []
                },
                "*structure": {
                    "value": "state",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_109": {
                "x": {
                    "value": "step / k",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/decoders/rnn_decoder.py": {
        "tensorflow": {
            "transpose_280": {
                "variable": {
                    "value": "alignment_history",
                    "possible_values": []
                },
                "a": {
                    "value": "alignment_history",
                    "possible_values": [
                        [
                            "cell_state.alignment_history",
                            "Attribute"
                        ],
                        [
                            "alignment_history.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(alignment_history, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "_get_alignment_history(state)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alignment_history, 1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "return_alignment_history",
                            "Name"
                        ],
                        [
                            "_get_alignment_history(state)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alignment_history, [batch_size, beam_width, -1, tf.shape(memory)[1]])",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "possible_values": []
                }
            },
            "expand_dims_187": {
                "variable": {
                    "value": "predicted_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_ids",
                    "possible_values": [
                        [
                            "outputs.sample_id",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(predicted_ids, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs.predicted_ids, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "variable": {
                    "value": "length",
                    "possible_values": []
                },
                "input": {
                    "value": "length",
                    "possible_values": [
                        [
                            "tf.expand_dims(length, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_189": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "logits_to_cum_log_probs(outputs.rnn_output, length)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ],
                        [
                            "beam_state.log_probs",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_260": {
                "variable": {
                    "value": "predicted_ids",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs.predicted_ids",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "DropoutWrapper_377": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "possible_values": [
                        [
                            "build_cell(self.num_layers, self.num_units, mode, dropout=self.dropout, residual_connections=self.residual_connections, cell_class=self.cell_class)",
                            "Call"
                        ],
                        [
                            "tf.contrib.seq2seq.AttentionWrapper(cell, attention_mechanism, attention_layer_size=self.num_units, alignment_history=alignment_history, output_attention=self.output_is_attention, initial_cell_state=initial_cell_state)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - self.dropout)",
                            "Call"
                        ],
                        [
                            "build_cell(self.num_layers, self.num_units, mode, dropout=self.dropout, residual_connections=self.residual_connections, cell_class=self.cell_class, attention_layers=self.attention_layers, attention_mechanisms=attention_mechanisms)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - self.dropout",
                    "possible_values": []
                }
            },
            "shape_93": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "scalar_101": {
                "name": {
                    "value": "sampling_probability",
                    "possible_values": []
                },
                "data": {
                    "value": "sampling_probability",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_137": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "shape_155": {
                "input": {
                    "value": "start_tokens",
                    "possible_values": []
                }
            },
            "expand_dims_194": {
                "variable": {
                    "value": "alignment_history",
                    "possible_values": []
                },
                "input": {
                    "value": "alignment_history",
                    "possible_values": [
                        [
                            "cell_state.alignment_history",
                            "Attribute"
                        ],
                        [
                            "alignment_history.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(alignment_history, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "_get_alignment_history(state)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alignment_history, 1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "return_alignment_history",
                            "Name"
                        ],
                        [
                            "_get_alignment_history(state)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alignment_history, [batch_size, beam_width, -1, tf.shape(memory)[1]])",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "warn_215": {
                "msg": {
                    "value": "The current version of tf.contrib.seq2seq.BeamSearchDecoder does not support returning the alignment history. None will be returned instead. Consider upgrading TensorFlow.",
                    "possible_values": []
                }
            },
            "shape_222": {
                "input": {
                    "value": "start_tokens",
                    "possible_values": []
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "alignment_history",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alignment_history",
                    "possible_values": [
                        [
                            "cell_state.alignment_history",
                            "Attribute"
                        ],
                        [
                            "alignment_history.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(alignment_history, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "_get_alignment_history(state)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alignment_history, 1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "return_alignment_history",
                            "Name"
                        ],
                        [
                            "_get_alignment_history(state)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alignment_history, [batch_size, beam_width, -1, tf.shape(memory)[1]])",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_width, -1, tf.shape(memory)[1]]",
                    "possible_values": []
                }
            },
            "is_tensor_96": {
                "x": {
                    "value": "sampling_probability",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_268": {
                "input": {
                    "value": "memory",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.tile_batch(memory, multiplier=beam_width)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/decoders/self_attention_decoder.py": {
        "tensorflow": {
            "dropout_124": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "embedding_fn(ids[:, -1:])",
                            "Call"
                        ],
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder.apply_one(inputs, step + 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "slice_276": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input_": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self._self_attention_stack(inputs, mode=mode, cache=cache, memory=cache['memory'], memory_sequence_length=None, step=step)",
                            "Call"
                        ],
                        [
                            "transformer.norm(inputs)",
                            "Call"
                        ],
                        [
                            "self._self_attention_stack(inputs, sequence_length=sequence_length, mode=mode, memory=memory, memory_sequence_length=memory_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 1], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "possible_values": []
                }
            },
            "expand_dims_279": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self._self_attention_stack(inputs, mode=mode, cache=cache, memory=cache['memory'], memory_sequence_length=None, step=step)",
                            "Call"
                        ],
                        [
                            "transformer.norm(inputs)",
                            "Call"
                        ],
                        [
                            "self._self_attention_stack(inputs, sequence_length=sequence_length, mode=mode, memory=memory, memory_sequence_length=memory_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 1], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_280": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "tf.expand_dims(lengths, 1)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(lengths, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_281": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "slice_316": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input_": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self._self_attention_stack(inputs, mode=mode, cache=cache, memory=cache['memory'], memory_sequence_length=None, step=step)",
                            "Call"
                        ],
                        [
                            "transformer.norm(inputs)",
                            "Call"
                        ],
                        [
                            "self._self_attention_stack(inputs, sequence_length=sequence_length, mode=mode, memory=memory, memory_sequence_length=memory_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 1], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "possible_values": []
                }
            },
            "not_equal_318": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self._self_attention_stack(inputs, mode=mode, cache=cache, memory=cache['memory'], memory_sequence_length=None, step=step)",
                            "Call"
                        ],
                        [
                            "transformer.norm(inputs)",
                            "Call"
                        ],
                        [
                            "self._self_attention_stack(inputs, sequence_length=sequence_length, mode=mode, memory=memory, memory_sequence_length=memory_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 1], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cast_319": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "x": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "tf.expand_dims(lengths, 1)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(lengths, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reduce_sum_320": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "tf.expand_dims(lengths, 1)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(lengths, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "warning_58": {
                "msg": {
                    "value": "Support for average attention network is experimental and may change in future versions.",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "memory",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "layer_cache[self_keys]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "layer_cache[self_values]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "layer_cache[prev_g]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, depth]",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "layer_name",
                    "possible_values": [
                        [
                            "'layer_{}'.format(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_142": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(inputs)[0]]",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(inputs)[1]",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "ffn",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "memory",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "masked_multi_head",
                    "possible_values": []
                }
            },
            "dense_183": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([x, y], -1)",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units * 2",
                    "possible_values": []
                }
            },
            "split_184": {
                "variable": {
                    "value": "(i, f)",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat([x, y], -1), self.num_units * 2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "multi_head",
                    "possible_values": []
                }
            },
            "shape_137": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "embedding_fn(ids[:, -1:])",
                            "Call"
                        ],
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder.apply_one(inputs, step + 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "average_attention",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "embedding_fn(ids[:, -1:])",
                            "Call"
                        ],
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder.apply_one(inputs, step + 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_144": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "embedding_fn(ids[:, -1:])",
                            "Call"
                        ],
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder.apply_one(inputs, step + 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_183": {
                "values": {
                    "value": "[x, y]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sigmoid_185": {
                "x": {
                    "value": "f",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/encoders/conv_encoder.py": {
        "tensorflow": {
            "dropout_41": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "encoder_state",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cnn_c",
                    "possible_values": [
                        [
                            "self._cnn_stack(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv1d_60": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "next_input",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.tanh(outputs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.num_units",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                }
            },
            "tanh_70": {
                "variable": {
                    "value": "next_input",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(next_input, self.num_units, self.kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "outputs + next_input",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "cnn_a",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "cnn_c",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/encoders/encoder.py": {
        "tensorflow": {
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "'encoder_{}'.format(i)",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "'encoder_{}'.format(i)",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/encoders/mean_encoder.py": {
        "tensorflow": {
            "reduce_mean_12": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/encoders/rnn_encoder.py": {
        "tensorflow": {
            "dynamic_rnn_74": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "possible_values": [
                        [
                            "self._build_cell(mode)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.div(sequence_length, self.reduction_factor)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_128": {
                "variable": {
                    "value": "(encoder_outputs_tup, encoder_state_tup)",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "possible_values": [
                        [
                            "self._build_cell(mode)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "possible_values": [
                        [
                            "self._build_cell(mode)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.div(sequence_length, self.reduction_factor)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "possible_values": []
                }
            },
            "dropout_172": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "dense_190": {
                "variable": {
                    "value": "projected",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "self._num_units",
                    "possible_values": []
                }
            },
            "dropout_182": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(outputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "projection",
                    "possible_values": []
                }
            },
            "divide_288": {
                "variable": {
                    "value": "factor",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(current_length, tf.float32)",
                    "possible_values": []
                },
                "y": {
                    "value": "total_reduction_factor",
                    "possible_values": [
                        [
                            "pow(self.reduction_factor, len(self.layers) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_292": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, padding], [0, 0]]",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(inputs)[0], -1, input_depth * self.reduction_factor]",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "'layer_%d' % i",
                    "possible_values": []
                }
            },
            "div_302": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "x": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.div(sequence_length, self.reduction_factor)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.reduction_factor",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(layer_index)",
                    "possible_values": []
                }
            },
            "shape_287": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "cast_288": {
                "x": {
                    "value": "current_length",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_289": {
                "x": {
                    "value": "tf.ceil(factor)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "ceil_289": {
                "x": {
                    "value": "factor",
                    "possible_values": [
                        [
                            "tf.divide(tf.cast(current_length, tf.float32), total_reduction_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_300": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [0, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/encoders/self_attention_encoder.py": {
        "tensorflow": {
            "dropout_54": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(l)",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "multi_head",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "ffn",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, sequence_length=sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/inputters/inputter.py": {
        "tensorflow": {
            "dropout_395": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self.reducer.reduce(transformed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self.reducer.reduce(transformed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "dropout_404": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self.reducer.reduce(transformed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self.reducer.reduce(transformed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "ServingInputReceiver_100": {
                "features": {
                    "value": "features",
                    "possible_values": []
                },
                "receiver_tensors": {
                    "value": "receiver_tensors",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "'inputter_{}'.format(i)",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "'inputter_{}'.format(i)",
                    "possible_values": []
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "'inputter_{}'.format(i)",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "'inputter_{}'.format(i)",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/inputters/record_inputter.py": {
        "tensorflow": {
            "Example_86": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=shape)), 'values': tf.train.Feature(float_list=tf.train.FloatList(value=values))})",
                    "possible_values": []
                }
            },
            "TFRecordDataset_35": {
                "filenames": {
                    "value": "data_file",
                    "possible_values": []
                }
            },
            "parse_single_example_52": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "serialized": {
                    "value": "data['raw']",
                    "possible_values": []
                },
                "features": {
                    "value": "{'shape': tf.VarLenFeature(tf.int64), 'values': tf.VarLenFeature(self.dtype)}",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "x": {
                    "value": "features['shape'].values",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensor": {
                    "value": "values",
                    "possible_values": [
                        [
                            "vector.flatten().tolist()",
                            "Call"
                        ],
                        [
                            "features['values'].values",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "list(vector.shape)",
                            "Call"
                        ],
                        [
                            "first_record.features.feature['shape'].int64_list.value",
                            "Attribute"
                        ],
                        [
                            "tf.cast(features['shape'].values, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tf_record_iterator_31": {
                "path": {
                    "value": "data_file",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, self.input_depth)",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Features_86": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=shape)), 'values': tf.train.Feature(float_list=tf.train.FloatList(value=values))}",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(values, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tf_record_iterator_38": {
                "path": {
                    "value": "data_file",
                    "possible_values": []
                }
            },
            "VarLenFeature_53": {
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "VarLenFeature_54": {
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "Feature_87": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=shape)",
                    "possible_values": []
                }
            },
            "Feature_88": {
                "float_list": {
                    "value": "tf.train.FloatList(value=values)",
                    "possible_values": []
                }
            },
            "Int64List_87": {
                "value": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "list(vector.shape)",
                            "Call"
                        ],
                        [
                            "first_record.features.feature['shape'].int64_list.value",
                            "Attribute"
                        ],
                        [
                            "tf.cast(features['shape'].values, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "FloatList_88": {
                "value": {
                    "value": "values",
                    "possible_values": [
                        [
                            "vector.flatten().tolist()",
                            "Call"
                        ],
                        [
                            "features['values'].values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/inputters/text_inputter.py": {
        "tensorflow": {
            "FileWriter_73": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "possible_values": []
                }
            },
            "cond_213": {
                "variable": {
                    "value": "(chars, lengths)",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(tokens)[0], 0)",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_none",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_apply",
                    "possible_values": []
                }
            },
            "map_fn_184": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.py_func(_string_len, [x], tf.int64)",
                    "possible_values": []
                },
                "elems": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reduce_max_190": {
                "variable": {
                    "value": "max_length",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.py_func(_string_len, [x], tf.int64), tokens, dtype=tf.int64, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_193": {
                "variable": {
                    "value": "spaced_chars",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.py_func(_split_chars, [x, max_length], [tf.string])",
                    "possible_values": []
                },
                "elems": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[tf.string]",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "map_fn_200": {
                "variable": {
                    "value": "chars",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.string_split(x, delimiter=' ').values",
                    "possible_values": []
                },
                "elems": {
                    "value": "spaced_chars",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.py_func(_split_chars, [x, max_length], [tf.string]), tokens, dtype=[tf.string], back_prop=False)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "constant_209": {
                "variable": {
                    "value": "chars",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "constant_210": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "dropout_394": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.num_outputs, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.num_outputs])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "get_variable_476": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "w_char_embs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocabulary_size, self.embedding_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "dropout_480": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.num_outputs, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.num_outputs])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "reshape_532": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.num_outputs, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.num_outputs])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[-1], self.embedding_size]",
                    "possible_values": []
                }
            },
            "pad_535": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.num_outputs, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.num_outputs])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]]",
                    "possible_values": []
                }
            },
            "conv1d_538": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.num_outputs, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.num_outputs])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.num_outputs",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.stride",
                    "possible_values": []
                }
            },
            "reduce_max_545": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.num_outputs, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.num_outputs])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_548": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "embedding_lookup(embeddings, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.num_outputs, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.num_outputs])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[1], self.num_outputs]",
                    "possible_values": []
                }
            },
            "reshape_598": {
                "variable": {
                    "value": "flat_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[-1]]",
                    "possible_values": []
                }
            },
            "count_nonzero_600": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_inputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, tf.shape(inputs)[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dynamic_rnn_608": {
                "variable": {
                    "value": "(rnn_outputs, rnn_state)",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "possible_values": [
                        [
                            "build_cell(1, self.num_units, mode, dropout=self.dropout, cell_class=self.cell_class)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embeddings",
                    "possible_values": [
                        [
                            "tf.get_variable('w_embs', dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_embs', dtype=self.dtype, trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_embs', shape=shape, dtype=self.dtype, initializer=initializer, trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_char_embs', dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_char_embs', shape=[self.vocabulary_size, self.embedding_size], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self._embed(flat_inputs, mode)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.count_nonzero(flat_inputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embeddings.dtype",
                    "possible_values": []
                }
            },
            "reshape_619": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoding",
                    "possible_values": [
                        [
                            "tf.reduce_mean(rnn_outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "last_encoding_from_state(rnn_state)",
                            "Call"
                        ],
                        [
                            "'average'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[1], self.num_units]",
                    "possible_values": []
                }
            },
            "equal_213": {
                "x": {
                    "value": "tf.shape(tokens)[0]",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "TextLineDataset_231": {
                "filenames": {
                    "value": "data_file",
                    "possible_values": []
                }
            },
            "get_variable_355": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "w_embs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "get_variable_367": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "w_embs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "possible_values": []
                }
            },
            "get_variable_465": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "w_char_embs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "reduce_mean_615": {
                "variable": {
                    "value": "encoding",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_outputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "placeholder_332": {
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "possible_values": []
                }
            },
            "placeholder_333": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "variable_scope_354": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "get_variable_385": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "w_embs",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[self.vocabulary_size, self.embedding_size]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "tf.constant(pretrained.astype(self.dtype.as_numpy_dtype()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "self.trainable",
                    "possible_values": []
                }
            },
            "placeholder_441": {
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "possible_values": []
                }
            },
            "placeholder_442": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "variable_scope_464": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "py_func_185": {
                "func": {
                    "value": "_string_len",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "py_func_194": {
                "func": {
                    "value": "_split_chars",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, max_length]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string]",
                    "possible_values": []
                }
            },
            "shape_213": {
                "input": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_246": {
                "input": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ],
                        [
                            "data['tokens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_scope_354": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_380": {
                "variable": {
                    "value": "initializer",
                    "possible_values": []
                },
                "value": {
                    "value": "pretrained.astype(self.dtype.as_numpy_dtype())",
                    "possible_values": []
                }
            },
            "get_variable_scope_464": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_bytes_50": {
                "bytes_or_text": {
                    "value": "'<unk%d>\\n' % i",
                    "possible_values": []
                }
            },
            "string_split_201": {
                "source": {
                    "value": "x",
                    "possible_values": []
                },
                "delimiter": {
                    "value": " ",
                    "possible_values": []
                }
            },
            "shape_532": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "shape_548": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "shape_598": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "shape_619": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/layers/bridge.py": {
        "tensorflow": {
            "flatten_23": {
                "variable": {
                    "value": "expected_state_flat",
                    "possible_values": []
                },
                "structure": {
                    "value": "expected_state",
                    "possible_values": []
                }
            },
            "flatten_24": {
                "variable": {
                    "value": "state_flat",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "possible_values": []
                }
            },
            "assert_same_structure_20": {
                "nest1": {
                    "value": "expected_state",
                    "possible_values": []
                },
                "nest2": {
                    "value": "state",
                    "possible_values": []
                }
            },
            "flatten_84": {
                "variable": {
                    "value": "encoder_state_flat",
                    "possible_values": []
                },
                "structure": {
                    "value": "encoder_state",
                    "possible_values": []
                }
            },
            "flatten_85": {
                "variable": {
                    "value": "decoder_state_flat",
                    "possible_values": []
                },
                "structure": {
                    "value": "decoder_zero_state",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "encoder_state_concat",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_state_flat",
                    "possible_values": [
                        [
                            "tf.contrib.framework.nest.flatten(encoder_state)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dense_98": {
                "variable": {
                    "value": "transformed",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_state_concat",
                    "possible_values": [
                        [
                            "tf.concat(encoder_state_flat, 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "decoder_total_size",
                    "possible_values": [
                        [
                            "sum(decoder_state_size)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "split_104": {
                "variable": {
                    "value": "splitted",
                    "possible_values": []
                },
                "value": {
                    "value": "transformed",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoder_state_concat, decoder_total_size, activation=self.activation)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "decoder_state_size",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_tensor_27": {
                "x": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "pack_sequence_as_107": {
                "structure": {
                    "value": "decoder_zero_state",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "splitted",
                    "possible_values": [
                        [
                            "tf.split(transformed, decoder_state_size, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/layers/common.py": {
        "tensorflow": {
            "embedding_lookup_30": {
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "convert_gradient_to_tensor(params)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "possible_values": []
                }
            },
            "convert_to_tensor_9": {
                "value": {
                    "value": "dy",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/layers/position.py": {
        "tensorflow": {
            "tile_34": {
                "variable": {
                    "value": "position",
                    "possible_values": []
                },
                "input": {
                    "value": "position",
                    "possible_values": [
                        [
                            "tf.range(maximum_length) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.tile(position, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "position * mask",
                            "BinOp"
                        ],
                        [
                            "tf.tile([position], [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "position",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position",
                    "possible_values": [
                        [
                            "tf.range(maximum_length) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.tile(position, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "position * mask",
                            "BinOp"
                        ],
                        [
                            "tf.tile([position], [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "sequence_mask_37": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], timesteps)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "position.dtype",
                    "possible_values": []
                }
            },
            "reduce_max_28": {
                "variable": {
                    "value": "maximum_length",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], timesteps)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_100": {
                "variable": {
                    "value": "position",
                    "possible_values": []
                },
                "input": {
                    "value": "[position]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "expand_dims_101": {
                "variable": {
                    "value": "position",
                    "possible_values": []
                },
                "input": {
                    "value": "position",
                    "possible_values": [
                        [
                            "tf.range(maximum_length) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.tile(position, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "position * mask",
                            "BinOp"
                        ],
                        [
                            "tf.tile([position], [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "minimum_158": {
                "variable": {
                    "value": "positions",
                    "possible_values": []
                },
                "x": {
                    "value": "positions",
                    "possible_values": [
                        [
                            "make_positions(sequence_length, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "tf.minimum(positions, self.maximum_position)",
                            "Call"
                        ],
                        [
                            "tf.cast(positions, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.maximum_position",
                    "possible_values": []
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "w_embs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.maximum_position + 1, depth]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_175": {
                "variable": {
                    "value": "positions",
                    "possible_values": []
                },
                "x": {
                    "value": "positions",
                    "possible_values": [
                        [
                            "make_positions(sequence_length, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "tf.minimum(positions, self.maximum_position)",
                            "Call"
                        ],
                        [
                            "tf.cast(positions, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "exp_178": {
                "variable": {
                    "value": "inv_timescales",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(depth / 2, dtype=tf.float32) * -log_timescale_increment",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "inv_timescales",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(inv_timescales, [batch_size])",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "encoding",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], timesteps)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fill_72": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "possible_values": []
                },
                "value": {
                    "value": "timesteps",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_184": {
                "variable": {
                    "value": "encoding",
                    "possible_values": []
                },
                "x": {
                    "value": "encoding",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(encoding, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "position_encoding",
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "position_encoding",
                    "possible_values": []
                }
            },
            "shape_174": {
                "input": {
                    "value": "positions",
                    "possible_values": [
                        [
                            "make_positions(sequence_length, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "tf.minimum(positions, self.maximum_position)",
                            "Call"
                        ],
                        [
                            "tf.cast(positions, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_179": {
                "input": {
                    "value": "inv_timescales",
                    "possible_values": [
                        [
                            "tf.exp(tf.range(depth / 2, dtype=tf.float32) * -log_timescale_increment)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(inv_timescales, [batch_size]), [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "inv_timescales",
                    "possible_values": [
                        [
                            "tf.exp(tf.range(depth / 2, dtype=tf.float32) * -log_timescale_increment)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(inv_timescales, [batch_size]), [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "range_178": {
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "sin_182": {
                "x": {
                    "value": "scaled_time",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, -1) * tf.expand_dims(inv_timescales, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_182": {
                "x": {
                    "value": "scaled_time",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, -1) * tf.expand_dims(inv_timescales, 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/layers/reducer.py": {
        "tensorflow": {
            "pad_12": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, padding_length], [0, 0]]",
                    "possible_values": []
                }
            },
            "sequence_mask_42": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "maxlen",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max([tf.shape(x)[1] for x in inputs])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(combined_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                }
            },
            "expand_dims_43": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maxlen, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(length, maxlen=maxlen, dtype=elem.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sequence_mask_44": {
                "variable": {
                    "value": "mask_combined",
                    "possible_values": []
                },
                "lengths": {
                    "value": "max_sequence_length",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_lengths, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max([tf.shape(x)[1] for x in inputs])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(combined_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "mask_combined",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_combined",
                    "possible_values": [
                        [
                            "tf.sequence_mask(max_sequence_length, maxlen=maxlen, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask_combined, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_max_68": {
                "variable": {
                    "value": "max_sequence_length",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_lengths",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_max_69": {
                "variable": {
                    "value": "maxlen",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.shape(x)[1] for x in inputs]",
                    "possible_values": []
                }
            },
            "meshgrid_89": {
                "variable": {
                    "value": "(cols, rows)",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(time)",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(batch_size)",
                    "possible_values": []
                }
            },
            "mod_91": {
                "variable": {
                    "value": "cols",
                    "possible_values": []
                },
                "x1": {
                    "value": "cols",
                    "possible_values": [
                        [
                            "cols - tf.expand_dims(offsets, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.mod(cols, time)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "time",
                    "possible_values": [
                        [
                            "tf.shape(tensor)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_92": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "values": {
                    "value": "[rows, cols]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cond_19": {
                "pred": {
                    "value": "tf.less(time_dim, length)",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : pad_in_time(x, length - time_dim)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x[:, :length]",
                    "possible_values": []
                }
            },
            "reduce_max_40": {
                "variable": {
                    "value": "maxlen",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "max_sequence_length",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_lengths, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_90": {
                "input": {
                    "value": "offsets",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_nd_93": {
                "params": {
                    "value": "tensor",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.stack([rows, cols], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_18": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_20": {
                "x": {
                    "value": "time_dim",
                    "possible_values": [
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "length",
                    "possible_values": []
                }
            },
            "shape_87": {
                "input": {
                    "value": "tensor",
                    "possible_values": []
                }
            },
            "shape_88": {
                "input": {
                    "value": "tensor",
                    "possible_values": []
                }
            },
            "flatten_105": {
                "variable": {
                    "value": "x_flat",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_106": {
                "variable": {
                    "value": "y_flat",
                    "possible_values": []
                },
                "structure": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "add_n_147": {
                "inputs": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "foldl_158": {
                "fn": {
                    "value": "lambda a, x: a * x",
                    "possible_values": []
                },
                "elems": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "concat_172": {
                "values": {
                    "value": "inputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "possible_values": []
                }
            },
            "assert_same_structure_103": {
                "nest1": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                },
                "nest2": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "pack_sequence_as_112": {
                "structure": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_182": {
                "variable": {
                    "value": "combined_length",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sequence_lengths",
                    "possible_values": []
                }
            },
            "reduce_max_183": {
                "variable": {
                    "value": "maxlen",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "combined_length",
                    "possible_values": [
                        [
                            "tf.add_n(sequence_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_49": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_69": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sequence_mask_191": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "lengths": {
                    "value": "length",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "maxlen",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max([tf.shape(x)[1] for x in inputs])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(combined_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "elem.dtype",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maxlen, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(length, maxlen=maxlen, dtype=elem.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/layers/transformer.py": {
        "tensorflow": {
            "tile_16": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads]",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_heads, -1]",
                    "possible_values": []
                }
            },
            "transpose_18": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "a": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "sequence_mask_41": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_42": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_51": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, maximum_length, maximum_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_74": {
                "variable": {
                    "value": "sequence_mask",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_95": {
                "variable": {
                    "value": "sequence_mask",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_98": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads]",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "transpose_168": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads]",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "variable": {
                    "value": "dot",
                    "possible_values": []
                },
                "a": {
                    "value": "queries",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(queries, num_units, 1)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, num_heads)",
                            "Call"
                        ],
                        [
                            "queries * (num_units // num_heads) ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "possible_values": [
                        [
                            "tf.concat([cache['self_keys'], keys], axis=1)",
                            "Call"
                        ],
                        [
                            "split_heads(keys, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_199": {
                "variable": {
                    "value": "attn",
                    "possible_values": []
                },
                "logits": {
                    "value": "dot",
                    "possible_values": [
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "dot * mask + (1.0 - mask) * dot.dtype.min",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "attn",
                    "possible_values": []
                },
                "x": {
                    "value": "attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(dot)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "matmul_206": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "a": {
                    "value": "attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(dot)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "values",
                    "possible_values": [
                        [
                            "tf.concat([cache['self_values'], values], axis=1)",
                            "Call"
                        ],
                        [
                            "split_heads(values, num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_280": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "possible_values": [
                        [
                            "combine_heads(heads)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_units",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv1d_302": {
                "variable": {
                    "value": "inner",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "filters": {
                    "value": "inner_dim",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                }
            },
            "dropout_303": {
                "variable": {
                    "value": "inner",
                    "possible_values": []
                },
                "x": {
                    "value": "inner",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(x, inner_dim, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inner, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "conv1d_307": {
                "variable": {
                    "value": "outer",
                    "possible_values": []
                },
                "input": {
                    "value": "inner",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(x, inner_dim, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inner, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dropout_330": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]]",
                    "possible_values": []
                }
            },
            "reduce_max_50": {
                "variable": {
                    "value": "maximum_length",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_76": {
                "input": {
                    "value": "sequence_mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]]",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "input": {
                    "value": "sequence_mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "tf.range(1, tf.cast(tf.shape(mask)[1] + 1, dtype), dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_117": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_or_step",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "possible_values": []
                }
            },
            "split_136": {
                "value": {
                    "value": "tf.layers.conv1d(inputs, num_units * num_outputs, 1)",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_outputs",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "conv1d_252": {
                "variable": {
                    "value": "queries",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(queries, num_units, 1)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, num_heads)",
                            "Call"
                        ],
                        [
                            "queries * (num_units // num_heads) ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_units",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_48": {
                "input": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ],
                        [
                            "tile_sequence_length(sequence_length, num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_98": {
                "x": {
                    "value": "tf.shape(mask)[1] + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "a": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "conv1d_137": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_units * num_outputs",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "keys",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['self_keys'], keys]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['self_values'], values]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cond_255": {
                "variable": {
                    "value": "(keys, values)",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(cache['memory_keys'])[1], 0)",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : fused_projection(memory, num_units, num_outputs=2)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : [cache['memory_keys'], cache['memory_values']]",
                    "possible_values": []
                }
            },
            "shape_152": {
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "shape_169": {
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_256": {
                "x": {
                    "value": "tf.shape(cache['memory_keys'])[1]",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_78": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_98": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_heads, tf.shape(mask)[1], tf.shape(mask)[2]])",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_256": {
                "input": {
                    "value": "cache['memory_keys']",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/models/catalog.py": {
        "tensorflow": {}
    },
    "Code/opennmt/models/model.py": {
        "tensorflow": {
            "add_to_collection_364": {
                "name": {
                    "value": "tf.GraphKeys.TABLE_INITIALIZERS",
                    "possible_values": []
                },
                "value": {
                    "value": "iterator.initializer",
                    "possible_values": []
                }
            },
            "scalar_90": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "tboard_loss",
                    "possible_values": [
                        [
                            "actual_loss",
                            "Name"
                        ],
                        [
                            "_normalize_loss(loss[0], den=loss[2]) if len(loss) > 2 else actual_loss",
                            "IfExp"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_154": {
                "minval": {
                    "value": "-param_init",
                    "possible_values": []
                },
                "maxval": {
                    "value": "param_init",
                    "possible_values": [
                        [
                            "params.get('param_init')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "words_per_sec",
                    "possible_values": []
                }
            },
            "EstimatorSpec_107": {
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "_extract_loss(losses_shards)",
                            "Call"
                        ],
                        [
                            "self._compute_loss(features, labels, logits, params, mode)",
                            "Call"
                        ],
                        [
                            "_extract_loss(loss)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": [
                        [
                            "optimize(loss, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_76": {
                "input_tensor": {
                    "value": "num",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer(params)",
                    "possible_values": []
                }
            },
            "EstimatorSpec_122": {
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "_extract_loss(losses_shards)",
                            "Call"
                        ],
                        [
                            "self._compute_loss(features, labels, logits, params, mode)",
                            "Call"
                        ],
                        [
                            "_extract_loss(loss)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "possible_values": [
                        [
                            "self._compute_metrics(features, labels, predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "PredictOutput_132": {
                "variable": {
                    "value": "export_outputs[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "predictions",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "input_tensor": {
                    "value": "features_length",
                    "possible_values": [
                        [
                            "self._get_features_length(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_211": {
                "input_tensor": {
                    "value": "labels_length",
                    "possible_values": [
                        [
                            "self._get_labels_length(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_74": {
                "inputs": {
                    "value": "den",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "EstimatorSpec_134": {
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "possible_values": []
                },
                "export_outputs": {
                    "value": "export_outputs",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/models/sequence_classifier.py": {
        "tensorflow": {
            "TextLineDataset_60": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "filenames": {
                    "value": "labels_file",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "encoding",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "encoder_outputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dense_85": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoding",
                    "possible_values": [
                        [
                            "tf.reduce_mean(encoder_outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "last_encoding_from_state(encoder_state)",
                            "Call"
                        ],
                        [
                            "'average'",
                            "MethodArgument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_labels",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "classes_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoding, self.num_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_94": {
                "variable": {
                    "value": "classes_id",
                    "possible_values": []
                },
                "input": {
                    "value": "classes_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "accuracy_112": {
                "labels": {
                    "value": "labels['classes']",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions['classes']",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/models/sequence_tagger.py": {
        "tensorflow": {
            "TextLineDataset_62": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "filenames": {
                    "value": "labels_file",
                    "possible_values": []
                }
            },
            "sequence_mask_140": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "lengths": {
                    "value": "length",
                    "possible_values": [
                        [
                            "sequence_length[b] if sequence_length is not None else gold.shape[1]",
                            "IfExp"
                        ],
                        [
                            "self._get_features_length(features)",
                            "Call"
                        ],
                        [
                            "self._get_features_length(features)",
                            "Call"
                        ],
                        [
                            "self._get_features_length(features)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(labels['tags'])[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "accuracy_144": {
                "variable": {
                    "value": "eval_metric_ops[accuracy]",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels['tags']",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions['tags']",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "tf.sequence_mask(length, maxlen=tf.shape(labels['tags'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_84": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_outputs",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_labels",
                    "possible_values": []
                }
            },
            "identity_107": {
                "variable": {
                    "value": "output_sequence_length",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_sequence_length",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-log_likelihood",
                    "possible_values": []
                }
            },
            "cast_127": {
                "variable": {
                    "value": "loss_normalizer",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(log_likelihood)[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "loss.dtype",
                    "possible_values": []
                }
            },
            "py_func_152": {
                "variable": {
                    "value": "(gold_flags, predicted_flags)",
                    "possible_values": []
                },
                "func": {
                    "value": "flag_fn",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "flag_bioes_tags",
                            "Name"
                        ]
                    ]
                },
                "inp": {
                    "value": "[labels['tags'], predictions['tags'], length]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.bool, tf.bool]",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "precision_158": {
                "variable": {
                    "value": "precision_metric",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predicted_flags",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "recall_159": {
                "variable": {
                    "value": "recall_metric",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predicted_flags",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "transition_params",
                    "possible_values": []
                },
                "name": {
                    "value": "transitions",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_labels, self.num_labels]",
                    "possible_values": []
                }
            },
            "cast_96": {
                "variable": {
                    "value": "tags_id",
                    "possible_values": []
                },
                "x": {
                    "value": "tags_id",
                    "possible_values": [
                        [
                            "tf.cast(tags_id, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tags_prob, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "tags_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoder_outputs, self.num_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "tags_id",
                    "possible_values": []
                },
                "input": {
                    "value": "tags_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "mode != tf.estimator.ModeKeys.TRAIN",
                    "possible_values": []
                }
            },
            "no_op_167": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "string_split_64": {
                "source": {
                    "value": "[x]",
                    "possible_values": []
                }
            },
            "get_variable_scope_121": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cast_124": {
                "x": {
                    "value": "labels['tags_id']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "shape_127": {
                "input": {
                    "value": "log_likelihood",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "labels['tags']",
                    "possible_values": []
                }
            },
            "string_split_65": {
                "source": {
                    "value": "[x]",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/models/sequence_to_sequence.py": {
        "tensorflow": {
            "cast_32": {
                "variable": {
                    "value": "bos",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([constants.START_OF_SENTENCE_ID])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "eos",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([constants.END_OF_SENTENCE_ID])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "argmax_255": {
                "variable": {
                    "value": "alignment",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "possible_values": [
                        [
                            "tf.reshape(alignment, [-1, tf.shape(alignment)[2], tf.shape(alignment)[3]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "range_258": {
                "variable": {
                    "value": "batch_ids",
                    "possible_values": []
                }
            },
            "tile_259": {
                "variable": {
                    "value": "batch_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_ids",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_ids, [max_time])",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_ids, [max_time, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(batch_ids, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[max_time]",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "batch_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_ids",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_ids, [max_time])",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_ids, [max_time, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(batch_ids, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_time, batch_size]",
                    "possible_values": []
                }
            },
            "transpose_261": {
                "variable": {
                    "value": "batch_ids",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_ids",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_ids, [max_time])",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_ids, [max_time, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(batch_ids, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "stack_262": {
                "variable": {
                    "value": "aligned_pos",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_ids, alignment]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_nd_263": {
                "variable": {
                    "value": "aligned_tokens",
                    "possible_values": []
                },
                "params": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "prediction['tokens'][i][:prediction['length'][i] - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "aligned_pos",
                    "possible_values": [
                        [
                            "tf.stack([batch_ids, alignment], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_285": {
                "condition": {
                    "value": "tf.equal(target_tokens, unknown_token)",
                    "possible_values": []
                },
                "x": {
                    "value": "aligned_source_tokens",
                    "possible_values": [
                        [
                            "align_tokens_from_attention(source_tokens, attention)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_tokens",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_32": {
                "value": {
                    "value": "[constants.START_OF_SENTENCE_ID]",
                    "possible_values": []
                }
            },
            "constant_33": {
                "value": {
                    "value": "[constants.END_OF_SENTENCE_ID]",
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "[ids, eos]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_39": {
                "values": {
                    "value": "[bos, ids]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "shape_256": {
                "input": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "prediction['tokens'][i][:prediction['length'][i] - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_257": {
                "input": {
                    "value": "attention",
                    "possible_values": [
                        [
                            "tf.reshape(alignment, [-1, tf.shape(alignment)[2], tf.shape(alignment)[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_286": {
                "x": {
                    "value": "target_tokens",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unknown_token",
                    "possible_values": [
                        [
                            "constants.UNKNOWN_TOKEN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                }
            },
            "fill_153": {
                "variable": {
                    "value": "start_tokens",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "possible_values": []
                },
                "value": {
                    "value": "constants.START_OF_SENTENCE_ID",
                    "possible_values": []
                }
            },
            "shape_204": {
                "variable": {
                    "value": "original_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "target_tokens",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "target_tokens",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_tokens",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, original_shape[-1]]",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "attention",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alignment",
                    "possible_values": [
                        [
                            "tf.argmax(attention, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(alignment)[2], tf.shape(alignment)[3]]",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "target_tokens",
                    "possible_values": []
                },
                "tensor": {
                    "value": "replaced_target_tokens",
                    "possible_values": [
                        [
                            "replace_unknown_target(target_tokens, source_tokens, attention)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "original_shape",
                    "possible_values": [
                        [
                            "tf.shape(target_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "decoder_scope",
                    "possible_values": []
                },
                "reuse": {
                    "value": "labels is not None",
                    "possible_values": []
                }
            },
            "cast_191": {
                "x": {
                    "value": "sampled_ids",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "as_bytes_241": {
                "bytes_or_text": {
                    "value": "sentence",
                    "possible_values": [
                        [
                            "self.target_inputter.tokenizer.detokenize(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_126": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "shape_150": {
                "input": {
                    "value": "encoder_sequence_length",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "shape_206": {
                "input": {
                    "value": "alignment",
                    "possible_values": [
                        [
                            "tf.argmax(attention, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/models/transformer.py": {
        "tensorflow": {}
    },
    "Code/opennmt/optimizers/adafactor.py": {
        "tensorflow": {
            "reduce_mean_200": {
                "variable": {
                    "value": "grad_squared_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_squared",
                    "possible_values": [
                        [
                            "tf.square(grad) + 1e-30",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_sub_244": {
                "variable": {
                    "value": "var_update",
                    "possible_values": []
                },
                "ref": {
                    "value": "handle",
                    "possible_values": []
                },
                "value": {
                    "value": "subtrahend",
                    "possible_values": [
                        [
                            "update_scale * x",
                            "BinOp"
                        ],
                        [
                            "new_m",
                            "Name"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "minimum_255": {
                "variable": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.rsqrt(_step_num() + 1.0)",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "to_float_287": {
                "x": {
                    "value": "tf.train.get_or_create_global_step()",
                    "possible_values": []
                }
            },
            "sqrt_291": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x))",
                    "possible_values": []
                }
            },
            "maximum_196": {
                "x": {
                    "value": "_reduce_rms(var)",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "reduce_mean_216": {
                "variable": {
                    "value": "grad_squared_row_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_squared",
                    "possible_values": [
                        [
                            "tf.square(grad) + 1e-30",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "variable": {
                    "value": "grad_squared_col_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_squared",
                    "possible_values": [
                        [
                            "tf.square(grad) + 1e-30",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "assign_222": {
                "variable": {
                    "value": "vr_update",
                    "possible_values": []
                },
                "ref": {
                    "value": "vr",
                    "possible_values": [
                        [
                            "self.get_slot(handle, 'vr')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_vr",
                    "possible_values": [
                        [
                            "decay_rate * vr + mixing_rate * grad_squared_row_mean",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "assign_223": {
                "variable": {
                    "value": "vc_update",
                    "possible_values": []
                },
                "ref": {
                    "value": "vc",
                    "possible_values": [
                        [
                            "self.get_slot(handle, 'vc')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_vc",
                    "possible_values": [
                        [
                            "decay_rate * vc + mixing_rate * grad_squared_col_mean",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "reduce_mean_225": {
                "variable": {
                    "value": "long_term_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_vr",
                    "possible_values": [
                        [
                            "decay_rate * vr + mixing_rate * grad_squared_row_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_226": {
                "variable": {
                    "value": "r_factor",
                    "possible_values": []
                },
                "x": {
                    "value": "new_vr / long_term_mean",
                    "possible_values": []
                }
            },
            "rsqrt_227": {
                "variable": {
                    "value": "c_factor",
                    "possible_values": []
                },
                "x": {
                    "value": "new_vc",
                    "possible_values": [
                        [
                            "decay_rate * vc + mixing_rate * grad_squared_col_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_232": {
                "variable": {
                    "value": "v_update",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "possible_values": [
                        [
                            "self.get_slot(handle, 'v')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_v",
                    "possible_values": [
                        [
                            "decay_rate * v + mixing_rate * grad_squared",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "maximum_236": {
                "variable": {
                    "value": "clipping_denom",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "possible_values": []
                },
                "y": {
                    "value": "_reduce_rms(x) / self._clipping_threshold",
                    "possible_values": []
                }
            },
            "group_246": {
                "*inputs": {
                    "value": "*updates",
                    "possible_values": []
                }
            },
            "to_float_269": {
                "x": {
                    "value": "tf.train.get_or_create_global_step()",
                    "possible_values": []
                }
            },
            "pow_283": {
                "x": {
                    "value": "_step_num() + 1.0",
                    "possible_values": []
                },
                "y": {
                    "value": "-exponent",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_287": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_mean_291": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "r_val",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "c_val",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_180": {
                "value": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "square_199": {
                "x": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "rsqrt_255": {
                "x": {
                    "value": "_step_num() + 1.0",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_269": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pow_270": {
                "x": {
                    "value": "beta2",
                    "possible_values": []
                },
                "y": {
                    "value": "t - 1.0",
                    "possible_values": []
                }
            },
            "square_291": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "grad * tf.expand_dims(r_factor, 1) * tf.expand_dims(c_factor, 0)",
                            "BinOp"
                        ],
                        [
                            "grad * tf.rsqrt(new_v)",
                            "BinOp"
                        ],
                        [
                            "x / clipping_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_228": {
                "input": {
                    "value": "r_factor",
                    "possible_values": [
                        [
                            "tf.rsqrt(new_vr / long_term_mean)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rsqrt_234": {
                "x": {
                    "value": "new_v",
                    "possible_values": [
                        [
                            "decay_rate * v + mixing_rate * grad_squared",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_242": {
                "ref": {
                    "value": "m",
                    "possible_values": [
                        [
                            "self.get_slot(handle, 'm')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_m",
                    "possible_values": [
                        [
                            "self._beta1 * m + (1.0 - self._beta1) * subtrahend",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/optimizers/multistep_adam.py": {
        "tensorflow": {
            "convert_to_tensor_72": {
                "variable": {
                    "value": "self._n_t",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "possible_values": []
                }
            },
            "convert_to_tensor_114": {
                "variable": {
                    "value": "dense_grad",
                    "possible_values": []
                },
                "value": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "get_default_graph_67": {
                "variable": {
                    "value": "graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "assign_add_92": {
                "variable": {
                    "value": "assign_op",
                    "possible_values": []
                },
                "ref": {
                    "value": "grad_acc",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'grad_acc')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "grad",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "possible_values": []
                }
            },
            "cond_95": {
                "pred": {
                    "value": "tf.equal(self._get_iter_variable(), 0)",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _apply_adam(grad_acc, apply_fn, grad, var, *args, **kwargs)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _accumulate_gradient(grad_acc, grad)",
                    "possible_values": []
                }
            },
            "group_141": {
                "*inputs": {
                    "value": "*update_ops + [update_iter, maybe_update_beta]",
                    "possible_values": []
                },
                "name": {
                    "value": "name_scope",
                    "possible_values": []
                }
            },
            "group_89": {
                "*inputs": {
                    "value": "adam_op",
                    "possible_values": [
                        [
                            "apply_fn(total_grad, var, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "grad_acc_to_zero_op",
                    "possible_values": [
                        [
                            "grad_acc.assign(tf.zeros_like(grad_acc), use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_93": {
                "*inputs": {
                    "value": "assign_op",
                    "possible_values": [
                        [
                            "tf.assign_add(grad_acc, grad, use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_95": {
                "x": {
                    "value": "self._get_iter_variable()",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "control_dependencies_126": {
                "control_inputs": {
                    "value": "update_ops",
                    "possible_values": []
                }
            },
            "cond_137": {
                "variable": {
                    "value": "maybe_update_beta",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(iter_, 0)",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_update_beta_op",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "self._n_t",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "possible_values": []
                }
            },
            "control_dependencies_86": {
                "control_inputs": {
                    "value": "[adam_op]",
                    "possible_values": []
                }
            },
            "colocate_with_127": {
                "op": {
                    "value": "iter_",
                    "possible_values": [
                        [
                            "self._get_iter_variable()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_87": {
                "input": {
                    "value": "grad_acc",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'grad_acc')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_136": {
                "*inputs": {
                    "value": "update_beta1",
                    "possible_values": [
                        [
                            "beta1_power.assign(beta1_power * self._beta1_t, use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "update_beta2",
                    "possible_values": [
                        [
                            "beta2_power.assign(beta2_power * self._beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_137": {
                "x": {
                    "value": "iter_",
                    "possible_values": [
                        [
                            "self._get_iter_variable()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "[maybe_update_beta]",
                    "possible_values": []
                }
            },
            "mod_139": {
                "x1": {
                    "value": "iter_ + 1",
                    "possible_values": []
                },
                "x2": {
                    "value": "self._n_t",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/runner.py": {
        "tensorflow": {
            "ConfigProto_44": {
                "variable": {
                    "value": "session_config_base",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=gpu_allow_growth)",
                    "possible_values": []
                }
            },
            "RunConfig_52": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "self._config['model_dir']",
                    "possible_values": []
                },
                "session_config": {
                    "value": "session_config",
                    "possible_values": [
                        [
                            "session_config_base",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "tf_random_seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Session_59": {
                "variable": {
                    "value": "_",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "possible_values": [
                        [
                            "session_config_base",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Estimator_77": {
                "variable": {
                    "value": "self._estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "self._model.model_fn(num_devices=self._num_devices)",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(model_dir=self._config['model_dir'], session_config=session_config, tf_random_seed=seed)",
                            "Call"
                        ],
                        [
                            "run_config.replace(save_summary_steps=self._config['train']['save_summary_steps'], log_step_count_steps=self._config['train']['save_summary_steps'])",
                            "Call"
                        ],
                        [
                            "run_config.replace(save_checkpoints_secs=None, save_checkpoints_steps=self._config['train']['save_checkpoints_steps'])",
                            "Call"
                        ],
                        [
                            "run_config.replace(keep_checkpoint_max=self._config['train']['keep_checkpoint_max'])",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "self._config['params']",
                    "possible_values": []
                }
            },
            "TrainSpec_89": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "self._model.input_fn(tf.estimator.ModeKeys.TRAIN, self._config['train']['batch_size'], self._config['data'], self._config['data']['train_features_file'], labels_file=self._config['data']['train_labels_file'], batch_type=self._config['train'].get('batch_type', 'examples'), batch_multiplier=self._num_devices, bucket_width=self._config['train'].get('bucket_width', 5), single_pass=self._config['train'].get('single_pass', False), num_threads=self._config['train'].get('num_threads'), sample_buffer_size=self._config['train'].get('sample_buffer_size', 500000), prefetch_buffer_size=self._config['train'].get('prefetch_buffer_size'), maximum_features_length=self._config['train'].get('maximum_features_length'), maximum_labels_length=self._config['train'].get('maximum_labels_length'))",
                    "possible_values": []
                },
                "max_steps": {
                    "value": "self._config['train'].get('train_steps')",
                    "possible_values": []
                },
                "hooks": {
                    "value": "train_hooks",
                    "possible_values": [
                        [
                            "[hooks.LogParametersCountHook(), hooks.CountersHook(every_n_steps=self._estimator.config.save_summary_steps, output_dir=self._estimator.model_dir)]",
                            "List"
                        ]
                    ]
                }
            },
            "EvalSpec_127": {
                "variable": {
                    "value": "eval_spec",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "self._model.input_fn(tf.estimator.ModeKeys.EVAL, self._config['eval'].get('batch_size', 32), self._config['data'], self._config['data']['eval_features_file'], num_threads=self._config['eval'].get('num_threads'), prefetch_buffer_size=self._config['eval'].get('prefetch_buffer_size'), labels_file=self._config['data']['eval_labels_file'])",
                    "possible_values": []
                },
                "steps": {
                    "value": "None",
                    "possible_values": []
                },
                "hooks": {
                    "value": "eval_hooks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "exporters": {
                    "value": "_make_exporters(self._config['eval'].get('exporters', 'last'), self._model.serving_input_fn(self._config['data']))",
                    "possible_values": []
                },
                "throttle_secs": {
                    "value": "self._config['eval'].get('eval_delay', 18000)",
                    "possible_values": []
                }
            },
            "train_and_evaluate_148": {
                "estimator": {
                    "value": "self._estimator",
                    "possible_values": []
                },
                "train_spec": {
                    "value": "train_spec",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=self._model.input_fn(tf.estimator.ModeKeys.TRAIN, self._config['train']['batch_size'], self._config['data'], self._config['data']['train_features_file'], labels_file=self._config['data']['train_labels_file'], batch_type=self._config['train'].get('batch_type', 'examples'), batch_multiplier=self._num_devices, bucket_width=self._config['train'].get('bucket_width', 5), single_pass=self._config['train'].get('single_pass', False), num_threads=self._config['train'].get('num_threads'), sample_buffer_size=self._config['train'].get('sample_buffer_size', 500000), prefetch_buffer_size=self._config['train'].get('prefetch_buffer_size'), maximum_features_length=self._config['train'].get('maximum_features_length'), maximum_labels_length=self._config['train'].get('maximum_labels_length')), max_steps=self._config['train'].get('train_steps'), hooks=train_hooks)",
                            "Call"
                        ],
                        [
                            "self._build_train_spec()",
                            "Call"
                        ],
                        [
                            "self._build_train_spec()",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=self._model.input_fn(tf.estimator.ModeKeys.EVAL, self._config['eval'].get('batch_size', 32), self._config['data'], self._config['data']['eval_features_file'], num_threads=self._config['eval'].get('num_threads'), prefetch_buffer_size=self._config['eval'].get('prefetch_buffer_size'), labels_file=self._config['data']['eval_labels_file']), steps=None, hooks=eval_hooks, exporters=_make_exporters(self._config['eval'].get('exporters', 'last'), self._model.serving_input_fn(self._config['data'])), throttle_secs=self._config['eval'].get('eval_delay', 18000))",
                            "Call"
                        ],
                        [
                            "self._build_eval_spec()",
                            "Call"
                        ],
                        [
                            "self._build_eval_spec()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_161": {
                "variable": {
                    "value": "checkpoint_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._estimator.model_dir)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_219": {
                "variable": {
                    "value": "checkpoint_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._estimator.model_dir)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_258": {
                "variable": {
                    "value": "checkpoint_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._estimator.model_dir)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_293": {
                "variable": {
                    "value": "checkpoint_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._estimator.model_dir",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_321": {
                "variable": {
                    "value": "cross_entropy",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels['ids_out']",
                    "possible_values": []
                }
            },
            "sequence_mask_323": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "lengths": {
                    "value": "labels['length']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cross_entropy.dtype",
                    "possible_values": []
                }
            },
            "latest_checkpoint_295": {
                "variable": {
                    "value": "checkpoint_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._estimator.model_dir)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Graph_311": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "create_global_step_312": {
                "graph": {
                    "value": "g",
                    "possible_values": []
                }
            },
            "GPUOptions_47": {
                "allow_growth": {
                    "value": "gpu_allow_growth",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "self._model.name",
                    "possible_values": []
                }
            },
            "reduce_sum_325": {
                "input_tensor": {
                    "value": "masked_cross_entropy",
                    "possible_values": [
                        [
                            "cross_entropy * weights",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_326": {
                "x": {
                    "value": "labels['length']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cross_entropy.dtype",
                    "possible_values": []
                }
            },
            "MonitoredSession_333": {
                "session_creator": {
                    "value": "tf.train.ChiefSessionCreator(checkpoint_filename_with_path=checkpoint_path, config=self._estimator.config.session_config)",
                    "possible_values": []
                }
            },
            "LatestExporter_354": {
                "name": {
                    "value": "latest",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "serving_input_fn",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_334": {
                "checkpoint_filename_with_path": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._estimator.model_dir)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "config": {
                    "value": "self._estimator.config.session_config",
                    "possible_values": []
                }
            },
            "as_bytes_342": {
                "bytes_or_text": {
                    "value": "fmt",
                    "possible_values": [
                        [
                            "'%f ||| %s' % (batch['score'], sentence)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/tests/bridge_test.py": {
        "tensorflow": {
            "MultiRNNCell_7": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.contrib.rnn.LSTMCell(num_units) for _ in range(num_layers)]",
                    "possible_values": []
                }
            },
            "main_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LSTMCell_8": {
                "units": {
                    "value": "num_units",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/config_test.py": {
        "tensorflow": {
            "main_60": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_bytes_19": {
                "bytes_or_text": {
                    "value": "yaml.dump(config1)",
                    "possible_values": []
                }
            },
            "as_bytes_21": {
                "bytes_or_text": {
                    "value": "yaml.dump(config2)",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/data_test.py": {
        "tensorflow": {
            "range_10": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "range_28": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "maximum_98": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_int32(1)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_int32(features)",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_int32(1)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_int32(labels)",
                    "possible_values": []
                }
            },
            "main_149": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "to_int32_98": {
                "x": {
                    "value": "features",
                    "possible_values": [
                        [
                            "tf.random_normal([num_examples], mean=12, stddev=6, seed=42)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.to_int32(1), tf.to_int32(features))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_99": {
                "x": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "features + labels_diff",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(tf.to_int32(1), tf.to_int32(labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_51": {
                "value": {
                    "value": "features_length",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "labels_length",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/decoder_test.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "value": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "large_step",
                    "possible_values": []
                },
                "value": {
                    "value": "1000",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "placeholder_with_default_52": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, time_dim, depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_59": {
                "variable": {
                    "value": "memory",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, memory_time, depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_103": {
                "variable": {
                    "value": "start_tokens",
                    "possible_values": []
                },
                "input": {
                    "value": "[1] * batch_size",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "placeholder_with_default_106": {
                "variable": {
                    "value": "memory",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, memory_time, depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_109": {
                "variable": {
                    "value": "memory_sequence_length",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_sequence_length",
                    "possible_values": [
                        [
                            "[3, 7, 5, 4]",
                            "List"
                        ],
                        [
                            "[3, 7, 5, 4]",
                            "List"
                        ],
                        [
                            "tf.placeholder_with_default(memory_sequence_length, shape=[None])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "placeholder_with_default_110": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(vocab_size, depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(vocab_size, depth)",
                    "possible_values": []
                }
            },
            "main_212": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "decode_fn(embedding, start_tokens, end_token, vocab_size=vocab_size, maximum_iterations=10, memory=memory, memory_sequence_length=memory_sequence_length, **additional_kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_144": {
                "input": {
                    "value": "ids",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/encoder_test.py": {
        "tensorflow": {
            "placeholder_with_default_10": {
                "input": {
                    "value": "np.random.randn(batch_size, max(sequence_length), depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth)",
                    "possible_values": []
                }
            },
            "main_216": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_24": {
                "value": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_39": {
                "value": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_169": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_182": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "dense_193": {
                "inputs": {
                    "value": "x",
                    "possible_values": []
                },
                "units": {
                    "value": "outputs_size",
                    "possible_values": []
                }
            },
            "global_variables_initializer_200": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "dense_180": {
                "inputs": {
                    "value": "x",
                    "possible_values": []
                },
                "units": {
                    "value": "15",
                    "possible_values": []
                }
            },
            "dense_190": {
                "inputs": {
                    "value": "x",
                    "possible_values": []
                },
                "units": {
                    "value": "s",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/tests/evaluator_test.py": {
        "tensorflow": {
            "main_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/hooks_test.py": {
        "tensorflow": {
            "placeholder_9": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "get_collection_11": {
                "variable": {
                    "value": "sum_a",
                    "possible_values": []
                },
                "key": {
                    "value": "hooks._DEFAULT_COUNTERS_COLLECTION",
                    "possible_values": []
                }
            },
            "main_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/inputter_test.py": {
        "tensorflow": {
            "placeholder_with_default_75": {
                "variable": {
                    "value": "tokens",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(tokens, shape=[None])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TFRecordWriter_369": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "path": {
                    "value": "record_file",
                    "possible_values": [
                        [
                            "os.path.join(self.get_temp_dir(), 'data.records')",
                            "Call"
                        ]
                    ]
                }
            },
            "main_388": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size + num_oov_buckets, 4]",
                    "possible_values": []
                }
            },
            "add_to_collection_164": {
                "name": {
                    "value": "tf.GraphKeys.TABLE_INITIALIZERS",
                    "possible_values": []
                },
                "value": {
                    "value": "iterator.initializer",
                    "possible_values": []
                }
            },
            "as_bytes_74": {
                "bytes_or_text": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "tables_initializer_197": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_198": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tables_initializer_232": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_233": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tables_initializer_259": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_260": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tables_initializer_289": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_290": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tables_initializer_323": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_324": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tables_initializer_360": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_361": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tables_initializer_380": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_bytes_33": {
                "bytes_or_text": {
                    "value": "'%d\\n' % i",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/optim_test.py": {
        "tensorflow": {
            "placeholder_with_default_11": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(64, 128).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 128)",
                    "possible_values": []
                }
            },
            "dense_13": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(np.random.randn(64, 128).astype(np.float32), shape=(None, 128))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 256)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 128)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "dense_14": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(np.random.randn(64, 128).astype(np.float32), shape=(None, 128))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 256)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 128)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "main_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_10": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_default_graph_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/position_test.py": {
        "tensorflow": {
            "constant_9": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 6]",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 6]",
                    "possible_values": []
                }
            },
            "main_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/reducer_test.py": {
        "tensorflow": {
            "main_318": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_15": {
                "value": {
                    "value": "length",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_28": {
                "value": {
                    "value": "length",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_41": {
                "value": {
                    "value": "length",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_59": {
                "value": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "[[[1], [-1], [-1]], [[1], [2], [3]], [[1], [2], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [-1], [-1], [-1]], [[1], [2], [3], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[1, 2, 3, 0, 0, 6, 0], [1, 2, 3, 4, 0, 0, 0], [1, 0, 0, 0, 0, 0, 7]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "[1, 3, 2]",
                            "List"
                        ],
                        [
                            "[1, 3, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_61": {
                "value": {
                    "value": "max_lengths",
                    "possible_values": [
                        [
                            "[4, 5, 2]",
                            "List"
                        ],
                        [
                            "[4, 5, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_84": {
                "value": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "[[[1], [-1], [-1]], [[1], [2], [3]], [[1], [2], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [-1], [-1], [-1]], [[1], [2], [3], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[1, 2, 3, 0, 0, 6, 0], [1, 2, 3, 4, 0, 0, 0], [1, 0, 0, 0, 0, 0, 7]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "[1, 3, 2]",
                            "List"
                        ],
                        [
                            "[1, 3, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_86": {
                "value": {
                    "value": "max_lengths",
                    "possible_values": [
                        [
                            "[4, 5, 2]",
                            "List"
                        ],
                        [
                            "[4, 5, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_117": {
                "value": {
                    "value": "b",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_118": {
                "value": {
                    "value": "length_b",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_148": {
                "value": {
                    "value": "b",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_149": {
                "value": {
                    "value": "length_b",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_191": {
                "value": {
                    "value": "b",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_192": {
                "value": {
                    "value": "length_b",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_216": {
                "value": {
                    "value": "b",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_217": {
                "value": {
                    "value": "length_b",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_241": {
                "value": {
                    "value": "b",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_242": {
                "value": {
                    "value": "length_b",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_268": {
                "value": {
                    "value": "b",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_269": {
                "value": {
                    "value": "length_b",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_295": {
                "value": {
                    "value": "b",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_296": {
                "value": {
                    "value": "length_b",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/tests/sequence_classifier_test.py": {
        "tensorflow": {
            "placeholder_with_default_14": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, max(sequence_length), input_depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, input_depth)",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "variable": {
                    "value": "abs_sum",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(encoding)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "main_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "abs_21": {
                "x": {
                    "value": "encoding",
                    "possible_values": [
                        [
                            "sequence_classifier.last_encoding_from_state(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/sequence_tagger_test.py": {
        "tensorflow": {
            "true_positives_19": {
                "variable": {
                    "value": "(_, true_positives)",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_flags",
                    "possible_values": []
                }
            },
            "false_positives_20": {
                "variable": {
                    "value": "(_, false_positives)",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_flags",
                    "possible_values": []
                }
            },
            "false_negatives_21": {
                "variable": {
                    "value": "(_, false_negatives)",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_flags",
                    "possible_values": []
                }
            },
            "main_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "local_variables_initializer_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_bytes_16": {
                "bytes_or_text": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "as_bytes_17": {
                "bytes_or_text": {
                    "value": "c",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/sequence_to_sequence_test.py": {
        "tensorflow": {
            "main_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/tokenizer_test.py": {
        "tensorflow": {
            "constant_12": {
                "variable": {
                    "value": "text",
                    "possible_values": []
                },
                "value": {
                    "value": "text",
                    "possible_values": [
                        [
                            "tf.constant(text)",
                            "Call"
                        ],
                        [
                            "tokenizer.detokenize(tokens)",
                            "Call"
                        ],
                        [
                            "sess.run(text)",
                            "Call"
                        ],
                        [
                            "tokenizer.detokenize(tokens, sequence_length=sequence_length)",
                            "Call"
                        ],
                        [
                            "sess.run(text)",
                            "Call"
                        ],
                        [
                            "tokenizer.detokenize(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_28": {
                "variable": {
                    "value": "ref_text",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "ref_text",
                    "possible_values": [
                        [
                            "tf.compat.as_bytes(ref_text)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_bytes(t) for t in ref_text]",
                            "ListComp"
                        ],
                        [
                            "tf.compat.as_text(ref_text)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_29": {
                "variable": {
                    "value": "tokens",
                    "possible_values": []
                },
                "value": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "sess.run(tokens)",
                            "Call"
                        ],
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tok + [''] * (max_length - len(tok)) for tok in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "constant_40": {
                "variable": {
                    "value": "tokens",
                    "possible_values": []
                },
                "value": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "sess.run(tokens)",
                            "Call"
                        ],
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tok + [''] * (max_length - len(tok)) for tok in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "constant_41": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "value": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "[len(x) for x in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_49": {
                "variable": {
                    "value": "ref_text",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "ref_text",
                    "possible_values": [
                        [
                            "tf.compat.as_bytes(ref_text)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_bytes(t) for t in ref_text]",
                            "ListComp"
                        ],
                        [
                            "tf.compat.as_text(ref_text)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_bytes_11": {
                "bytes_or_text": {
                    "value": "token",
                    "possible_values": []
                }
            },
            "as_text_19": {
                "bytes_or_text": {
                    "value": "token",
                    "possible_values": []
                }
            },
            "as_bytes_36": {
                "bytes_or_text": {
                    "value": "t",
                    "possible_values": []
                }
            },
            "as_text_48": {
                "bytes_or_text": {
                    "value": "token",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/transformer_test.py": {
        "tensorflow": {
            "placeholder_with_default_150": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, max(length), depth * num_heads).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth * num_heads)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_169": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, num_heads, max(length), depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_heads, None, depth)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_187": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, max(length), depth * num_heads).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth * num_heads)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_204": {
                "variable": {
                    "value": "queries",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, num_heads, max(queries_length), depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_heads, None, depth)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_207": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, num_heads, max(values_length), depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_heads, None, depth)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_239": {
                "variable": {
                    "value": "queries",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, num_heads, max(queries_length), depth).astype(np.float32)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_heads, None, depth)",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                    "possible_values": []
                }
            },
            "constant_285": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "TensorArray_286": {
                "variable": {
                    "value": "aa_ta",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.shape(x)[1]",
                    "possible_values": []
                }
            },
            "while_loop_295": {
                "variable": {
                    "value": "(_, aa_ta, _)",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(step, aa_ta, cache)",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(tf.TensorShape([]), tf.TensorShape(None), {'prev_g': tf.TensorShape([None, None, depth])})",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_304": {
                "variable": {
                    "value": "aa",
                    "possible_values": []
                },
                "a": {
                    "value": "aa_ta.stack()",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "main_312": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_25": {
                "value": {
                    "value": "length",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_44": {
                "value": {
                    "value": "length",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_70": {
                "value": {
                    "value": "length",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_100": {
                "value": {
                    "value": "length",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_118": {
                "value": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_138": {
                "value": {
                    "value": "sequence_length",
                    "possible_values": [
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_267": {
                "value": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "[3, 4]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_282": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                            "List"
                        ],
                        [
                            "tf.constant([[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_287": {
                "shape": {
                    "value": "[batch_size, 1, depth]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "shape_286": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                            "List"
                        ],
                        [
                            "tf.constant([[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_290": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                            "List"
                        ],
                        [
                            "tf.constant([[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_293": {
                "input": {
                    "value": "aa",
                    "possible_values": [
                        [
                            "transformer.cumulative_average(x, mask)",
                            "Call"
                        ],
                        [
                            "sess.run(aa)",
                            "Call"
                        ],
                        [
                            "tf.transpose(aa_ta.stack(), perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "sess.run(aa)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average(x[:, i:i + 1], i, cache)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "TensorShape_300": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_301": {
                "dims": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "TensorShape_302": {
                "dims": {
                    "value": "[None, None, depth]",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tests/vocab_test.py": {
        "tensorflow": {
            "main_77": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tokenizers/opennmt_tokenizer.py": {
        "tensorflow": {
            "as_bytes_55": {
                "variable": {
                    "value": "text",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "text",
                    "possible_values": [
                        [
                            "tf.compat.as_bytes(text)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_25": {
                "variable": {
                    "value": "value",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "value",
                    "possible_values": [
                        [
                            "config[key]",
                            "Subscript"
                        ],
                        [
                            "tf.compat.as_bytes(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_62": {
                "bytes_or_text": {
                    "value": "token",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/tokenizers/tokenizer.py": {
        "tensorflow": {
            "py_func_150": {
                "variable": {
                    "value": "text",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x)))",
                    "possible_values": []
                },
                "inp": {
                    "value": "[text]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "x": {
                    "value": "text",
                    "possible_values": [
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "tf.py_func(lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x))), [text], tf.string)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_101": {
                "variable": {
                    "value": "text",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "text",
                    "possible_values": [
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "tf.py_func(lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x))), [text], tf.string)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_124": {
                "x": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "self.tokenize(line)",
                            "Call"
                        ],
                        [
                            "line.strip().split(delimiter)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.string_split([text], delimiter='\\x00').values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "py_func_167": {
                "func": {
                    "value": "self.detokenize",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tokens]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "map_fn_181": {
                "fn": {
                    "value": "lambda x: self._detokenize_tensor(x[0][:x[1]])",
                    "possible_values": []
                },
                "elems": {
                    "value": "(tokens, sequence_length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reduce_join_221": {
                "inputs": {
                    "value": "tokens",
                    "possible_values": [
                        [
                            "self.tokenize(line)",
                            "Call"
                        ],
                        [
                            "line.strip().split(delimiter)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.string_split([text], delimiter='\\x00').values",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "separator": {
                    "value": " ",
                    "possible_values": []
                }
            },
            "string_split_152": {
                "source": {
                    "value": "[text]",
                    "possible_values": []
                },
                "delimiter": {
                    "value": "\\x00",
                    "possible_values": []
                }
            },
            "string_split_218": {
                "source": {
                    "value": "[text]",
                    "possible_values": []
                },
                "delimiter": {
                    "value": " ",
                    "possible_values": []
                }
            },
            "as_bytes_66": {
                "bytes_or_text": {
                    "value": "merged_tokens",
                    "possible_values": [
                        [
                            "delimiter.join(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_79": {
                "bytes_or_text": {
                    "value": "string",
                    "possible_values": [
                        [
                            "self.detokenize(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_135": {
                "bytes_or_text": {
                    "value": "token",
                    "possible_values": []
                }
            },
            "as_bytes_151": {
                "bytes_or_text": {
                    "value": "'\\x00'.join(self.tokenize(x))",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/beam_search.py": {
        "tensorflow": {
            "convert_to_tensor_38": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_45": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_97": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "batch_pos",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "possible_values": [
                        [
                            "tf.range(batch_size * beam_size) // beam_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, beam_size])",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size)",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size * 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "possible_values": []
                }
            },
            "top_k_176": {
                "variable": {
                    "value": "(_, topk_indexes)",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_size",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "top_coordinates",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_indexes]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "constant_262": {
                "variable": {
                    "value": "initial_log_probs",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [-float('inf')] * (beam_size - 1)]",
                    "possible_values": []
                }
            },
            "tile_264": {
                "variable": {
                    "value": "alive_log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_log_probs",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [-float('inf')] * (beam_size - 1)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_268": {
                "variable": {
                    "value": "alive_seq",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "finished_seq",
                    "possible_values": []
                },
                "shape": {
                    "value": "_shape_list(alive_seq)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "finished_flags",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "while_loop_541": {
                "variable": {
                    "value": "(_, alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, _)",
                    "possible_values": []
                },
                "cond": {
                    "value": "_is_finished",
                    "possible_values": []
                },
                "body": {
                    "value": "inner_loop",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states]",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)]",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "where_567": {
                "variable": {
                    "value": "finished_seq",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_seq",
                    "possible_values": [
                        [
                            "tf.zeros(_shape_list(alive_seq), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_seq, alive_seq)",
                            "Call"
                        ],
                        [
                            "tf.concat([finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seq",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_569": {
                "variable": {
                    "value": "finished_scores",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_scores",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_log_probs",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "possible_values": [
                        [
                            "[batch_size] + [beam_size] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_101": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_109": {
                "dims": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_198": {
                "variable": {
                    "value": "topk_gathered_states",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: _gather(state, '_topk_states')",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states_to_gather",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_270": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: _expand_to_beam_size(state, beam_size)",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_307": {
                "variable": {
                    "value": "finished_seq",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_315": {
                "variable": {
                    "value": "curr_finished_seq",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, curr_seq]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_316": {
                "variable": {
                    "value": "curr_finished_scores",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_scores, curr_scores]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_317": {
                "variable": {
                    "value": "curr_finished_flags",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_flags, curr_finished]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_374": {
                "variable": {
                    "value": "flat_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alive_seq",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * beam_size, -1]",
                    "possible_values": []
                }
            },
            "reshape_385": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_logits",
                    "possible_values": [
                        [
                            "symbols_to_logits_fn(flat_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size, -1]",
                    "possible_values": []
                }
            },
            "pow_394": {
                "variable": {
                    "value": "length_penalty",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(i + 1)) / 6.0",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "variable": {
                    "value": "flat_curr_scores",
                    "possible_values": []
                },
                "tensor": {
                    "value": "curr_scores",
                    "possible_values": [
                        [
                            "curr_scores + tf.to_float(curr_finished) * -INF",
                            "BinOp"
                        ],
                        [
                            "log_probs / length_penalty",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, beam_size * vocab_size]",
                    "possible_values": []
                }
            },
            "top_k_400": {
                "variable": {
                    "value": "(topk_scores, topk_ids)",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_curr_scores",
                    "possible_values": [
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size * 2",
                    "possible_values": []
                }
            },
            "stack_418": {
                "variable": {
                    "value": "topk_coordinates",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_beam_index]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "gather_nd_422": {
                "variable": {
                    "value": "topk_seq",
                    "possible_values": []
                },
                "params": {
                    "value": "alive_seq",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_coordinates",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_428": {
                "variable": {
                    "value": "topk_seq",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, tf.expand_dims(topk_ids, axis=2)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "equal_430": {
                "variable": {
                    "value": "topk_finished",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_ids",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "possible_values": [
                        [
                            "EOS_ID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_516": {
                "variable": {
                    "value": "max_length_penalty",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(decode_length)) / 6.0",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "possible_values": []
                }
            },
            "reduce_min_524": {
                "variable": {
                    "value": "lowest_score_of_finished_in_finished",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores * tf.to_float(finished_in_finished)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_all_533": {
                "variable": {
                    "value": "bound_is_met",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(lowest_score_of_finished_in_finished, lower_bound_alive_scores)",
                    "possible_values": []
                }
            },
            "shape_42": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_118": {
                "input_tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.reshape(flat_logits, [batch_size, beam_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "gather_nd_193": {
                "params": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_coordinates",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_indexes], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix + name",
                    "possible_values": []
                }
            },
            "ones_280": {
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "possible_values": []
                }
            },
            "map_structure_378": {
                "variable": {
                    "value": "flat_states",
                    "possible_values": []
                },
                "func": {
                    "value": "_merge_beam_dim",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_380": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _unmerge_beam_dim(t, batch_size, beam_size)",
                    "possible_values": []
                },
                "*structure": {
                    "value": "flat_states",
                    "possible_values": [
                        [
                            "nest.map_structure(_merge_beam_dim, states)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_424": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: tf.gather_nd(state, topk_coordinates)",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_and_537": {
                "x": {
                    "value": "tf.less(i, decode_length)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(bound_is_met)",
                    "possible_values": []
                }
            },
            "reduce_any_568": {
                "input_tensor": {
                    "value": "finished_flags",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_any_570": {
                "input_tensor": {
                    "value": "finished_flags",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "to_float_342": {
                "x": {
                    "value": "curr_finished",
                    "possible_values": []
                }
            },
            "expand_dims_392": {
                "input": {
                    "value": "alive_log_probs",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "less_515": {
                "x": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(1, len(shape) - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "decode_length",
                    "possible_values": []
                }
            },
            "greater_534": {
                "x": {
                    "value": "lowest_score_of_finished_in_finished",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores * tf.to_float(finished_in_finished), axis=1)",
                            "Call"
                        ],
                        [
                            "lowest_score_of_finished_in_finished + (1.0 - tf.to_float(tf.reduce_any(finished_in_finished, 1))) * -INF",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound_alive_scores",
                    "possible_values": [
                        [
                            "alive_log_probs[:, 0] / max_length_penalty",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_538": {
                "x": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(1, len(shape) - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "decode_length",
                    "possible_values": []
                }
            },
            "logical_not_538": {
                "x": {
                    "value": "bound_is_met",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.greater(lowest_score_of_finished_in_finished, lower_bound_alive_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_544": {
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "to_float_313": {
                "x": {
                    "value": "curr_finished",
                    "possible_values": []
                }
            },
            "expand_dims_428": {
                "input": {
                    "value": "topk_ids",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "to_float_525": {
                "x": {
                    "value": "finished_in_finished",
                    "possible_values": []
                }
            },
            "to_float_531": {
                "x": {
                    "value": "tf.reduce_any(finished_in_finished, 1)",
                    "possible_values": []
                }
            },
            "TensorShape_548": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_549": {
                "dims": {
                    "value": "[None, None, None]",
                    "possible_values": []
                }
            },
            "TensorShape_551": {
                "dims": {
                    "value": "[None, None, None]",
                    "possible_values": []
                }
            },
            "map_structure_554": {
                "func": {
                    "value": "get_state_shape_invariants",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_394": {
                "x": {
                    "value": "i + 1",
                    "possible_values": []
                }
            },
            "gather_nd_425": {
                "params": {
                    "value": "state",
                    "possible_values": []
                },
                "indices": {
                    "value": "topk_coordinates",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_516": {
                "x": {
                    "value": "decode_length",
                    "possible_values": []
                }
            },
            "reduce_any_531": {
                "input_tensor": {
                    "value": "finished_in_finished",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/cell.py": {
        "tensorflow": {
            "DropoutWrapper_54": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "possible_values": [
                        [
                            "cell_class(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.seq2seq.AttentionWrapper(cell, attention_mechanisms[attention_layers.index(l)], attention_layer_size=num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "possible_values": []
                }
            },
            "ResidualWrapper_56": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "possible_values": [
                        [
                            "cell_class(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.seq2seq.AttentionWrapper(cell, attention_mechanisms[attention_layers.index(l)], attention_layer_size=num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_62": {
                "cells": {
                    "value": "cells",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/utils/checkpoint.py": {
        "tensorflow": {
            "list_variables_53": {
                "variable": {
                    "value": "var_list",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoints_path[0]",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(latest_step, dtype=tf.int64)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "possible_values": []
                }
            },
            "info_50": {
                "msg": {
                    "value": "'Averaging %d checkpoints...' % num_checkpoints",
                    "possible_values": []
                }
            },
            "info_51": {
                "msg": {
                    "value": "Listing variables...",
                    "possible_values": []
                }
            },
            "load_checkpoint_61": {
                "variable": {
                    "value": "reader",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "checkpoints_path",
                            "Name"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_45": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "possible_values": []
                }
            },
            "info_60": {
                "msg": {
                    "value": "'Loading checkpoint %s' % checkpoint_path",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "dtype": {
                    "value": "v.dtype",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "possible_values": []
                }
            },
            "assign_72": {
                "ref": {
                    "value": "v",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "global_variables_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_82": {
                "config": {
                    "value": "session_config",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_86": {
                "msg": {
                    "value": "'Saving averaged checkpoint to %s-%d' % (out_base_file, latest_step)",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "latest_step",
                    "possible_values": [
                        [
                            "int(checkpoints_path[-1].split('-')[-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "global_variables_initializer_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "avg_values",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "value.shape",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "avg_values",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "value.shape",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/data.py": {
        "tensorflow": {
            "map_structure_17": {
                "func": {
                    "value": "lambda shape: shape.as_list()",
                    "possible_values": []
                },
                "*structure": {
                    "value": "dataset.output_shapes",
                    "possible_values": []
                }
            },
            "flatten_33": {
                "variable": {
                    "value": "flat",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "constant_178": {
                "variable": {
                    "value": "bucket_id",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "equal_35": {
                "x": {
                    "value": "tf.mod(batch_size, multiple)",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_all_100": {
                "input_tensor": {
                    "value": "cond",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "maximum_180": {
                "variable": {
                    "value": "bucket_id",
                    "possible_values": []
                },
                "x": {
                    "value": "bucket_id",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, features_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, labels_length // bucket_width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "features_length // bucket_width",
                    "possible_values": []
                }
            },
            "maximum_182": {
                "variable": {
                    "value": "bucket_id",
                    "possible_values": []
                },
                "x": {
                    "value": "bucket_id",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, features_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, labels_length // bucket_width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels_length // bucket_width",
                    "possible_values": []
                }
            },
            "to_int64_183": {
                "x": {
                    "value": "bucket_id",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, features_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, labels_length // bucket_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int64_195": {
                "x": {
                    "value": "tf.maximum(size, batch_multiplier)",
                    "possible_values": []
                }
            },
            "group_by_window_201": {
                "key_func": {
                    "value": "_key_func",
                    "possible_values": []
                },
                "reduce_func": {
                    "value": "_reduce_func",
                    "possible_values": []
                },
                "window_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "tf.shape(flat[0])[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size * batch_multiplier",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "flat[0]",
                    "possible_values": []
                }
            },
            "mod_35": {
                "x1": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "tf.shape(flat[0])[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size * batch_multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "multiple",
                    "possible_values": []
                }
            },
            "maximum_195": {
                "x": {
                    "value": "size",
                    "possible_values": [
                        [
                            "batch_size // (key * bucket_width)",
                            "BinOp"
                        ],
                        [
                            "size + batch_multiplier - size % batch_multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_multiplier",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_by_window_204": {
                "key_func": {
                    "value": "_key_func",
                    "possible_values": []
                },
                "reduce_func": {
                    "value": "_reduce_func",
                    "possible_values": []
                },
                "window_size_func": {
                    "value": "_window_size_func",
                    "possible_values": []
                }
            },
            "greater_87": {
                "x": {
                    "value": "l",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "less_equal_89": {
                "x": {
                    "value": "l",
                    "possible_values": []
                },
                "y": {
                    "value": "maxlen",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/decay.py": {
        "tensorflow": {
            "cast_32": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "x": {
                    "value": "decay_rate",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "warmup_steps",
                    "possible_values": []
                },
                "x": {
                    "value": "decay_steps",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "to_float_67": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "to_float_68": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "possible_values": []
                }
            },
            "to_float_69": {
                "variable": {
                    "value": "warmup_steps",
                    "possible_values": []
                },
                "x": {
                    "value": "decay_steps",
                    "possible_values": []
                }
            },
            "cast_33": {
                "x": {
                    "value": "global_step",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "minimum_39": {
                "x": {
                    "value": "tf.pow(step, -0.5)",
                    "possible_values": []
                },
                "y": {
                    "value": "step * tf.pow(warmup_steps, -1.5)",
                    "possible_values": []
                }
            },
            "rsqrt_71": {
                "x": {
                    "value": "tf.maximum(step, warmup_steps)",
                    "possible_values": []
                }
            },
            "pow_38": {
                "x": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "tf.cast(decay_rate, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-0.5",
                    "possible_values": []
                }
            },
            "pow_39": {
                "x": {
                    "value": "warmup_steps",
                    "possible_values": [
                        [
                            "tf.cast(decay_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(decay_steps)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1.5",
                    "possible_values": []
                }
            },
            "maximum_71": {
                "x": {
                    "value": "step",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.float32) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(global_step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "warmup_steps",
                    "possible_values": [
                        [
                            "tf.cast(decay_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(decay_steps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/utils/evaluator.py": {
        "tensorflow": {
            "Summary_42": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "possible_values": []
                }
            },
            "get_25": {
                "variable": {
                    "value": "self._summary_writer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "output_dir",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_52": {
                "msg": {
                    "value": "%s evaluation score: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.name()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self.score(self._labels_file, predictions_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_84": {
                "msg": {
                    "value": "Evaluation score: ROUGE-1 = %f; ROUGE-2 = %f; ROUGE-L = %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "score['rouge-1']",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "score['rouge-2']",
                    "possible_values": []
                }
            },
            "warning_108": {
                "msg": {
                    "value": "%s",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(e)",
                    "possible_values": []
                }
            },
            "warning_122": {
                "msg": {
                    "value": "'{} script returned non-zero exit code: {}'.format(bleu_script, msg)",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/hooks.py": {
        "tensorflow": {
            "cast_35": {
                "variable": {
                    "value": "count",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "total_count_init",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_init'",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "count.dtype",
                    "possible_values": []
                }
            },
            "assign_add_41": {
                "variable": {
                    "value": "total_count",
                    "possible_values": []
                },
                "ref": {
                    "value": "total_count_init",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=0, name=name + '_init', trainable=False, dtype=count.dtype)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "count",
                    "possible_values": [
                        [
                            "tf.cast(tensor, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "self._counters[i].name.split(':')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_45": {
                "name": {
                    "value": "_DEFAULT_COUNTERS_COLLECTION",
                    "possible_values": [
                        [
                            "'counters'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "total_count",
                    "possible_values": [
                        [
                            "tf.assign_add(total_count_init, count, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "SecondOrStepTimer_61": {
                "variable": {
                    "value": "self._timer",
                    "possible_values": []
                },
                "every_steps": {
                    "value": "every_n_steps",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "every_secs": {
                    "value": "every_n_secs",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_69": {
                "variable": {
                    "value": "self._counters",
                    "possible_values": []
                },
                "key": {
                    "value": "_DEFAULT_COUNTERS_COLLECTION",
                    "possible_values": [
                        [
                            "'counters'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_global_step_77": {
                "variable": {
                    "value": "self._global_step",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_global_step_157": {
                "variable": {
                    "value": "self._global_step",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_18": {
                "msg": {
                    "value": "Number of trainable parameters: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "misc.count_parameters()",
                    "possible_values": []
                }
            },
            "get_74": {
                "variable": {
                    "value": "self._summary_writer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "self._output_dir",
                    "possible_values": []
                }
            },
            "SessionRunArgs_84": {
                "fetches": {
                    "value": "[self._counters, self._global_step]",
                    "possible_values": []
                }
            },
            "SessionRunArgs_116": {
                "fetches": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "run_context.original_args.fetches",
                            "Attribute"
                        ],
                        [
                            "run_values.results",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_130": {
                "msg": {
                    "value": "Total prediction time (s): %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._total_time",
                    "possible_values": []
                }
            },
            "info_131": {
                "msg": {
                    "value": "Average prediction time (s): %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._total_time / self._total_examples",
                    "possible_values": []
                }
            },
            "SessionRunArgs_162": {
                "fetches": {
                    "value": "[self._predictions, self._global_step]",
                    "possible_values": []
                }
            },
            "info_172": {
                "msg": {
                    "value": "Evaluation predictions saved to %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._output_path",
                    "possible_values": []
                }
            },
            "info_133": {
                "msg": {
                    "value": "Tokens per second: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._total_tokens / self._total_time",
                    "possible_values": []
                }
            },
            "Summary_99": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=name, simple_value=value)]",
                    "possible_values": []
                }
            },
            "info_101": {
                "msg": {
                    "value": "%s: %g",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "possible_values": [
                        [
                            "self._counters[i].name.split(':')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "value",
                    "possible_values": [
                        [
                            "(counters[i] - self._last_count[i]) / elapsed_time",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/utils/losses.py": {
        "tensorflow": {
            "constant_7": {
                "variable": {
                    "value": "label_smoothing",
                    "possible_values": []
                },
                "value": {
                    "value": "label_smoothing",
                    "possible_values": [
                        [
                            "tf.constant(label_smoothing, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "possible_values": []
                }
            },
            "sequence_mask_55": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "possible_values": [
                        [
                            "tf.shape(logits)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cross_entropy.dtype",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy * weights",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "loss_token_normalizer",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=max_time, dtype=cross_entropy.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "possible_values": [
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, mode)",
                            "Call"
                        ],
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_84": {
                "variable": {
                    "value": "loss_normalizer",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(cross_entropy)[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "loss.dtype",
                    "possible_values": []
                }
            },
            "one_hot_9": {
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "tf.shape(logits)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1.0 - label_smoothing",
                    "possible_values": []
                },
                "off_value": {
                    "value": "label_smoothing / tf.cast(num_classes - 1, label_smoothing.dtype)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "loss_normalizer",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "tf.shape(logits)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loss.dtype",
                    "possible_values": []
                }
            },
            "shape_8": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_10": {
                "x": {
                    "value": "labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_29": {
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_52": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_84": {
                "input": {
                    "value": "cross_entropy",
                    "possible_values": [
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, mode)",
                            "Call"
                        ],
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_13": {
                "x": {
                    "value": "num_classes - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label_smoothing.dtype",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/misc.py": {
        "tensorflow": {
            "get_collection_140": {
                "variable": {
                    "value": "keys",
                    "possible_values": []
                },
                "key": {
                    "value": "key_collection",
                    "possible_values": [
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_141": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "key": {
                    "value": "value_collection",
                    "possible_values": [
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_65": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "add_to_collection_126": {
                "name": {
                    "value": "key_collection",
                    "possible_values": [
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "key",
                    "possible_values": []
                }
            },
            "add_to_collection_127": {
                "name": {
                    "value": "value_collection",
                    "possible_values": [
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "possible_values": [
                        [
                            "six.itervalues(tensors)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/opennmt/utils/optim.py": {
        "tensorflow": {
            "get_or_create_global_step_99": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "maximum_48": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step - start_decay_steps",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "div_49": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "possible_values": [
                        [
                            "tf.maximum(global_step - start_decay_steps, 0)",
                            "Call"
                        ],
                        [
                            "tf.div(step, decay_step_duration)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "decay_step_duration",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_57": {
                "variable": {
                    "value": "decayed_learning_rate",
                    "possible_values": []
                },
                "x": {
                    "value": "decayed_learning_rate",
                    "possible_values": [
                        [
                            "decay_op_name(learning_rate, step, decay_steps, decay_rate, staircase=staircase)",
                            "Call"
                        ],
                        [
                            "tf.maximum(decayed_learning_rate, minimum_learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minimum_learning_rate",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "trainable_variables_165": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/parallel.py": {
        "tensorflow": {
            "name_scope_172": {
                "name": {
                    "value": "split_inputs",
                    "possible_values": []
                }
            },
            "split_178": {
                "variable": {
                    "value": "data_shards",
                    "possible_values": []
                },
                "value": {
                    "value": "data",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_shards",
                    "possible_values": []
                }
            },
            "identity_121": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "last_device_v",
                    "possible_values": [
                        [
                            "cache[name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_124": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "var._ref()",
                    "possible_values": []
                }
            },
            "name_scope_139": {
                "name": {
                    "value": "'parallel_{}'.format(i)",
                    "possible_values": []
                }
            },
            "identity_128": {
                "input": {
                    "value": "v",
                    "possible_values": [
                        [
                            "tf.identity(last_device_v)",
                            "Call"
                        ],
                        [
                            "tf.identity(var._ref())",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_daisy_chain_getter",
                            "Name"
                        ]
                    ]
                }
            },
            "sparse_split_165": {
                "sp_input": {
                    "value": "tensor",
                    "possible_values": []
                },
                "num_split": {
                    "value": "num_shards",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_168": {
                "value": {
                    "value": "tensor",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_shards",
                    "possible_values": []
                }
            },
            "get_variable_scope_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_147": {
                "device_name": {
                    "value": "device",
                    "possible_values": []
                }
            }
        }
    },
    "Code/opennmt/utils/vocab.py": {
        "tensorflow": {
            "as_text_45": {
                "variable": {
                    "value": "line",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "line.strip()",
                    "possible_values": []
                }
            },
            "as_bytes_61": {
                "bytes_or_text": {
                    "value": "token",
                    "possible_values": [
                        [
                            "tokens",
                            "Name"
                        ],
                        [
                            "self._id_to_token",
                            "Attribute"
                        ],
                        [
                            "self._id_to_token[index]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}