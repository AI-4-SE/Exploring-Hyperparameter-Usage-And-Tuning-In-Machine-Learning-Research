{
    "src/base/data_set.py": {
        "sklearn": {
            "check_array_26": {
                "variable": {
                    "value": "self.X_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_array_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=False)",
                            "Call"
                        ],
                        [
                            "y if y.ndim == 2 else y.reshape((-1, 1))",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ensure_2d": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_consistent_length_28": {
                "*arrays_0": {
                    "value": "self.X_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_array_27": {
                "array": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(y, ensure_2d=False, force_all_finite=False)",
                            "Call"
                        ],
                        [
                            "y if y.ndim == 2 else y.reshape((-1, 1))",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/base/query_strategy.py": {
        "sklearn": {
            "check_random_state_34": {
                "variable": {
                    "value": "self.random_state_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "kwargs.pop('random_state', None)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/classifier/parzen_window_classifier.py": {
        "sklearn": {
            "check_random_state_59": {
                "variable": {
                    "value": "self.random_state_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_array_84": {
                "variable": {
                    "value": "self.X_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "check_array_85": {
                "variable": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluation/experimental_setup_csv.py": {
        "sklearn": {
            "train_test_split_88": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(test_ratio) if test_ratio < 1.0 else int(test_ratio)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed + 1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "OneHotEncoder_70": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_111": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_91": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(test_ratio) if test_ratio < 1.0 else int(test_ratio)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed + 1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "KernelRidge_164": {
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * bandwidth ** (-2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/query_strategies/active_learnig_with_cost_embedding.py": {
        "sklearn": {
            "NearestNeighbors_89": {
                "variable": {
                    "value": "self.nn_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_array_62": {
                "variable": {
                    "value": "self.C_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "array": {
                    "value": "self.C_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/query_strategies/expected_error_reduction.py": {
        "sklearn": {
            "check_array_78": {
                "array": {
                    "value": "self.S_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/query_strategies/expected_probabilistic_active_learning.py": {
        "sklearn": {
            "check_array_121": {
                "variable": {
                    "value": "K_c",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "K_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(K_c)",
                            "Call"
                        ],
                        [
                            "K_x[unlabeled_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "check_array_61": {
                "variable": {
                    "value": "self.S_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "array": {
                    "value": "kwargs.pop('S', np.eye(len(self.data_set_)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "check_array_126": {
                "array": {
                    "value": "K_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_c if K_x is None else check_array(K_x)",
                            "IfExp"
                        ],
                        [
                            "self.S_[:, labeled_indices] @ Z",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_array_132": {
                "array": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(n_candidate_samples) if S is None else check_array(S)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/query_strategies/mdsp.py": {
        "sklearn": {
            "check_symmetric_71": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_symmetric(similarities, raise_exception=True)",
                            "Call"
                        ],
                        [
                            "check_array(similarities)",
                            "Call"
                        ]
                    ]
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_random_state_74": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "IsotonicRegression_104": {
                "variable": {
                    "value": "ir",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_array_268": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_symmetric(similarities, raise_exception=True)",
                            "Call"
                        ],
                        [
                            "check_array(similarities)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_random_state_269": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "euclidean_distances_107": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_state.rand(n_samples * n_components)",
                            "Call"
                        ],
                        [
                            "X.reshape((n_samples, n_components))",
                            "Call"
                        ],
                        [
                            "init",
                            "variable"
                        ],
                        [
                            "np.dot(Vp, np.dot(_B, X))",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_array_433": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_state.rand(n_samples * n_components)",
                            "Call"
                        ],
                        [
                            "X.reshape((n_samples, n_components))",
                            "Call"
                        ],
                        [
                            "init",
                            "variable"
                        ],
                        [
                            "np.dot(Vp, np.dot(_B, X))",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "euclidean_distances_443": {
                "variable": {
                    "value": "self.dissimilarity_matrix_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_state.rand(n_samples * n_components)",
                            "Call"
                        ],
                        [
                            "X.reshape((n_samples, n_components))",
                            "Call"
                        ],
                        [
                            "init",
                            "variable"
                        ],
                        [
                            "np.dot(Vp, np.dot(_B, X))",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/query_strategies/optimal_sampling.py": {
        "sklearn": {
            "check_X_y_59": {
                "X": {
                    "value": "self.data_set_.X_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_array_50": {
                "array": {
                    "value": "self.S_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/query_strategies/probabilistic_active_learning.py": {
        "sklearn": {
            "check_array_76": {
                "variable": {
                    "value": "self.S_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "array": {
                    "value": "kwargs.pop('S', np.eye(len(self.data_set_)))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/query_strategies/query_by_committee.py": {
        "sklearn": {
            "check_random_state_109": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "BaggingClassifier_115": {
                "variable": {
                    "value": "bagging",
                    "type": "variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "max_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_state.choice(np.arange(np.ceil(n_features / 2), n_features))",
                            "Call"
                        ],
                        [
                            "int(max_features)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/data_functions.py": {
        "sklearn": {
            "LabelEncoder_49": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_X_y_52": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data_set[features], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "data_set.data",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set['y']",
                            "Subscript"
                        ],
                        [
                            "data_set.target",
                            "Attribute"
                        ],
                        [
                            "le.fit_transform(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "fetch_openml_45": {
                "variable": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": []
                },
                "data_id": {
                    "value": "data_set.at[idx, 'id']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/evaluation_functions.py": {
        "sklearn": {
            "accuracy_score_22": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "normalize": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/mathematical_functions.py": {
        "sklearn": {
            "pairwise_kernels_13": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(metric)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('gamma')",
                            "Call"
                        ],
                        [
                            "kwargs.pop('gamma')",
                            "Call"
                        ]
                    ]
                }
            },
            "pairwise_kernels_15": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(metric)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/mixture.py": {
        "sklearn": {
            "check_random_state_45": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}