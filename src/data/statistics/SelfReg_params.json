{
    "codes/model/resnet18_selfreg.py": {
        "torch": {
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_163": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_171": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_237": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.fc(feature)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_255": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.fc(feature)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_175": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_178": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_181": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codes/model/utils.py": {
        "torch": {}
    },
    "codes/utils.py": {
        "torch": {
            "zeros_like_53": {
                "variable": {
                    "value": "output_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "feat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.projection(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "output_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "feat_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.projection(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_164": {
                "variable": {
                    "value": "SelfReg_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_32": {
                "variable": {
                    "value": "(sorted_y, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_y",
                            "variable"
                        ],
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "y.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_33": {
                "variable": {
                    "value": "sorted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_x",
                            "variable"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + 'transfer_{}_{}.pth'.format(used_model, str(try_check).zfill(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + 'scratch_{}_{}.pth'.format(used_model, str(try_check).zfill(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_227": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_228": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_308": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_309": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randperm_60": {
                "n": {
                    "value": "end - ex",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_61": {
                "n": {
                    "value": "end - ex",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_264": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_267": {
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "domainbed_code/algorithms.py": {
        "torch": {
            "Linear_73": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.featurizer.n_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.featurizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "all_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for (x, y) in minibatches]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "all_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y for (x, y) in minibatches]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cross_entropy_84": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.predict(all_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "all_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([y for (x, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "torch.cat([y for (_, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "sorted_y",
                            "variable"
                        ]
                    ]
                }
            },
            "MSELoss_101": {
                "variable": {
                    "value": "self.MSEloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.cdpl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_feat_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "all_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for (x, y) in minibatches]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "all_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y for (_, y) in minibatches]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_149": {
                "variable": {
                    "value": "output_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "feat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cdpl(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "output_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "feat_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cdpl(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_174": {
                "variable": {
                    "value": "cl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([y for (x, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "torch.cat([y for (_, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "sorted_y",
                            "variable"
                        ]
                    ]
                }
            },
            "sort_127": {
                "variable": {
                    "value": "(sorted_y, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([y for (x, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "torch.cat([y for (_, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "sorted_y",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "sorted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x for (x, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "torch.cat([x for (x, y) in minibatches])",
                            "Call"
                        ],
                        [
                            "sorted_x",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "input_feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.featurizer.n_outputs",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_size if input_feat_size == 2048 else input_feat_size * 2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_107": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_size if input_feat_size == 2048 else input_feat_size * 2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_size if input_feat_size == 2048 else input_feat_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_size if input_feat_size == 2048 else input_feat_size * 2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_110": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_size if input_feat_size == 2048 else input_feat_size * 2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_size if input_feat_size == 2048 else input_feat_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.featurizer.n_outputs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm1d_113": {
                "num_features": {
                    "value": "input_feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.featurizer.n_outputs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_155": {
                "n": {
                    "value": "end - ex",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_156": {
                "n": {
                    "value": "end - ex",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}