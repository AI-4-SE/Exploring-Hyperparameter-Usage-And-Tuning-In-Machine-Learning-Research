{
    "DIP_UNET_models/common.py": {
        "torch": {
            "Conv2d_122": {
                "variable": {
                    "value": "convolver",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_f",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_f",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "to_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(input.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_70": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_119": {
                "variable": {
                    "value": "padder",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "to_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "inputs_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_106": {
                "variable": {
                    "value": "downsampler",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_82": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "variable": {
                    "value": "downsampler",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DIP_UNET_models/skip.py": {
        "torch": {
            "Sequential_41": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "deeper",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "skip",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "deeper_main",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_82": {
                "size": {
                    "value": "out_size",
                    "type": "Name",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsample_mode[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[upsample_mode] * n_scales",
                            "BinOp"
                        ],
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_84": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsample_mode[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[upsample_mode] * n_scales",
                            "BinOp"
                        ],
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/common/subsample.py": {
        "torch": {
            "from_numpy_89": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.reshape(*mask_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/common/test_subsample.py": {
        "torch": {
            "all_25": {
                "input": {
                    "value": "mask1 == mask2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_26": {
                "input": {
                    "value": "mask2 == mask3",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/data/mri_data.py": {
        "torch": {}
    },
    "DIP_UNET_models/unet_and_tv/data/test_transforms.py": {
        "torch": {
            "from_numpy_19": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float()",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float()",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float()",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input).float()",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "create_input(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ],
                        [
                            "np.arange(np.product(shape)).reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/data/transforms.py": {
        "torch": {
            "fft_65": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifft_84": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_115": {
                "input": {
                    "value": "(data ** 2).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_48": {
                "condition": {
                    "value": "mask == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/mri_model.py": {
        "torch": {
            "DistributedSampler_54": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SliceData(root=self.hparams.data_path / f'{self.hparams.challenge}_{data_partition}', transform=data_transform, sample_rate=sample_rate, challenge=self.hparams.challenge)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SliceData(root=self.hparams.data_path / f'{self.hparams.challenge}_{data_partition}', transform=data_transform, sample_rate=sample_rate, challenge=self.hparams.challenge)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/run_bart_val.py": {
        "torch": {
            "from_numpy_93": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.abs(pred[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_149": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/train_unet.py": {
        "torch": {
            "l1_loss_118": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forward(input)",
                            "Call"
                        ],
                        [
                            "self.forward(input)",
                            "Call"
                        ],
                        [
                            "self.forward(input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transforms.to_tensor(target)",
                            "Call"
                        ],
                        [
                            "transforms.center_crop(target, crop_size)",
                            "Call"
                        ],
                        [
                            "transforms.normalize(target, mean, std, eps=1e-11)",
                            "Call"
                        ],
                        [
                            "target.clamp(-6, 6)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_147": {
                "variable": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_148": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RMSprop(self.parameters(), lr=self.hparams.lr, weight_decay=self.hparams.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "self.hparams.lr_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.hparams.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_227": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "l1_loss_132": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forward(input)",
                            "Call"
                        ],
                        [
                            "self.forward(input)",
                            "Call"
                        ],
                        [
                            "self.forward(input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transforms.to_tensor(target)",
                            "Call"
                        ],
                        [
                            "transforms.center_crop(target, crop_size)",
                            "Call"
                        ],
                        [
                            "transforms.normalize(target, mean, std, eps=1e-11)",
                            "Call"
                        ],
                        [
                            "target.clamp(-6, 6)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DIP_UNET_models/unet_and_tv/unet_model.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, out_chans, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_chans, out_chans, kernel_size=2, stride=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.down_sample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(in_chans, chans, drop_prob)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.up_transpose_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_158": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, downsample_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_34": {
                "num_features": {
                    "value": "out_chans",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_36": {
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "out_chans",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_38": {
                "num_features": {
                    "value": "out_chans",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_40": {
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_76": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_77": {
                "num_features": {
                    "value": "out_chans",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "ConvBlock(ch * 2, ch, drop_prob)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_174": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "chans",
                            "Name"
                        ],
                        [
                            "ch // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "common/subsample.py": {
        "torch": {
            "from_numpy_89": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.reshape(*mask_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.reshape(*mask_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "common/test_subsample.py": {
        "torch": {
            "all_25": {
                "input": {
                    "value": "mask1 == mask2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_26": {
                "input": {
                    "value": "mask2 == mask3",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "demo_helper/helpers.py": {
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.reshape(*mask_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_105": {
                "input": {
                    "value": "(data ** 2).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_204": {
                "input": {
                    "value": "torch.fft.fftn(torch.view_as_complex(input), dim=dims, norm=norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_222": {
                "input": {
                    "value": "torch.fft.ifftn(torch.view_as_complex(input), dim=dims, norm=norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fftn_204": {
                "input": {
                    "value": "torch.view_as_complex(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "(-2, -1)",
                            "Tuple"
                        ],
                        [
                            "(-3, -2, -1)",
                            "Tuple"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "(-2, -1)",
                            "Tuple"
                        ],
                        [
                            "(-3, -2, -1)",
                            "Tuple"
                        ]
                    ]
                },
                "norm": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'backward'",
                            "Constant"
                        ],
                        [
                            "'ortho'",
                            "Constant"
                        ],
                        [
                            "'backward'",
                            "Constant"
                        ],
                        [
                            "'ortho'",
                            "Constant"
                        ]
                    ]
                }
            },
            "ifftn_222": {
                "input": {
                    "value": "torch.view_as_complex(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "(-2, -1)",
                            "Tuple"
                        ],
                        [
                            "(-3, -2, -1)",
                            "Tuple"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "(-2, -1)",
                            "Tuple"
                        ],
                        [
                            "(-3, -2, -1)",
                            "Tuple"
                        ]
                    ]
                },
                "norm": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'backward'",
                            "Constant"
                        ],
                        [
                            "'ortho'",
                            "Constant"
                        ],
                        [
                            "'backward'",
                            "Constant"
                        ],
                        [
                            "'ortho'",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "img_np",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "view_as_complex_204": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "view_as_complex_222": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "(s[0], ns, s[2], s[3], 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "include/decoder_conv.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "net1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "net2",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_93": {
                "variable": {
                    "value": "samp_block",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "self.hidden_size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_130": {
                "variable": {
                    "value": "sig",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermed_outs + [out1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "nic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "num_channels * (sum(intermeds) + 1)",
                            "BinOp"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_29": {
                "size": {
                    "value": "hidden_size[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(int(x), int(y)) for (x, y) in zip(xscales, yscales)]",
                            "ListComp"
                        ],
                        [
                            "[(int(np.ceil(scale_x ** n * in_size[0])), int(np.ceil(scale_y ** n * in_size[1]))) for n in range(1, num_layers - 1)] + [out_size]",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "upsample_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "nic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "num_channels * (sum(intermeds) + 1)",
                            "BinOp"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "include/decoder_parallel_conv.py": {
        "torch": {
            "Sequential_54": {
                "variable": {
                    "value": "net4",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "last_inp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2, out3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_105": {
                "variable": {
                    "value": "sig",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "net",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "sum(decoders_last_channels)",
                            "Call"
                        ],
                        [
                            "num_output_channels",
                            "Name"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "decoders_last_channels[n]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "sum(decoders_last_channels)",
                            "Call"
                        ],
                        [
                            "num_output_channels",
                            "Name"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "decoders_last_channels[n]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "decoders_last_channels[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "sum(decoders_last_channels)",
                            "Call"
                        ],
                        [
                            "num_output_channels",
                            "Name"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "decoders_last_channels[n]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "num_output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_23": {
                "size": {
                    "value": "hidden_size[n][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "upsample_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "sum(decoders_last_channels)",
                            "Call"
                        ],
                        [
                            "num_output_channels",
                            "Name"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "decoders_last_channels[n]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size[n] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "sum(decoders_last_channels)",
                            "Call"
                        ],
                        [
                            "num_output_channels",
                            "Name"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "decoders_last_channels[n]",
                            "Subscript"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "sum(decoders_last_channels)",
                            "Call"
                        ],
                        [
                            "num_output_channels",
                            "Name"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "decoders_last_channels[n]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "decoders_last_channels[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "decoders_last_channels[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "include/decoder_skip.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "net1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "net2",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_112": {
                "variable": {
                    "value": "sig",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intermed_outs + [out1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_79": {
                "variable": {
                    "value": "samp_block",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "self.hidden_size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "nic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "num_channels * (num_layers - 1)",
                            "BinOp"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_34": {
                "size": {
                    "value": "hidden_size[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(int(x), int(y)) for (x, y) in zip(xscales, yscales)]",
                            "ListComp"
                        ],
                        [
                            "[(int(np.ceil(scale_x ** n * in_size[0])), int(np.ceil(scale_y ** n * in_size[1]))) for n in range(1, num_layers - 1)] + [out_size]",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "upsample_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "nic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels",
                            "Name"
                        ],
                        [
                            "num_channels * (num_layers - 1)",
                            "BinOp"
                        ],
                        [
                            "num_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bn_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_54": {
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_30": {
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "include/fit.py": {
        "torch": {
            "Adam_355": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ],
                        [
                            "p + [net_input]",
                            "BinOp"
                        ],
                        [
                            "list(filter(lambda p: len(p.data.shape) > 2, net.parameters()))",
                            "Call"
                        ],
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_357": {
                "variable": {
                    "value": "mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "criterion(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ],
                        [
                            "p + [net_input]",
                            "BinOp"
                        ],
                        [
                            "list(filter(lambda p: len(p.data.shape) > 2, net.parameters()))",
                            "Call"
                        ],
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_138": {
                "variable": {
                    "value": "mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ],
                        [
                            "p + [net_input]",
                            "BinOp"
                        ],
                        [
                            "list(filter(lambda p: len(p.data.shape) > 2, net.parameters()))",
                            "Call"
                        ],
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LBFGS_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ],
                        [
                            "p + [net_input]",
                            "BinOp"
                        ],
                        [
                            "list(filter(lambda p: len(p.data.shape) > 2, net.parameters()))",
                            "Call"
                        ],
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_345": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, num_channels[0], width, height]",
                            "List"
                        ],
                        [
                            "[1, num_channels[0], width, height]",
                            "List"
                        ]
                    ]
                }
            },
            "Adagrad_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ],
                        [
                            "p + [net_input]",
                            "BinOp"
                        ],
                        [
                            "list(filter(lambda p: len(p.data.shape) > 2, net.parameters()))",
                            "Call"
                        ],
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, num_channels[0], width, height]",
                            "List"
                        ],
                        [
                            "[1, num_channels[0], width, height]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "include/helpers.py": {
        "torch": {
            "from_numpy_60": {
                "ndarray": {
                    "value": "img_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pil_to_np(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "include/mri_helpers.py": {
        "torch": {
            "norm_38": {
                "variable": {
                    "value": "normimag",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fimg[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_39": {
                "variable": {
                    "value": "normreal",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fimg[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "input": {
                    "value": "fimg[:, :, :, :, 0] ** 2 + fimg[:, :, :, :, 1] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "out_imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels2imgs(out_chs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "data": {
                    "value": "fimg[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "input": {
                    "value": "fimg[:, :, :, :, 1] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "(s[0], ns, s[2], s[3], 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, num_channels, in_size[0], in_size[1]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "include/onedim.py": {
        "torch": {
            "Conv1d_26": {
                "variable": {
                    "value": "convolver",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_f",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_f",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "to_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_153": {
                "variable": {
                    "value": "mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_23": {
                "variable": {
                    "value": "padder",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "to_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ],
                        [
                            "p + [net_input]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "[torch.t(U.matmul(torch.t(x[0, ...])))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in net.parameters()]",
                            "ListComp"
                        ],
                        [
                            "p + [net_input]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_64": {
                "input": {
                    "value": "x[0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_106": {
                "num_features": {
                    "value": "num_channels_up[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Upsample_99": {
                "scale_factor": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_101": {
                "scale_factor": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "include/pytorch_ssim/__init__.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "gauss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_18": {
                "variable": {
                    "value": "mu1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "mu2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "include/transforms.py": {
        "torch": {
            "fft_66": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifft_85": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_116": {
                "input": {
                    "value": "(data ** 2).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}