{
    "lib/mlnet.py": {
        "sklearn": {
            "roc_curve_287": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.ph_labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(labels, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(predictions, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_288": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_46": {
                "variable": {
                    "value": "self.ph_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.ph_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_155": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "max_to_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "merge_all_158": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_159": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_162": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_33": {
                "seed": {
                    "value": "int(1000000.0 * (time.time() % 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.ph_desc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.desc_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "desc_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.ph_desc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.desc_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "desc_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_131": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "modal_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_53": {
                "device_name": {
                    "value": "modal_1_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "fc_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "modal_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_60": {
                "device_name": {
                    "value": "modal_2_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "fc_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_70": {
                "device_name": {
                    "value": "metrics_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "desc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ph_desc_1 if self.is_retrieving else self.descriptors_1",
                            "IfExp"
                        ]
                    ]
                },
                "y": {
                    "value": "desc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ph_desc_2 if self.is_retrieving else self.descriptors_2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(desc_1, desc_2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, self.ph_dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ph_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_90": {
                "variable": {
                    "value": "same_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.equal(labels, tf.ones(shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_91": {
                "variable": {
                    "value": "diff_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.not_equal(labels, tf.ones(shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_92": {
                "variable": {
                    "value": "(same_mean, same_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "same_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(self.logits, tf.equal(labels, tf.ones(shape)))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_93": {
                "variable": {
                    "value": "(diff_mean, diff_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "diff_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(self.logits, tf.not_equal(labels, tf.ones(shape)))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_109": {
                "name": {
                    "value": "total",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_111": {
                "variable": {
                    "value": "averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_129": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_133": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate, global_step, decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "decay_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_138": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate, global_step, decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_140": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate, global_step, decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_152": {
                "variable": {
                    "value": "self.train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate, global_step, decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "control",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(desc_1, desc_2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, self.ph_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.ph_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "var_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "mean_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "averages",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_117": {
                "name": {
                    "value": "var_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "averages.average(var_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_118": {
                "name": {
                    "value": "mean_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "averages.average(mean_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_121": {
                "name": {
                    "value": "total",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "averages.average(self.loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_123": {
                "variable": {
                    "value": "self.loss_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "averages.average(self.loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "control",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_135": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate, global_step, decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_151": {
                "control_inputs": {
                    "value": "[op_gradients]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_229": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_90": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.ph_labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(labels, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_91": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.ph_labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(labels, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_97": {
                "condition": {
                    "value": "tf.greater(mu - (same_mean - diff_mean), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "mu - (same_mean - diff_mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_104": {
                "name": {
                    "value": "regularization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_120": {
                "name": {
                    "value": "regularization",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "averages.average(regularization)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_122": {
                "control_inputs": {
                    "value": "[op_averages]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_90": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_91": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_98": {
                "x": {
                    "value": "mu - (same_mean - diff_mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_105": {
                "inputs": {
                    "value": "self.regularizers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/graph.py": {
        "sklearn": {}
    },
    "lib/eval.py": {
        "tensorflow": {}
    },
    "lib/gcn.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[None, n_nodes, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [int(N), int(M * F)])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ],
                        [
                            "self.gpool(x, specs.pooling_sizes[i], specs.pool_fn)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, p, 1, 1], strides=[1, p, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(N), int(M * F)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseTensor_136": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.column_stack((L.row, L.col))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "L.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "L.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [int(N), int(M * F)])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ],
                        [
                            "self.gpool(x, specs.pooling_sizes[i], specs.pool_fn)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, p, 1, 1], strides=[1, p, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_0, [M, F_in * N])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[M, F_in * N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_143": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_0, [M, F_in * N])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_1_expanded], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [K, M, F_in, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_t, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [N * M, F_in * K])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_k_expanded], 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[K, M, F_in, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_155": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_1_expanded], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [K, M, F_in, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_t, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [N * M, F_in * K])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_k_expanded], 0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[3, 1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_1_expanded], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [K, M, F_in, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_t, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [N * M, F_in * K])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_k_expanded], 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * M, F_in * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_1_expanded], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [K, M, F_in, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_t, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, [N * M, F_in * K])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t, x_k_expanded], 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_147": {
                "variable": {
                    "value": "x_1_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(L, x_0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, x_1_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [int(N), int(M * F)])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ],
                        [
                            "self.gpool(x, specs.pooling_sizes[i], specs.pool_fn)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, p, 1, 1], strides=[1, p, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_151": {
                "variable": {
                    "value": "x_k_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * tf.sparse_tensor_dense_matmul(L, x_1) - x_0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_152": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, x_k_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "tensor": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_t, W)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, M, F_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_184": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [int(N), int(M * F)])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ],
                        [
                            "self.gpool(x, specs.pooling_sizes[i], specs.pool_fn)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, p, 1, 1], strides=[1, p, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "'gcn_gconv{}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [int(N), int(M * F)])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ],
                        [
                            "self.gpool(x, specs.pooling_sizes[i], specs.pool_fn)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, p, 1, 1], strides=[1, p, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "'gcn_fc{}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [int(N), int(M * F)])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ],
                        [
                            "self.gpool(x, specs.pooling_sizes[i], specs.pool_fn)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, p, 1, 1], strides=[1, p, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "gconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "bias_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_97": {
                "name": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn.py": {
        "tensorflow": {
            "get_variable_17": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_24": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_38": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_loss_19": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, tf.float32, initializer=initial)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_29": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, tf.float32, initializer=initial)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils.py": {
        "tensorflow": {}
    },
    "main/cmplaces/test.py": {
        "tensorflow": {
            "ConfigProto_39": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reset_default_graph_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_42": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_66": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main/cmplaces/train.py": {
        "tensorflow": {
            "ConfigProto_100": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_104": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/cmplaces/sckr.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "ph_text",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, M_text, F_text]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_text",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "ph_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, F_image]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "input": {
                    "value": "ph_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, F_image], 'input_image')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/vgg16.py": {
        "tensorflow": {
            "relu_62": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_24": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool_73": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_76": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_conv_filter(name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_85": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_87": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_103": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_108": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_111": {
                "value": {
                    "value": "self.data_dict[name][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_114": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_fc_weight(name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/vgg16_trainable.py": {
        "tensorflow": {
            "concat_42": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_179": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_182": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_188": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_size, out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_191": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "split_33": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_98": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_140": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_145": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool_154": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_157": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_163": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_static_conv_filter(name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_164": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_static_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_165": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, in_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_174": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ],
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ],
                        [
                            "self.get_static_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_dict[name][idx]",
                            "Subscript"
                        ],
                        [
                            "initial_value",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_205": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_dict[name][idx]",
                            "Subscript"
                        ],
                        [
                            "initial_value",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_239": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_static_conv_filter(name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_242": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_static_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_244": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_260": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ],
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ],
                        [
                            "self.get_static_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_265": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_268": {
                "value": {
                    "value": "self.data_dict[name][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_271": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "(blue, green, red)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_100": {
                "variable": {
                    "value": "(blue, green, red)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, in_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 0, name + '_weights')",
                            "Call"
                        ],
                        [
                            "self.get_static_fc_weight(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_260": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, in_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 0, name + '_weights')",
                            "Call"
                        ],
                        [
                            "self.get_static_fc_weight(name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/vgg19.py": {
        "tensorflow": {
            "concat_29": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_23": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool_77": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_80": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_conv_filter(name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_89": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_107": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_112": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "self.data_dict[name][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_118": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_25": {
                "variable": {
                    "value": "(blue, green, red)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_fc_weight(name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/vgg19_trainable.py": {
        "tensorflow": {
            "concat_42": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_117": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_120": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_126": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_size, out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_129": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "split_33": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_83": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool_92": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_95": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_102": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, in_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_112": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ],
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_dict[name][idx]",
                            "Subscript"
                        ],
                        [
                            "initial_value",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_143": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_dict[name][idx]",
                            "Subscript"
                        ],
                        [
                            "initial_value",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "(blue, green, red)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, in_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 0, name + '_weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}