{
    "src/ac_discrete/misc.py": {
        "torch": {
            "stack_60": {
                "tensors": {
                    "value": "[argmax_acs[i] if r > eps else rand_acs[i] for (i, r) in enumerate(torch.rand(logits.shape[0]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_74": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_68": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_58": {
                "n": {
                    "value": "logits.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_60": {
                "*size": {
                    "value": "logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/ac_discrete/qmix_mcac.py": {
        "torch": {
            "RMSprop_16": {
                "variable": {
                    "value": "self.policy_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.policy_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.actor_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_171": {
                "variable": {
                    "value": "q_taken_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['u']",
                            "Subscript"
                        ],
                        [
                            "actions.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_171": {
                "variable": {
                    "value": "q_taken_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "q_mean_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * q_vals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "q_i_mean_negi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_i_mean_negi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(q_i_mean_negi_taken, dim=2)",
                            "Call"
                        ],
                        [
                            "q_i_mean_negi_taken.view(episode_num, -1, self.n_agents)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_198": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions_prob.view(-1, self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_198": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_200": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(pi, dim=1, index=actions.reshape(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__229": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.policy_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_266": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_266": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_301": {
                "variable": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * q_targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_389": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_390": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_395": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_397": {
                "variable": {
                    "value": "self.policy_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "self.target_policy_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_67": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_294": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__325": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_409": {
                "obj": {
                    "value": "self.eval_qmix_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_qmix_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_410": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_411": {
                "obj": {
                    "value": "self.agent.policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_policy_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_360": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_360": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_361": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_361": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_53": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "path_qmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/qmix_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_55": {
                "f": {
                    "value": "path_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/policy_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_352": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/ac_discrete/qmix_mcsac.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_22": {
                "variable": {
                    "value": "self.alpha_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_28": {
                "variable": {
                    "value": "self.policy_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.policy_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.actor_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "log_prob_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_194": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob.view(-1, self.n_actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "actor_sample_times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_198": {
                "variable": {
                    "value": "q_curpi_sample_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "cur_pol_sample_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.view(episode_num, -1, self.n_agents, actor_sample_times)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_198": {
                "variable": {
                    "value": "q_curpi_sample_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_212": {
                "variable": {
                    "value": "q_i_mean_negi_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * q_vals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "q_i_mean_negi_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_i_mean_negi_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(q_i_mean_negi_sample, dim=2)",
                            "Call"
                        ],
                        [
                            "q_i_mean_negi_sample.view(episode_num, -1, self.n_agents)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_242": {
                "variable": {
                    "value": "log_pi_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(actions_logprobs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(actions_logprobs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "cur_pol_sample_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.view(episode_num, -1, self.n_agents, actor_sample_times)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_242": {
                "variable": {
                    "value": "log_pi_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__261": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.policy_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_305": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_305": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_306": {
                "variable": {
                    "value": "q_evals_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals_2, dim=3, index=u).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_306": {
                "variable": {
                    "value": "q_evals_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_347": {
                "variable": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_348": {
                "variable": {
                    "value": "log_prob_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_371": {
                "variable": {
                    "value": "q_targets_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * (q_targets - self.alpha * log_prob_pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_373": {
                "variable": {
                    "value": "q_targets_sample_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * (q_targets_2 - self.alpha * log_prob_pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_386": {
                "variable": {
                    "value": "q_total_target_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_total_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_qmix_net(q_targets_sample, s_next)",
                            "Call"
                        ],
                        [
                            "q_total_target_min",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_444": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_469": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_470": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_494": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_495": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_500": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_502": {
                "variable": {
                    "value": "self.eval_hidden_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_503": {
                "variable": {
                    "value": "self.target_hidden_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_504": {
                "variable": {
                    "value": "self.policy_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_92": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_96": {
                "variable": {
                    "value": "self.optimizer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__398": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__408": {
                "parameters": {
                    "value": "self.eval_parameters_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_518": {
                "obj": {
                    "value": "self.eval_qmix_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_qmix_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_519": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_520": {
                "obj": {
                    "value": "self.agent.policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_policy_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_179": {
                "input": {
                    "value": "agent_outs + z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_345": {
                "input": {
                    "value": "agent_outs + z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_440": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_440": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_441": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_441": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_75": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_76": {
                "f": {
                    "value": "path_qmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/qmix_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_77": {
                "f": {
                    "value": "path_qmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/qmix_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_432": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_359": {
                "input": {
                    "value": "actions_prob.detach() * (-self.log_alpha * (log_prob_pi + target_entropy).detach())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/ac_discrete/qmix_msac.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "variable": {
                    "value": "self.alpha_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_25": {
                "variable": {
                    "value": "self.policy_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.policy_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.actor_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "log_prob_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_197": {
                "variable": {
                    "value": "q_i_mean_negi_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * (self.alpha * log_prob_pi - q_vals)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__223": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.policy_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_267": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_267": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_268": {
                "variable": {
                    "value": "q_evals_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals_2, dim=3, index=u).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_268": {
                "variable": {
                    "value": "q_evals_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_309": {
                "variable": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_310": {
                "variable": {
                    "value": "log_prob_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_334": {
                "variable": {
                    "value": "q_targets_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * (q_targets - self.alpha * log_prob_pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_337": {
                "variable": {
                    "value": "q_targets_sample_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_prob * (q_targets_2 - self.alpha * log_prob_pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_350": {
                "variable": {
                    "value": "q_total_target_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_total_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_qmix_net(q_targets_sample, s_next)",
                            "Call"
                        ],
                        [
                            "q_total_target_min",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_408": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_433": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_434": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_458": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_459": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_464": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "variable": {
                    "value": "self.eval_hidden_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "variable": {
                    "value": "self.target_hidden_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_468": {
                "variable": {
                    "value": "self.policy_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_89": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_93": {
                "variable": {
                    "value": "self.optimizer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__362": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__372": {
                "parameters": {
                    "value": "self.eval_parameters_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_482": {
                "obj": {
                    "value": "self.eval_qmix_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_qmix_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_483": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_484": {
                "obj": {
                    "value": "self.agent.policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_policy_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_176": {
                "input": {
                    "value": "agent_outs + z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_307": {
                "input": {
                    "value": "agent_outs + z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_404": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_404": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_405": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_405": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_71": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_72": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_73": {
                "f": {
                    "value": "path_qmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/qmix_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_74": {
                "f": {
                    "value": "path_qmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/qmix_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_396": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_321": {
                "input": {
                    "value": "actions_prob.detach() * (-self.log_alpha * (log_prob_pi + target_entropy).detach())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/ac_discrete/rnn_policy.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_14": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_29": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc2(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(q, -5, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/agent/agent.py": {
        "torch": {
            "tensor_57": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.copy()",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, last_action))",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, agent_id))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat([x for x in inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.copy()",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, last_action))",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, agent_id))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat([x for x in inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "weights.reshape(self.args.n_agents, self.args.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(obs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "last_action",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "last_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(last_action, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(maven_z, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "maven_z.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_100": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_102": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_168": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_80": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_180": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_91": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_156": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/agent/agent_mcac.py": {
        "torch": {
            "zeros_57": {
                "variable": {
                    "value": "self.policy_eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.copy()",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, last_action))",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, agent_id))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat([x for x in inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.copy()",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, last_action))",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, agent_id))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat([x for x in inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_193": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "weights.reshape(self.args.n_agents, self.args.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(obs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "last_action",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "last_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(last_action, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(maven_z, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "maven_z.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_83": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_142": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_144": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_208": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_210": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / self.args.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / self.args.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_222": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_133": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_198": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/agent/agent_msac_mcsac.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "self.policy_eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.copy()",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, last_action))",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, agent_id))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat([x for x in inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.copy()",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, last_action))",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, agent_id))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat([x for x in inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "variable": {
                    "value": "avail_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "weights.reshape(self.args.n_agents, self.args.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(obs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "last_action",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "last_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(last_action, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(maven_z, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "maven_z.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_127": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_191": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_193": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / self.args.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs / self.args.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_205": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_116": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_181": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * prob + torch.ones_like(prob) * epsilon / action_num",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/common/rollout.py": {
        "torch": {
            "tensor_41": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.get_state()",
                            "Call"
                        ],
                        [
                            "torch.tensor(state, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "state.cuda()",
                            "Call"
                        ],
                        [
                            "self.env.get_state()",
                            "Call"
                        ],
                        [
                            "self.env.get_state()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OneHotCategorical_45": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agents.policy.z_policy(state)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/common/rollout_qmix.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.get_state()",
                            "Call"
                        ],
                        [
                            "torch.tensor(state, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "state.cuda()",
                            "Call"
                        ],
                        [
                            "self.env.get_state()",
                            "Call"
                        ],
                        [
                            "self.env.get_state()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OneHotCategorical_50": {
                "variable": {
                    "value": "maven_z",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agents.policy.z_policy(state)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/common/utils.py": {
        "torch": {
            "zeros_49": {
                "variable": {
                    "value": "n_step_return",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, max_episode_len, args.n_agents, max_episode_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "lambda_return",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, max_episode_len, args.n_agents)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "returns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, args.n_agents)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "manual_seed_29": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/main_qmix_coma.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_50": {
                "device": {
                    "value": "args.cuda_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/base_net.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_12": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/base_net_ddpg.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_12": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/coma_critic.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.critic_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/commnet.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_11": {
                "variable": {
                    "value": "self.f_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_12": {
                "variable": {
                    "value": "self.f_comm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.decoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_19": {
                "variable": {
                    "value": "obs_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoding(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_29": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_out",
                            "Name"
                        ],
                        [
                            "h.reshape(-1, self.args.n_agents, self.args.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "self.f_comm(c, h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, self.args.rnn_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_39": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/g2anet.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_14": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_20": {
                "variable": {
                    "value": "self.hard_bi_GRU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.rnn_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.hard_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.decoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim + args.attention_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "obs_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoding(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v(h_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(x, dim=1).reshape(-1, self.args.attention_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.args.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "final_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_out, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "input_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(input_hard, dim=-2)",
                            "Call"
                        ],
                        [
                            "input_hard.view(self.args.n_agents - 1, -1, self.args.rnn_hidden_dim * 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "h_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2 * 1, size, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gumbel_softmax_71": {
                "variable": {
                    "value": "hard_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "hard_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((self.args.n_agents, size // self.args.n_agents, 1, self.args.n_agents - 1))",
                            "Call"
                        ],
                        [
                            "hard_weights.cuda()",
                            "Call"
                        ],
                        [
                            "self.hard_encoding(h_hard)",
                            "Call"
                        ],
                        [
                            "f.gumbel_softmax(hard_weights, tau=0.01)",
                            "Call"
                        ],
                        [
                            "hard_weights[:, 1].view(-1, self.args.n_agents, 1, self.args.n_agents - 1)",
                            "Call"
                        ],
                        [
                            "hard_weights.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "hard_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.args.n_agents, size // self.args.n_agents, 1, self.args.n_agents - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "k_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "k_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k[:, j] for j in range(self.args.n_agents) if j != i]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(k_i, dim=0)",
                            "Call"
                        ],
                        [
                            "k_i.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v[:, j] for j in range(self.args.n_agents) if j != i]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(v_i, dim=0)",
                            "Call"
                        ],
                        [
                            "v_i.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, i].view(-1, 1, self.args.attention_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k[:, j] for j in range(self.args.n_agents) if j != i]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(k_i, dim=0)",
                            "Call"
                        ],
                        [
                            "k_i.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "soft_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score / np.sqrt(self.args.attention_dim)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "h_hard_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_hard_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_hard_i, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[h_i, h[:, j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/maven_net.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(h, hyper_w) + hyper_b",
                            "BinOp"
                        ],
                        [
                            "q.view(-1, self.args.n_actions)",
                            "Call"
                        ],
                        [
                            "f.softmax(q, dim=-1)",
                            "Call"
                        ],
                        [
                            "q * avail_action",
                            "BinOp"
                        ],
                        [
                            "q / q.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "q.reshape(1, length, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_26": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.hyper_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.noise_dim + args.n_agents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim * args.n_actions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.hyper_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.noise_dim + args.n_agents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "hyper_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, agent_id]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_55": {
                "variable": {
                    "value": "self.GRU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.n_agents * args.n_actions + args.state_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(h, hyper_w) + hyper_b",
                            "BinOp"
                        ],
                        [
                            "q.view(-1, self.args.n_actions)",
                            "Call"
                        ],
                        [
                            "f.softmax(q, dim=-1)",
                            "Call"
                        ],
                        [
                            "q * avail_action",
                            "BinOp"
                        ],
                        [
                            "q / q.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "q.reshape(1, length, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_1(h.squeeze(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f.relu(self.fc_1(state))",
                            "Call"
                        ],
                        [
                            "f.relu(self.fc(obs))",
                            "Call"
                        ],
                        [
                            "f.relu(self.fc_1(h.squeeze(0)))",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "f.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_44": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(x, h_in)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 1, self.args.rnn_hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hyper_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hyper_w(hyper_input)",
                            "Call"
                        ],
                        [
                            "hyper_w.view(-1, self.args.rnn_hidden_dim, self.args.n_actions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/network/qmix_net.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.hyper_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.hyper_b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.qmix_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_42": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w1(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_48": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(q_values, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_50": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w2(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.hyper_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.hyper_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.hyper_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.hyper_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.hyper_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_agents * args.qmix_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.hyper_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_56": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.elu(torch.bmm(q_values, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.hyper_w2(states))",
                            "Call"
                        ],
                        [
                            "w2.view(-1, self.args.qmix_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_agents * args.qmix_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_48": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.view(-1, 1, self.args.n_agents)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.hyper_w1(states))",
                            "Call"
                        ],
                        [
                            "w1.view(-1, self.args.n_agents, self.args.qmix_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/network/qmix_net_ddpg.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.hyper_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.hyper_b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.qmix_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_42": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w1(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_48": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(q_values, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_50": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w2(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.hyper_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.hyper_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.hyper_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.hyper_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.hyper_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_agents * args.qmix_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.hyper_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_56": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.elu(torch.bmm(q_values, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.hyper_w2(states))",
                            "Call"
                        ],
                        [
                            "w2.view(-1, self.args.qmix_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_agents * args.qmix_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_48": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.view(-1, 1, self.args.n_agents)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.hyper_w1(states))",
                            "Call"
                        ],
                        [
                            "w1.view(-1, self.args.n_agents, self.args.qmix_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/network/qmix_net_linear.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.hyper_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_46": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w1(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.hyper_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.hyper_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.hyper_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.state_shape, args.hyper_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.hyper_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_agents * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_56": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.reshape(-1, 1, self.args.n_agents)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.hyper_w1(states))",
                            "Call"
                        ],
                        [
                            "w1.view(-1, self.args.n_agents, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_agents * args.qmix_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "args.state_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "args.hyper_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.qmix_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/qtran_net.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.action_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.args.n_actions, self.args.n_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.hidden_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.args.rnn_hidden_dim, self.args.rnn_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(q_input, self.args.qtran_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, hidden_encoding, action_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.hidden_action_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(ae_input, ae_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(q_input, self.args.qtran_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "hidden_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_states, actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.reshape(episode_num * max_episode_len, -1), hidden_actions_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.hidden_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_input, hidden_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(v_input, self.args.qtran_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, hidden_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "self.args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "self.args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "self.args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "self.args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "q_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.state_shape + self.args.n_actions + self.args.rnn_hidden_dim + self.args.n_agents",
                            "BinOp"
                        ],
                        [
                            "self.args.state_shape + self.args.n_actions + self.args.rnn_hidden_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_52": {
                "n": {
                    "value": "n_agents",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "ae_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim + self.args.n_actions",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ae_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim + self.args.n_actions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "ae_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim + self.args.n_actions",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ae_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim + self.args.n_actions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "q_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.state_shape + self.args.n_actions + self.args.rnn_hidden_dim + self.args.n_agents",
                            "BinOp"
                        ],
                        [
                            "self.args.state_shape + self.args.n_actions + self.args.rnn_hidden_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "hidden_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "hidden_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.rnn_hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "v_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.state_shape + self.args.rnn_hidden_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "self.args.qtran_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/network/vdn_net.py": {
        "torch": {
            "sum_10": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/policy/central_v.py": {
        "torch": {
            "gather_95": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_97": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(action_prob, dim=3, index=u).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_120": {
                "variable": {
                    "value": "v_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(v_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "v_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(v_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_65": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_critic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_66": {
                "variable": {
                    "value": "self.rnn_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rnn_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_actor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__103": {
                "parameters": {
                    "value": "self.rnn_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.view(episode_num, self.n_agents, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__200": {
                "parameters": {
                    "value": "self.critic_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "self.eval_critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_critic_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_141": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_53": {
                "f": {
                    "value": "path_critic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/critic_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_134": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_166": {
                "input": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/policy/coma.py": {
        "torch": {
            "gather_105": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._train_critic(batch, max_episode_len, train_step)",
                            "Call"
                        ],
                        [
                            "q_evals.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ],
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_106": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ],
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_108": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(action_prob, dim=3, index=u).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_181": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_247": {
                "variable": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "padded_u_next",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*u[:, -1].shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_269": {
                "variable": {
                    "value": "padded_u_next",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "u_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u_next, padded_u_next)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_282": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ],
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_282": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_283": {
                "variable": {
                    "value": "q_next_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_next_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_next_target, dim=3, index=u_next).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((u_next, padded_u_next), dim=1)",
                            "Call"
                        ],
                        [
                            "u_next.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_283": {
                "variable": {
                    "value": "q_next_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_68": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_critic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_69": {
                "variable": {
                    "value": "self.rnn_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rnn_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_actor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__116": {
                "parameters": {
                    "value": "self.rnn_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "u_onehot_next",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*u_onehot.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_144": {
                "variable": {
                    "value": "u_onehot_last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['u_onehot'][:, transition_idx]",
                            "Subscript"
                        ],
                        [
                            "u_onehot.view((episode_num, 1, -1)).repeat(1, self.n_agents, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_243": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.view(episode_num, self.n_agents, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__295": {
                "parameters": {
                    "value": "self.critic_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_305": {
                "obj": {
                    "value": "self.eval_critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_critic_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_306": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_165": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_177": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_177": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_178": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_225": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_225": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_56": {
                "f": {
                    "value": "path_coma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/critic_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_218": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_250": {
                "input": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/policy/maven.py": {
        "torch": {
            "log_107": {
                "variable": {
                    "value": "log_z_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z_policy(s[:, 0, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_110": {
                "variable": {
                    "value": "z_prob_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z_policy(s[:, 0, :])",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "class_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.long().argmax(dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "class_z.squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_110": {
                "variable": {
                    "value": "z_prob_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "episode_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "episode_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_127": {
                "variable": {
                    "value": "mi_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mi_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mi_net(q_evals.clone(), avail_u, s, episode_len)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "class_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.long().argmax(dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "class_z.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_132": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_132": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_213": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_214": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_targets.max(dim=3)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_66": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__152": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "self.z_policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_z_policy_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_227": {
                "obj": {
                    "value": "self.mi_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_mi_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "self.eval_qmix_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_qmix_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_183": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_184": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_184": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "path_z_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/z_policy_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_52": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_53": {
                "f": {
                    "value": "path_qmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/qmix_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "path_mi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/mi_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_175": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/policy/qmix.py": {
        "torch": {
            "gather_87": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_targets.max(dim=3)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_50": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__105": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "self.eval_qmix_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_qmix_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_132": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_133": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_39": {
                "f": {
                    "value": "path_qmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/qmix_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_124": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/policy/qtran_alt.py": {
        "torch": {
            "zeros_101": {
                "variable": {
                    "value": "opt_onehot_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*individual_q_clone.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "opt_onehot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*individual_q_targets.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "gather_117": {
                "variable": {
                    "value": "joint_q_chosen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "joint_q_chosen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_118": {
                "variable": {
                    "value": "joint_q_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "opt_action_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "individual_q_targets.argmax(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "joint_q_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_134": {
                "variable": {
                    "value": "joint_q_opt_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_q_opt_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(joint_q_opt_evals, dim=-1, index=opt_action_eval).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "opt_action_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "individual_q_clone.argmax(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "joint_q_opt_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_150": {
                "variable": {
                    "value": "q_all_chosen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "individual_q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_207": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "self.eval_joint_q(s_eval, hidden_evals, local_opt_actions)",
                            "Call"
                        ],
                        [
                            "q_evals.view(episode_num, max_episode_len, -1, self.n_actions)",
                            "Call"
                        ],
                        [
                            "self.eval_joint_q(s_eval, hidden_evals, u_onehot)",
                            "Call"
                        ],
                        [
                            "q_evals.view(episode_num, max_episode_len, -1, self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_208": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.target_joint_q(s_target, hidden_targets, local_opt_actions)",
                            "Call"
                        ],
                        [
                            "q_targets.view(episode_num, max_episode_len, -1, self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_209": {
                "variable": {
                    "value": "hidden_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(hidden_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "hidden_evals.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_210": {
                "variable": {
                    "value": "hidden_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(hidden_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "hidden_targets.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_256": {
                "variable": {
                    "value": "action_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_256": {
                "variable": {
                    "value": "action_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "s_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, action_onehot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "s_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s_next, action_onehot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_60": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__175": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_297": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_298": {
                "obj": {
                    "value": "self.eval_joint_q.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_joint_q_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_299": {
                "obj": {
                    "value": "self.v.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_v_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_232": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_232": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_233": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_233": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_45": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_46": {
                "f": {
                    "value": "path_joint_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/joint_q_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_47": {
                "f": {
                    "value": "path_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/v_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_224": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_153": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/policy/qtran_base.py": {
        "torch": {
            "zeros_103": {
                "variable": {
                    "value": "opt_onehot_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*individual_q_clone.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "opt_onehot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*individual_q_targets.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "gather_136": {
                "variable": {
                    "value": "q_individual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "individual_q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "q_individual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "self.eval_joint_q(states, hidden_evals, local_opt_actions)",
                            "Call"
                        ],
                        [
                            "q_evals.view(episode_num, -1, 1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.eval_joint_q(states, hidden_evals, u_onehot)",
                            "Call"
                        ],
                        [
                            "q_evals.view(episode_num, -1, 1).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.target_joint_q(states_next, hidden_targets, local_opt_actions)",
                            "Call"
                        ],
                        [
                            "q_targets.view(episode_num, -1, 1).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "hidden_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(hidden_evals, dim=1)",
                            "Call"
                        ],
                        [
                            "hidden_evals.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "hidden_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(hidden_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "hidden_targets.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_63": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__149": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "self.eval_joint_q.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_joint_q_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_261": {
                "obj": {
                    "value": "self.v.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_v_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_210": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_210": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_211": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_211": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_48": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_49": {
                "f": {
                    "value": "path_joint_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/joint_q_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_50": {
                "f": {
                    "value": "path_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/v_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_202": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/policy/reinforce.py": {
        "torch": {
            "gather_84": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_86": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(action_prob, dim=3, index=u).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_102": {
                "variable": {
                    "value": "n_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r.cuda()",
                            "Call"
                        ],
                        [
                            "r.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_128": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_148": {
                "variable": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_52": {
                "variable": {
                    "value": "self.rnn_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rnn_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_actor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.view(episode_num, self.n_agents, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__93": {
                "parameters": {
                    "value": "self.rnn_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_125": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_125": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_45": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "input": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_action_prob(batch, max_episode_len, epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_prob, dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "(1 - epsilon) * action_prob + torch.ones_like(action_prob) * epsilon / action_num",
                            "BinOp"
                        ],
                        [
                            "action_prob / action_prob.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "action_prob.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/policy/vdn.py": {
        "torch": {
            "gather_87": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "inputs_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(episode_num * self.args.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(q_evals, dim=3, index=u).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_evals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_targets.max(dim=3)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(q_targets, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "self.eval_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "self.target_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, self.n_agents, self.args.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_51": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__107": {
                "parameters": {
                    "value": "self.eval_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "self.eval_vdn_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_vdn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "self.eval_rnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + '/' + num + '_rnn_net_params.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_134": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_135": {
                "n": {
                    "value": "self.args.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_39": {
                "f": {
                    "value": "path_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/rnn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_40": {
                "f": {
                    "value": "path_vdn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_dir + '/vdn_net_params.pkl'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if self.args.cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_126": {
                "input": {
                    "value": "u_onehot[:, transition_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}