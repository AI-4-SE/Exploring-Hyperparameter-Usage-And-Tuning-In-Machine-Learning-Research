{
    "testing.py": {
        "sklearn": {},
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_15": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./model.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root='./data/tf', transform=Transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "img_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(img_parts)",
                            "Call"
                        ],
                        [
                            "img_p[:, np.newaxis, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "data/source_test_images/ext.py": {
        "torch": {}
    },
    "data/target/img.py": {
        "torch": {}
    },
    "data/target_images/img.py": {
        "torch": {}
    },
    "datasets.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "imgdata('./data/deep_pore_90_patch', './data/deep_pore_90_labels', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/source_test_images/PoreGroundTruthSampleimage', './data/source_test_images/pore_GT_images_label', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/train-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/test-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "imgdata('./data/deep_pore_90_patch', './data/deep_pore_90_labels', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/source_test_images/PoreGroundTruthSampleimage', './data/source_test_images/pore_GT_images_label', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/train-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/test-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "imgdata('./data/deep_pore_90_patch', './data/deep_pore_90_labels', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/source_test_images/PoreGroundTruthSampleimage', './data/source_test_images/pore_GT_images_label', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/train-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/test-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "imgdata('./data/deep_pore_90_patch', './data/deep_pore_90_labels', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/source_test_images/PoreGroundTruthSampleimage', './data/source_test_images/pore_GT_images_label', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/train-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ],
                        [
                            "imgdata('./data/target_images/test-aug', img_name=names, istrain=True, transform=data_transform, labels=lbl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(self.img_name[idx].split('.')[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(self.img_name[idx].split('.')[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(self.img_name[idx].split('.')[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(self.img_name[idx].split('.')[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "deepResNet.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "deepResPoreTrain.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_11": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "criteria1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_14": {
                "variable": {
                    "value": "criteria2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mainNet().to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "deep-model- + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mains.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "net.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.domain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1 * 80 * 80, 100)",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "1 * 80 * 80",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_11": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "criteria1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_14": {
                "variable": {
                    "value": "criteria2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_78": {
                "variable": {
                    "value": "criteria2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "dom_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lbl_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(lbl)",
                            "Call"
                        ],
                        [
                            "len(lbl)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_53": {
                "variable": {
                    "value": "dom_label_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lbl_size_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(lbl_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_69": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mainNet().to(device)",
                            "Call"
                        ],
                        [
                            "mainNet().to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model- + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mainNet().to(device)",
                            "Call"
                        ],
                        [
                            "mainNet().to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "deep-model- + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}