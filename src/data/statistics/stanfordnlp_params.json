{
    "stanfordnlp/models/common/beam.py": {
        "torch": {
            "sort_98": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/biaffine.py": {
        "torch": {
            "randn_77": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input1_size, input2_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_25": {
                "variable": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1.view(-1, input1_size[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.view(-1, self.input2_size * self.output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bilinear_38": {
                "variable": {
                    "value": "self.W_bilin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "input1_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "input2_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input1_size[0], input1_size[1], input2_size[1], self.output_size]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input1.new_ones(*input1.size()[:-1], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(input1.size()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input2, input2.new_ones(*input2.size()[:-1], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(input2.size()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input1.new_ones(*input1.size()[:-1], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(input1.size()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input2, input2.new_ones(*input2.size()[:-1], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(input2.size()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input1_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input1.size())",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input2_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input2.size())",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_17": {
                "data": {
                    "value": "torch.Tensor(output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/char_model.py": {
        "torch": {
            "Embedding_17": {
                "variable": {
                    "value": "self.char_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['char'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args['char_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.charlstm_h_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_dir * self.args['char_num_layers'], 1, self.args['char_hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.charlstm_c_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_dir * self.args['char_num_layers'], 1, self.args['char_hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_33": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.char_emb(chars))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(embs, wordlens, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "wordlens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_sequence_51": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "res.split(sentlens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.char_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_dir * self.args['char_hidden_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.char_attn(self.dropout(char_reps.data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PackedSequence_42": {
                "variable": {
                    "value": "char_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "char_reps.data * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "char_reps.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_43": {
                "variable": {
                    "value": "(char_reps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "PackedSequence(char_reps.data * weights, char_reps.batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "self.num_dir * self.args['char_num_layers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args['char_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "self.num_dir * self.args['char_num_layers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args['char_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_53": {
                "sequence": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_reps.sum(1)",
                            "Call"
                        ],
                        [
                            "h[-2:].transpose(0, 1).contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "tensor_unsort(res, word_orig_idx)",
                            "Call"
                        ],
                        [
                            "pack_sequence(res.split(sentlens))",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(res, batch_first=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/data.py": {
        "torch": {}
    },
    "stanfordnlp/models/common/dropout.py": {
        "torch": {
            "rand_15": {
                "*size": {
                    "value": "*masksize",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/hlstm.py": {
        "torch": {
            "randn_120": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * num_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_122": {
                "variable": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * num_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.Wg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_40": {
                "variable": {
                    "value": "rec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, hx[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wi(rec_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_42": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wf(rec_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wo(rec_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wg(rec_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate(torch.cat([c_l_minus_one, hx[1], input], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.highway",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_98": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(T, 3, 10)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input, seqlens, batch_first=self.batch_first)",
                            "Call"
                        ],
                        [
                            "PackedSequence(self.drop(input.data), input.batch_sizes)",
                            "Call"
                        ],
                        [
                            "PackedSequence(h.data + torch.sigmoid(self.gate[l](input.data)) * highway_func(self.highway[l](input.data)), input.batch_sizes)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(input, batch_first=self.batch_first)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seqlens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_109": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "h.data + torch.sigmoid(self.gate[l](input.data)) * highway_func(self.highway[l](input.data))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate * c_l_minus_one + f * hx[1] + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PackedSequence_102": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.drop(input.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "[c_l_minus_one, hx[1], input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "hidden_size * self.num_directions",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "hidden_size * self.num_directions",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_112": {
                "sequence": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(T, 3, 10)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input, seqlens, batch_first=self.batch_first)",
                            "Call"
                        ],
                        [
                            "PackedSequence(self.drop(input.data), input.batch_sizes)",
                            "Call"
                        ],
                        [
                            "PackedSequence(h.data + torch.sigmoid(self.gate[l](input.data)) * highway_func(self.highway[l](input.data)), input.batch_sizes)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(input, batch_first=self.batch_first)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "input": {
                    "value": "self.gate[l](input.data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/loss.py": {
        "torch": {
            "ones_11": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_13": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_43": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_45": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_58": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone().masked_fill_(mask, 0.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "stanfordnlp/models/common/packed_lstm.py": {
        "torch": {
            "Dropout_37": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.rec_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rec_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PackedSequence_103": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputdata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.drop(inputdata)",
                            "Call"
                        ],
                        [
                            "torch.cat(new_input, 1)",
                            "Call"
                        ],
                        [
                            "new_input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "batch_sizes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_14": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_20": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pack_padded_sequence(input, lengths, batch_first=self.batch_first)",
                            "Call"
                        ],
                        [
                            "PackedSequence(inputdata, batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "inputdata",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_24": {
                "sequence": {
                    "value": "res[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_46": {
                "input_size": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if l == 0 else self.num_directions * hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "states[0][:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "states[0][:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/pretrain.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.filename",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_76": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.filename, lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'vocab': vocab, 'emb': emb}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/seq2seq_model.py": {
        "torch": {
            "Dropout_47": {
                "variable": {
                    "value": "self.emb_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.emb_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_50": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout if self.nlayers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.dec2vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dec_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.encoder.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "enc_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.enc_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.encoder.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "enc_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.enc_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_115": {
                "variable": {
                    "value": "packed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_drop(self.embedding(src))",
                            "Call"
                        ],
                        [
                            "torch.cat([enc_inputs, pos_inputs.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.embedding(src)",
                            "Call"
                        ],
                        [
                            "torch.cat([enc_inputs, pos_inputs.unsqueeze(1)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_117": {
                "variable": {
                    "value": "(h_in, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_h_in",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "hn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hn[-1], hn[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cn[-1], cn[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_156": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.pos_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.pos_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.pos_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.edit_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_dim, edit_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "enc_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_inputs, pos_inputs.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "enc_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_inputs, pos_inputs.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "dec_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_current_state() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_197": {
                "variable": {
                    "value": "dec_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "self.emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "edit_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "edit_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_edit",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/seq2seq_modules.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_22": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_23": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_46": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "h_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_context, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_63": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_65": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_77": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(input)",
                            "Call"
                        ],
                        [
                            "self.linear_in(input).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_90": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn.view(attn.size(0), 1, attn.size(1))",
                            "Call"
                        ],
                        [
                            "attn.view(batch_size, 1, source_len)",
                            "Call"
                        ],
                        [
                            "attn.view(batch_size, 1, source_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "h_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_context, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_107": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_108": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "attn_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u, v, u.mul(v))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn.view(attn.size(0), 1, attn.size(1))",
                            "Call"
                        ],
                        [
                            "attn.view(batch_size, 1, source_len)",
                            "Call"
                        ],
                        [
                            "attn.view(batch_size, 1, source_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "h_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_context, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ],
                        [
                            "context.size(2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_153": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_154": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_181": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn.view(attn.size(0), 1, attn.size(1))",
                            "Call"
                        ],
                        [
                            "attn.view(batch_size, 1, source_len)",
                            "Call"
                        ],
                        [
                            "attn.view(batch_size, 1, source_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "h_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_context, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_196": {
                "variable": {
                    "value": "self.lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/seq2seq_utils.py": {
        "torch": {
            "SGD_15": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adagrad_17": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adamax_21": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/trainer.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "savedict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_13": {
                "obj": {
                    "value": "savedict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(filename, lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/common/utils.py": {
        "torch": {
            "SGD_59": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adagrad_61": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adamax_65": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/depparse/data.py": {
        "torch": {
            "eq_118": {
                "variable": {
                    "value": "words_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "get_long_tensor(words, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "PAD_ID",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_120": {
                "variable": {
                    "value": "wordchars_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wordchars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_long_tensor(batch_words, len(word_lens))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "PAD_ID",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/depparse/model.py": {
        "torch": {
            "Parameter_65": {
                "variable": {
                    "value": "self.drop_replacement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(input_size) / np.sqrt(input_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.parserlstm_h_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2 * self.args['num_layers'], 1, self.args['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.parserlstm_c_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2 * self.args['num_layers'], 1, self.args['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.data for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_131": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x.data for x in inputs], 1)",
                            "Call"
                        ],
                        [
                            "self.worddrop(lstm_inputs, self.drop_replacement)",
                            "Call"
                        ],
                        [
                            "self.drop(lstm_inputs)",
                            "Call"
                        ],
                        [
                            "PackedSequence(lstm_inputs, inputs[0].batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "inputs[0].batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_134": {
                "variable": {
                    "value": "(lstm_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_156": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "head.size(-1) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "head.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args['word_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_31": {
                "variable": {
                    "value": "self.lemma_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['lemma'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args['word_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.upos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['upos'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args['tag_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.ufeats_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.trans_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['char_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['transformed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.trans_pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['transformed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PackedSequence_123": {
                "variable": {
                    "value": "char_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.trans_char(self.drop(char_reps.data))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "char_reps.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_152": {
                "variable": {
                    "value": "dist_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(word.size(1), device=head.device).view(1, 1, -1).expand(word.size(0), -1, -1) - torch.arange(word.size(1), device=head.device).view(1, -1, 1).expand(word.size(0), -1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_169": {
                "variable": {
                    "value": "deprel_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deprel_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deprel(self.drop(lstm_outputs), self.drop(lstm_outputs))",
                            "Call"
                        ],
                        [
                            "deprel_scores[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.gather(deprel_scores, 2, head.unsqueeze(2).unsqueeze(3).expand(-1, -1, -1, len(self.vocab['deprel']))).view(-1, len(self.vocab['deprel']))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head.unsqueeze(2).unsqueeze(3).expand(-1, -1, -1, len(self.vocab['deprel']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_38": {
                "variable": {
                    "value": "self.xpos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['xpos'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args['tag_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.xpos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "2 * self.args['num_layers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "2 * self.args['num_layers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_85": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sentlens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsigmoid_147": {
                "input": {
                    "value": "lin_scores * torch.sign(head_offset).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_175": {
                "variable": {
                    "value": "lin_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lin_scores[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "lin_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-lin_scores.unsqueeze(1) / 2, lin_scores.unsqueeze(1) / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_178": {
                "variable": {
                    "value": "lin_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(head_offset[:, 1:] > 0).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_183": {
                "variable": {
                    "value": "dist_kld",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_kld[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "input_size + self.args['tag_emb_dim'] * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_143": {
                "start": {
                    "value": "word.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "head.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_151": {
                "input": {
                    "value": "dist_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.distance(self.drop(lstm_outputs), self.drop(lstm_outputs)).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_153": {
                "input": {
                    "value": "(dist_target.float() - dist_pred) ** 2 / 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_189": {
                "input": {
                    "value": "unlabeled_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unlabeled(self.drop(lstm_outputs), self.drop(lstm_outputs)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "unlabeled_scores + dist_kld.detach()",
                            "BinOp"
                        ],
                        [
                            "unlabeled_scores[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "unlabeled_scores.masked_fill(word_mask.unsqueeze(1), -float('inf'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_48": {
                "num_embeddings": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab['xpos'].lens()",
                            "Call"
                        ],
                        [
                            "vocab['feats'].lens()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.args['tag_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "emb_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_43": {
                "num_embeddings": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab['xpos'].lens()",
                            "Call"
                        ],
                        [
                            "vocab['feats'].lens()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.args['tag_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_147": {
                "input": {
                    "value": "head_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(word.size(1), device=head.device).view(1, 1, -1).expand(word.size(0), -1, -1) - torch.arange(word.size(1), device=head.device).view(1, -1, 1).expand(word.size(0), -1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "stanfordnlp/models/depparse/trainer.py": {
        "torch": {
            "clip_grad_norm__62": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state, 'vocab': self.vocab.state_dict(), 'config': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/lemma/data.py": {
        "torch": {
            "eq_109": {
                "variable": {
                    "value": "src_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(d[0])",
                            "Call"
                        ],
                        [
                            "[constant.SOS] + src + [constant.EOS]",
                            "BinOp"
                        ],
                        [
                            "char_vocab.map(src)",
                            "Call"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "get_long_tensor(src, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "constant.PAD_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/lemma/trainer.py": {
        "torch": {
            "clip_grad_norm__78": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_195": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict() if self.model is not None else None, 'dicts': (self.word_dict, self.composite_dict), 'vocab': self.vocab.state_dict(), 'config': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/lemmatizer.py": {
        "torch": {
            "manual_seed_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/mwt/data.py": {
        "torch": {
            "eq_98": {
                "variable": {
                    "value": "src_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(d[0])",
                            "Call"
                        ],
                        [
                            "[constant.SOS] + src + [constant.EOS]",
                            "BinOp"
                        ],
                        [
                            "vocab.map(src)",
                            "Call"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "get_long_tensor(src, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "constant.PAD_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/mwt/trainer.py": {
        "torch": {
            "clip_grad_norm__66": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict() if self.model is not None else None, 'dict': self.expansion_dict, 'vocab': self.vocab.state_dict(), 'config': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/mwt_expander.py": {
        "torch": {
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/parser.py": {
        "torch": {
            "manual_seed_85": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_184": {
                "variable": {
                    "value": "trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, args['beta2'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/pos/data.py": {
        "torch": {
            "eq_107": {
                "variable": {
                    "value": "words_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "get_long_tensor(words, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "PAD_ID",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_109": {
                "variable": {
                    "value": "wordchars_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wordchars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_long_tensor(batch_words, len(word_lens))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "PAD_ID",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/pos/model.py": {
        "torch": {
            "Parameter_50": {
                "variable": {
                    "value": "self.drop_replacement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(input_size) / np.sqrt(input_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.taggerlstm_h_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2 * self.args['num_layers'], 1, self.args['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.taggerlstm_c_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2 * self.args['num_layers'], 1, self.args['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.upos_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_dim'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['deep_biaff_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.upos_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['deep_biaff_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocab['upos'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.ufeats_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.data for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_120": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x.data for x in inputs], 1)",
                            "Call"
                        ],
                        [
                            "self.worddrop(lstm_inputs, self.drop_replacement)",
                            "Call"
                        ],
                        [
                            "self.drop(lstm_inputs)",
                            "Call"
                        ],
                        [
                            "PackedSequence(lstm_inputs, inputs[0].batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "inputs[0].batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "upos_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.upos_hid(self.drop(lstm_outputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['word'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args['word_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.upos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['upos'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args['tag_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.trans_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['char_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['transformed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.trans_pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['transformed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.xpos_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_dim'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['deep_biaff_hidden_dim'] if not isinstance(vocab['xpos'], CompositeVocab) else self.args['composite_deep_biaff_hidden_dim']",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.ufeats_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_dim'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['composite_deep_biaff_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_68": {
                "variable": {
                    "value": "self.xpos_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PackedSequence_114": {
                "variable": {
                    "value": "char_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.trans_char(self.drop(char_reps.data))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "char_reps.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "xpos_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.xpos_hid(self.drop(lstm_outputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "ufeats_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ufeats_hid(self.drop(lstm_outputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "2 * self.args['num_layers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "2 * self.args['num_layers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_95": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sentlens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "ufeats_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_50": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "input_size + self.args['transformed_dim']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "insize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_110": {
                "sequence": {
                    "value": "PackedSequence(x, word_emb.batch_sizes)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "xpos_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "emb_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PackedSequence_110": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "word_emb.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/pos/trainer.py": {
        "torch": {
            "clip_grad_norm__61": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state, 'vocab': self.vocab.state_dict(), 'config': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/tagger.py": {
        "torch": {
            "manual_seed_84": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_186": {
                "variable": {
                    "value": "trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, args['beta2'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/tokenize/data.py": {
        "torch": {
            "from_numpy_166": {
                "ndarray": {
                    "value": "np.array(t[0], dtype=t[1])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/tokenize/model.py": {
        "torch": {
            "Embedding_12": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nchars",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_14": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim + feat_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.args['rnn_layers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout if self.args['rnn_layers'] > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.tok_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.sent_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.mwt_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.toknoise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args['tok_noise']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsigmoid_81": {
                "variable": {
                    "value": "nontok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-tok0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_82": {
                "variable": {
                    "value": "tok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tok0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tok_clf(inp)",
                            "Call"
                        ],
                        [
                            "tok0 + self.tok_clf2(inp2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsigmoid_83": {
                "variable": {
                    "value": "nonsent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-sent0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_84": {
                "variable": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sent_clf(inp)",
                            "Call"
                        ],
                        [
                            "sent0 + self.sent_clf2(inp2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsigmoid_85": {
                "variable": {
                    "value": "nonmwt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-mwt0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_86": {
                "variable": {
                    "value": "mwt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mwt0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mwt_clf(inp)",
                            "Call"
                        ],
                        [
                            "mwt0 + self.mwt_clf2(inp2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nontok, tok + nonsent + nonmwt, tok + sent + nonmwt, tok + nonsent + mwt, tok + sent + mwt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.conv_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.rnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.tok_clf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.sent_clf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.mwt_clf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "emb_dim + feat_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.args.get('hier_conv_res', False) or si == 0",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "Conv1d_25": {
                "variable": {
                    "value": "self.conv_res2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2 * len(self.conv_sizes)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "hid + [l(conv_input)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(hid, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(hid)",
                            "Call"
                        ],
                        [
                            "self.dropout(hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "hid + [l(conv_input)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(hid, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(hid)",
                            "Call"
                        ],
                        [
                            "self.dropout(hid)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "-tok0 * self.args['hier_invtemp']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/tokenize/trainer.py": {
        "torch": {
            "CrossEntropyLoss_22": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args['lr0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__50": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict() if self.model is not None else None, 'vocab': self.vocab.state_dict(), 'config': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/models/tokenizer.py": {
        "torch": {
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "stanfordnlp/pipeline/core.py": {
        "torch": {
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}