{
    "nmor/inference.py": {
        "tensorflow": {
            "Session_70": {
                "graph": {
                    "value": "infer_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "utils.get_config_proto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_110": {
                "input": {
                    "value": "infer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decode(sess)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmor/model.py": {
        "tensorflow": {
            "Variable_57": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_60": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_99": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "hparams.num_keep_ckpts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_241": {
                "variable": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(c=enc_state, h=enc_state)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_2, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ]
                    ]
                },
                "h": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(c=enc_state, h=enc_state)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_2, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_250": {
                "variable": {
                    "value": "start_step",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, hparams.num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "end_step",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, hparams.num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_429": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.iterator.target_output, (-1, self.data_size[0]))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.target_output, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source, (-1, self.data_size[0], self.data_size[1], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_520": {
                "variable": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterator.target_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_521": {
                "variable": {
                    "value": "ae_sqr_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ae_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ae_out",
                            "Method Argument"
                        ],
                        [
                            "ae_out",
                            "Method Argument"
                        ],
                        [
                            "ae_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_522": {
                "variable": {
                    "value": "ae_sqr_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ae_sqr_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(ae_tgt, ae_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(ae_tgt, ae_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_523": {
                "variable": {
                    "value": "ae_norm_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(ae_tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_524": {
                "variable": {
                    "value": "ae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ae_sqr_l2 / (ae_norm_factor + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_527": {
                "variable": {
                    "value": "rnn_sqr_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_528": {
                "variable": {
                    "value": "rnn_sqr_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_sqr_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(ae_tgt, rnn_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(ae_tgt, rnn_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(rnn_tgt, rnn_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_529": {
                "variable": {
                    "value": "rnn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_sqr_l2 / (ae_norm_factor + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_631": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.iterator.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_637": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.iterator.target_output, (-1, self.data_size[0]))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.target_output, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source, (-1, self.data_size[0], self.data_size[1], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_809": {
                "variable": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterator.target_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_810": {
                "variable": {
                    "value": "ae_sqr_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ae_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ae_out",
                            "Method Argument"
                        ],
                        [
                            "ae_out",
                            "Method Argument"
                        ],
                        [
                            "ae_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_811": {
                "variable": {
                    "value": "ae_sqr_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ae_sqr_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(ae_tgt, ae_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(ae_tgt, ae_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_812": {
                "variable": {
                    "value": "ae_norm_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(ae_tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_813": {
                "variable": {
                    "value": "ae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ae_sqr_l2 / (ae_norm_factor + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_816": {
                "variable": {
                    "value": "rnn_sqr_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_817": {
                "variable": {
                    "value": "rnn_sqr_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_sqr_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(ae_tgt, rnn_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(ae_tgt, rnn_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(rnn_tgt, rnn_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_818": {
                "variable": {
                    "value": "rnn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_sqr_l2 / (ae_norm_factor + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_895": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.iterator.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_897": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.iterator.target_output, (-1, self.data_size[0]))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.target_output, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source, (-1, self.data_size[0], self.data_size[1], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1066": {
                "variable": {
                    "value": "rnn_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterator.target_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_1067": {
                "variable": {
                    "value": "rnn_sqr_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rnn_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ],
                        [
                            "rnn_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_1068": {
                "variable": {
                    "value": "rnn_sqr_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_sqr_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(ae_tgt, rnn_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(ae_tgt, rnn_out)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(rnn_tgt, rnn_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_1069": {
                "variable": {
                    "value": "rnn_norm_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rnn_tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduce_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_1070": {
                "variable": {
                    "value": "rnn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_sqr_l2 / (rnn_norm_factor + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_64": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_75": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "hparams.colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_89": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.scalar('lr', self.learning_rate), tf.summary.scalar('train_loss', self.train_loss), tf.summary.scalar('grad_norm', self.grad_norm), tf.summary.scalar('clipped_grads', tf.global_norm(clipped_grads))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_105": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "nMOR/ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_113": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "nMOR/evolver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_147": {
                "pred": {
                    "value": "self.global_step < start_decay_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.train.exponential_decay(self.learning_rate, self.global_step - start_decay_step, decay_steps, decay_factor, staircase=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_decay_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_193": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(10, 10) if self.data_size[0] == 128 else (5, 5)",
                            "IfExp"
                        ],
                        [
                            "(2, 10, 10) if self.data_size[0] == 128 else (2, 5, 5)",
                            "IfExp"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "(1, 4, 4) if self.data_size[0] == 128 else (1, 2, 2)",
                            "IfExp"
                        ],
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rate",
                            "Method Argument"
                        ],
                        [
                            "dilation_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv3d_206": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(10, 10) if self.data_size[0] == 128 else (5, 5)",
                            "IfExp"
                        ],
                        [
                            "(2, 10, 10) if self.data_size[0] == 128 else (2, 5, 5)",
                            "IfExp"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "(1, 4, 4) if self.data_size[0] == 128 else (1, 2, 2)",
                            "IfExp"
                        ],
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rate",
                            "Method Argument"
                        ],
                        [
                            "dilation_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_219": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(10, 10) if self.data_size[0] == 128 else (5, 5)",
                            "IfExp"
                        ],
                        [
                            "(2, 10, 10) if self.data_size[0] == 128 else (2, 5, 5)",
                            "IfExp"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "(1, 4, 4) if self.data_size[0] == 128 else (1, 2, 2)",
                            "IfExp"
                        ],
                        [
                            "(4, 4) if self.data_size[0] == 128 else (2, 2)",
                            "IfExp"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_277": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "elements_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time >= self.iterator.sequence_length",
                            "Compare"
                        ]
                    ]
                }
            },
            "cond_278": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(elements_finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : end_step",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "get_next_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_next_input",
                            "Call"
                        ]
                    ]
                }
            },
            "raw_rnn_301": {
                "variable": {
                    "value": "(rnn_outputs_ta, rnn_final_state, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_helper.create_rnn_cell(unit_type=hparams.unit_type, num_units=hparams.num_units, forget_bias=hparams.forget_bias, dropout=hparams.dropout, mode=self.mode, use_peepholes=True)",
                            "Call"
                        ]
                    ]
                },
                "loop_fn": {
                    "value": "_loop_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_loop_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_304": {
                "variable": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_outputs_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(rnn_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_op_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_356": {
                "variable": {
                    "value": "dec_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ],
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ],
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, -1, self.data_size[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_427": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.iterator.target_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.data_size[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_428": {
                "variable": {
                    "value": "(num_samples, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_433": {
                "variable": {
                    "value": "enc_dense_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.iterator.target_output, (-1, self.data_size[0]))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.target_output, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source, (-1, self.data_size[0], self.data_size[1], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dense_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_439": {
                "variable": {
                    "value": "enc_dense_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_dense_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(source, units=512, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(conv_output, units=256, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(conv_output, units=256, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dense_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_452": {
                "variable": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_dense_1, units=256, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(enc_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dense_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_475": {
                "variable": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(c=enc_state, h=enc_state)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_2, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dense_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_488": {
                "variable": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_1, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dense_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_494": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.data_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dense_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_561": {
                "variable": {
                    "value": "dec_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ],
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ],
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, -1, self.data_size[0], self.data_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_634": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.iterator.target_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_635": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.iterator.target_output, (-1, self.data_size[0]))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.target_output, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source, (-1, self.data_size[0], self.data_size[1], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.data_size[0], self.data_size[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_636": {
                "variable": {
                    "value": "(num_samples, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_686": {
                "variable": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sconv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv2d(sconv3, filters=32, kernel_size=(5, 5), strides=(2, 2), dilation_rate=(1, 1), batch_norm=False, activation=tf.nn.sigmoid, name='enc_sconv_4')",
                            "Call"
                        ],
                        [
                            "self._conv3d(sconv3, filters=32, kernel_size=(2, 5, 5), strides=(2, 2, 2), dilation_rate=(1, 1, 1), batch_norm=False, activation=tf.nn.sigmoid, name='enc_sconv_4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_samples, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dense_695": {
                "variable": {
                    "value": "enc_dense_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dense_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_701": {
                "variable": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_dense_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(source, units=512, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(conv_output, units=256, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(conv_output, units=256, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dense_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_724": {
                "variable": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(c=enc_state, h=enc_state)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_2, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dense_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_730": {
                "variable": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_1, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dense_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_743": {
                "variable": {
                    "value": "(num_samples, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(dec_dense_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_744": {
                "variable": {
                    "value": "tconv_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_samples, 4, 4, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_786": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tconv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._dconv2d(tconv3, filters=1, kernel_size=(5, 5), strides=(2, 2), batch_norm=True, activation=tf.nn.sigmoid, name='dec_tconv_4')",
                            "Call"
                        ],
                        [
                            "self._dconv2d(tconv3, filters=1, kernel_size=(5, 5), strides=(2, 2), batch_norm=True, activation=tf.nn.sigmoid, name='dec_tconv_4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_samples, self.data_size[0], self.data_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_850": {
                "variable": {
                    "value": "dec_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ],
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ],
                        [
                            "dec_outputs_flat",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, -1, self.data_size[0], self.data_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_866": {
                "variable": {
                    "value": "rnn_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_outputs_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(rnn_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, hparams.num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_946": {
                "variable": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sconv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv2d(sconv3, filters=32, kernel_size=(5, 5), strides=(2, 2), dilation_rate=(1, 1), batch_norm=False, activation=tf.nn.sigmoid, name='enc_sconv_4')",
                            "Call"
                        ],
                        [
                            "self._conv3d(sconv3, filters=32, kernel_size=(2, 5, 5), strides=(2, 2, 2), dilation_rate=(1, 1, 1), batch_norm=False, activation=tf.nn.sigmoid, name='enc_sconv_4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_samples, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dense_955": {
                "variable": {
                    "value": "enc_dense_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dense_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_961": {
                "variable": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_dense_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(source, units=512, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(conv_output, units=256, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(conv_output, units=256, activation=tf.nn.sigmoid, name='enc_dense_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dense_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_984": {
                "variable": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(c=enc_state, h=enc_state)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_2, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_dense_1, units=hparams.num_units, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ],
                        [
                            "enc_state",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dense_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_990": {
                "variable": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_1, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dense_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_1003": {
                "variable": {
                    "value": "(num_samples, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(dec_dense_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1004": {
                "variable": {
                    "value": "tconv_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_samples, 4, 4, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1046": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tconv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._dconv2d(tconv3, filters=1, kernel_size=(5, 5), strides=(2, 2), batch_norm=True, activation=tf.nn.sigmoid, name='dec_tconv_4')",
                            "Call"
                        ],
                        [
                            "self._dconv2d(tconv3, filters=1, kernel_size=(5, 5), strides=(2, 2), batch_norm=True, activation=tf.nn.sigmoid, name='dec_tconv_4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_samples, self.data_size[0], self.data_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_39": {
                "input": {
                    "value": "self.iterator.source",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_70": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_197": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(_input, filters=filters, kernel_size=kernel_size, strides=strides, dilation_rate=dilation_rate, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(_input, filters=filters, kernel_size=kernel_size, strides=strides, dilation_rate=dilation_rate, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(_input, filters=filters, kernel_size=kernel_size, strides=strides, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_210": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(_input, filters=filters, kernel_size=kernel_size, strides=strides, dilation_rate=dilation_rate, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(_input, filters=filters, kernel_size=kernel_size, strides=strides, dilation_rate=dilation_rate, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(_input, filters=filters, kernel_size=kernel_size, strides=strides, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_223": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(_input, filters=filters, kernel_size=kernel_size, strides=strides, dilation_rate=dilation_rate, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(_input, filters=filters, kernel_size=kernel_size, strides=strides, dilation_rate=dilation_rate, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(_input, filters=filters, kernel_size=kernel_size, strides=strides, padding='same', activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(c1, training=True)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "scope or 'nMOR'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_379": {
                "variable": {
                    "value": "rnn_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_outputs_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(rnn_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, hparams.num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_401": {
                "variable": {
                    "value": "rnn_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_outputs_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(rnn_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, hparams.num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_447": {
                "variable": {
                    "value": "enc_dense_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "enc_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_dense_1, units=256, activation=tf.nn.sigmoid, name='enc_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(enc_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - hparams.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "hparams.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_483": {
                "variable": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dec_dense_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_1, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(enc_state, units=256, activation=tf.nn.sigmoid, name='dec_dense_1')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - hparams.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "hparams.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_523": {
                "x": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_566": {
                "name_or_scope": {
                    "value": "scope or 'nMOR'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_585": {
                "variable": {
                    "value": "rnn_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_outputs_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(rnn_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, hparams.num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_608": {
                "variable": {
                    "value": "rnn_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_outputs_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(rnn_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ],
                        [
                            "self._build_rnn(hparams, rnn_enc_state)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, hparams.num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_639": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_690": {
                "variable": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - hparams.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "hparams.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_722": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_738": {
                "variable": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - hparams.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "hparams.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_812": {
                "x": {
                    "value": "ae_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_855": {
                "name_or_scope": {
                    "value": "scope or 'nMOR'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_899": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_950": {
                "variable": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sconv4, (num_samples, 512))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_output, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - hparams.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "hparams.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_982": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_998": {
                "variable": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - hparams.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "hparams.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1069": {
                "x": {
                    "value": "rnn_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterator.target_output, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_150": {
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step - start_decay_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "int(remain_steps / decay_times)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_428": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.iterator.target_output, (-1, self.data_size[0]))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.target_output, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source, (-1, self.data_size[0], self.data_size[1], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_636": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.iterator.target_output, (-1, self.data_size[0]))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.target_output, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source, (-1, self.data_size[0], self.data_size[1], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.iterator.source, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(source, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_743": {
                "input": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_858": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_862": {
                "name_or_scope": {
                    "value": "evolver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_867": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_1003": {
                "input": {
                    "value": "dec_dense_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dec_dense_1, units=512, activation=tf.nn.sigmoid, name='dec_dense_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(dec_dense_2, keep_prob=1.0 - hparams.dropout, seed=hparams.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_90": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_91": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_92": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_93": {
                "name": {
                    "value": "clipped_grads",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm(clipped_grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_375": {
                "name_or_scope": {
                    "value": "evolver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_385": {
                "device_name": {
                    "value": "model_helper.get_device_str(1, self.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "evolver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_570": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_576": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_581": {
                "name_or_scope": {
                    "value": "evolver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_586": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_591": {
                "device_name": {
                    "value": "model_helper.get_device_str(1, self.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_598": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_603": {
                "name_or_scope": {
                    "value": "evolver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_609": {
                "name_or_scope": {
                    "value": "ae",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_873": {
                "device_name": {
                    "value": "model_helper.get_device_str(1, self.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_norm_93": {
                "t_list": {
                    "value": "clipped_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_helper.gradient_clip(gradients, max_gradient_norm=hparams.max_gradient_norm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmor/model_helper.py": {
        "tensorflow": {
            "Graph_57": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_101": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_146": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_207": {
                "variable": {
                    "value": "(clipped_gradients, gradient_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_223": {
                "variable": {
                    "value": "latest_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.check_data(data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(dev_data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(infer_data_file, out_dir)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.check_data(data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(dev_data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(infer_data_file, out_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.check_data(data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(dev_data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(infer_data_file, out_dir)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.check_data(data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(dev_data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(infer_data_file, out_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.check_data(data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(dev_data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(infer_data_file, out_dir)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.check_data(data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(dev_data_file, out_dir)",
                            "Call"
                        ],
                        [
                            "data_utils.check_data(infer_data_file, out_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_179": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_units",
                            "Method Argument"
                        ]
                    ]
                },
                "use_peepholes": {
                    "value": "use_peepholes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_proj": {
                    "value": "num_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_26": {
                "minval": {
                    "value": "-init_weight",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "container_59": {
                "container_name": {
                    "value": "scope or 'train'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "container_103": {
                "container_name": {
                    "value": "scope or 'eval'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "container_148": {
                "container_name": {
                    "value": "scope or 'infer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "glorot_normal_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_74": {
                "device_name": {
                    "value": "model_device_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "global_variables_initializer_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_uniform_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nmor/nMOR.py": {
        "tensorflow": {
            "run_311": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_269": {
                "filename": {
                    "value": "out_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.out_dir",
                            "Attribute"
                        ],
                        [
                            "out_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MakeDirs_269": {
                "dirname": {
                    "value": "out_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.out_dir",
                            "Attribute"
                        ],
                        [
                            "out_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_279": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'ckpt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmor/train.py": {
        "tensorflow": {
            "GFile_166": {
                "variable": {
                    "value": "log_f",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'log_%d' % time.time())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_173": {
                "variable": {
                    "value": "train_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_config_proto(log_device_placement=log_device_placement, num_intra_threads=hparams.num_intra_threads, num_inter_threads=hparams.num_inter_threads)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "train_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_175": {
                "variable": {
                    "value": "eval_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_config_proto(log_device_placement=log_device_placement, num_intra_threads=hparams.num_intra_threads, num_inter_threads=hparams.num_inter_threads)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "eval_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_177": {
                "variable": {
                    "value": "infer_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_config_proto(log_device_placement=log_device_placement, num_intra_threads=hparams.num_intra_threads, num_inter_threads=hparams.num_inter_threads)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "infer_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_185": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(out_dir, summary_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "train_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_160": {
                "filename": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'ckpt')",
                            "Call"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MakeDirs_162": {
                "dirname": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'ckpt')",
                            "Call"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_267": {
                "filename": {
                    "value": "infer_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(hparams.out_dir, 'infer')",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_269": {
                "dirname": {
                    "value": "infer_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(hparams.out_dir, 'infer')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmor/utils/data_utils.py": {
        "tensorflow": {
            "Exists_34": {
                "filename": {
                    "value": "data_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, data_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_17": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_25": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nmor/utils/iterator_utils.py": {
        "tensorflow": {
            "cast_56": {
                "x": {
                    "value": "num_infer_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_infer_steps",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_iter.get_next()",
                            "Call"
                        ],
                        [
                            "batched_iter.get_next()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmor/utils/misc_utils.py": {
        "tensorflow": {
            "Summary_100": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_108": {
                "variable": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "log_device_placement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "allow_soft_placement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_61": {
                "filename": {
                    "value": "hparams_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'hparams.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'hparams.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_80": {
                "filename": {
                    "value": "hparams_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_82": {
                "name": {
                    "value": "hparams_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_92": {
                "name": {
                    "value": "hparams_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'hparams.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'hparams.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_63": {
                "name": {
                    "value": "hparams_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'hparams.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'hparams.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}