{
    "mplp/mplp/core.py": {
        "tensorflow": {
            "enable_v2_behavior_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "self.W_update_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "kernel_init((x_dim, carry_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "self.W_update_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "kernel_init((carry_n, carry_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "self.b_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(-1.0, shape=(carry_n,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "self.W_reset_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "kernel_init((x_dim, carry_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "self.W_reset_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "kernel_init((carry_n, carry_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "self.b_reset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(-1.0, shape=(carry_n,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.next_x_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(80, activation=tf.tanh, input_shape=(x_dim,), kernel_initializer=kernel_init, bias_initializer=bias_init), Dense(40, activation=tf.tanh, kernel_initializer=kernel_init, bias_initializer=bias_init), Dense(carry_n, activation=None, kernel_initializer=kernel_init, use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.next_c_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(80, activation=tf.tanh, input_shape=(carry_n,), kernel_initializer=kernel_init, bias_initializer=bias_init), Dense(40, activation=tf.tanh, kernel_initializer=kernel_init, bias_initializer=bias_init), Dense(carry_n, activation=None, kernel_initializer=kernel_init, use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "self.b_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias_init(carry_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "variable": {
                    "value": "update_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x @ self.W_update_x + carry @ self.W_update_c + self.b_update",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "reset_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x @ self.W_reset_x + carry @ self.W_reset_c + self.b_reset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.out_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "scale_init_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.out_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.update_rule",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(80, activation=tf.nn.relu, input_shape=(in_dim,)), Dense(40, activation=tf.nn.relu), Dense(1, activation=tf.nn.tanh)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_347": {
                "variable": {
                    "value": "self.out_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "scale_init_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_348": {
                "variable": {
                    "value": "self.out_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_368": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_carry[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "self.update_rule(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "y * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "self.mp_net(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=dims_to_reduce)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_370": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_carry[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "self.update_rule(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "y * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "self.mp_net(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=dims_to_reduce)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "variable": {
                    "value": "self.mp_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(80, activation=tf.nn.relu, input_shape=(in_dim,)), Dense(40, activation=tf.nn.relu), Dense(out_message_size, activation=tf.nn.tanh)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_482": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "states[self.pname]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_538": {
                "variable": {
                    "value": "exp_nom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "translated_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs - tf.math.reduce_max(inputs, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_539": {
                "variable": {
                    "value": "exp_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_nom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(translated_inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_541": {
                "variable": {
                    "value": "exp_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_denom[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "repeats": {
                    "value": "exp_nom.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_566": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(x, self.eps, 1.0 - self.eps)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_567": {
                "variable": {
                    "value": "log_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(x, self.eps, 1.0 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_589": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "targets - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "repeat_631": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, self.axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "self.repeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_648": {
                "variable": {
                    "value": "new_states[self.sname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(states[self.sname], self.axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "self.repeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_666": {
                "variable": {
                    "value": "new_states[self.out_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(states[self.sname], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_810": {
                "variable": {
                    "value": "new_states[self.cname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs] + [states[sname] for sname in self.s_names]",
                            "BinOp"
                        ],
                        [
                            "self._translateValues(all_inputs, mean)",
                            "Call"
                        ],
                        [
                            "self._scaleValues(all_inputs, norm)",
                            "Call"
                        ],
                        [
                            "[inputs] + [states[sname] for sname in self.s_names]",
                            "BinOp"
                        ],
                        [
                            "[i - tf.reduce_mean(i) for i in all_inputs]",
                            "ListComp"
                        ],
                        [
                            "[i * _normalizer(i) for i in all_inputs]",
                            "ListComp"
                        ],
                        [
                            "[inputs] + [tf.expand_dims(states[sname], -1) for sname in self.s_names]",
                            "BinOp"
                        ],
                        [
                            "[states[sname] for sname in self.s_names]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_829": {
                "variable": {
                    "value": "new_states[self.cname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs] + [states[sname] for sname in self.s_names]",
                            "BinOp"
                        ],
                        [
                            "self._translateValues(all_inputs, mean)",
                            "Call"
                        ],
                        [
                            "self._scaleValues(all_inputs, norm)",
                            "Call"
                        ],
                        [
                            "[inputs] + [states[sname] for sname in self.s_names]",
                            "BinOp"
                        ],
                        [
                            "[i - tf.reduce_mean(i) for i in all_inputs]",
                            "ListComp"
                        ],
                        [
                            "[i * _normalizer(i) for i in all_inputs]",
                            "ListComp"
                        ],
                        [
                            "[inputs] + [tf.expand_dims(states[sname], -1) for sname in self.s_names]",
                            "BinOp"
                        ],
                        [
                            "[states[sname] for sname in self.s_names]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "glorot_uniform_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[self.carry_n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "out_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(x, self.eps, 1.0 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_273": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_carry[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "self.update_rule(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "y * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "self.mp_net(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=dims_to_reduce)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_377": {
                "variable": {
                    "value": "out_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_carry[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "self.update_rule(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "y * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "self.mp_net(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=dims_to_reduce)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_456": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_carry[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "self.update_rule(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=0)",
                            "Call"
                        ],
                        [
                            "y * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "self.mp_net(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=dims_to_reduce)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "dims_to_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_dims_idx[2:-1]",
                            "Subscript"
                        ],
                        [
                            "all_dims_idx[2:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_std_725": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(x, self.eps, 1.0 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_std_781": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.out_scale",
                            "BinOp"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "states[self.xname]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(x, self.eps, 1.0 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_84": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(carry_n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_88": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(carry_n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_296": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "next_carry[..., -self.out_message_size:]",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reduce_mean(outputs, axis=dims_to_reduce)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, states[self.pname])",
                            "Call"
                        ],
                        [
                            "inputs + states[self.pname]",
                            "BinOp"
                        ],
                        [
                            "self.op(inputs)",
                            "Call"
                        ],
                        [
                            "exp_nom / exp_denom",
                            "BinOp"
                        ],
                        [
                            "-(targets * log_in)",
                            "UnaryOp"
                        ],
                        [
                            "tf.abs(targets - x)",
                            "Call"
                        ],
                        [
                            "diff ** 2 / 2",
                            "BinOp"
                        ],
                        [
                            "tf.repeat(tf.expand_dims(inputs, self.axis), self.repeats, axis=self.axis)",
                            "Call"
                        ],
                        [
                            "all_inputs[0]",
                            "Subscript"
                        ],
                        [
                            "all_inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "dims_to_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_dims_idx[2:-1]",
                            "Subscript"
                        ],
                        [
                            "all_dims_idx[2:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normal_487": {
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "self.p_sd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_535": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_631": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_649": {
                "input": {
                    "value": "states[self.sname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_667": {
                "input": {
                    "value": "states[self.sname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_679": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_680": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_726": {
                "pred": {
                    "value": "std < eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0 / std",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_782": {
                "pred": {
                    "value": "std < 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0 / std",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dense_92": {
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(x_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.zeros()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_94": {
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.zeros()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_96": {
                "units": {
                    "value": "carry_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0 if pname is None else 1) + hidden_n + (0 if out_message_size is None else out_message_size)",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform()",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_99": {
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(carry_n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.zeros()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_101": {
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.zeros()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_103": {
                "units": {
                    "value": "carry_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0 if pname is None else 1) + hidden_n + (0 if out_message_size is None else out_message_size)",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform()",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "x": {
                    "value": "self.next_x_net(x) + self.next_c_net(reset_t * carry) + self.b_next",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_344": {
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(in_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_345": {
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_346": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_432": {
                "units": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(in_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_433": {
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_434": {
                "units": {
                    "value": "out_message_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_732": {
                "input_tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_786": {
                "input_tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_808": {
                "input": {
                    "value": "states[sname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mplp/mplp/sinusoidals.py": {
        "tensorflow": {
            "batch_45": {
                "tensors": {
                    "value": "outer_batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mplp/mplp/tf_layers.py": {
        "tensorflow": {
            "enable_v2_behavior_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_791": {
                "variable": {
                    "value": "all_weights_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.all_weights_structure",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_813": {
                "variable": {
                    "value": "pfw_f_split",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pfw_f",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.pfw_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_sequence_as_820": {
                "variable": {
                    "value": "fw_params",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "fw_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ],
                        [
                            "fw_params[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ],
                        [
                            "fw_params[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_831": {
                "variable": {
                    "value": "fw_params",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "fw_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ],
                        [
                            "fw_params[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ],
                        [
                            "fw_params[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_844": {
                "variable": {
                    "value": "updated_params",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "updated_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nest.flatten(updated_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_865": {
                "variable": {
                    "value": "fw_params",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "fw_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ],
                        [
                            "fw_params[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ],
                        [
                            "fw_params[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.nest.pack_sequence_as(self.structure, fw_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_868": {
                "variable": {
                    "value": "m_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_885": {
                "variable": {
                    "value": "updated_fw_params",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "updated_fw_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nest.flatten(updated_fw_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_911": {
                "variable": {
                    "value": "acc_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "all_stats[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "acc_stats_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(s) for s in zip(*stats_f)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "flatten_941": {
                "variable": {
                    "value": "network_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "network_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l.get_all_weights() for l in self.layers + [self.loss_layer]]",
                            "ListComp"
                        ],
                        [
                            "network_weights + [l.weights for l in self.shared_params.values()]",
                            "BinOp"
                        ],
                        [
                            "tf.nest.flatten(network_weights)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(e, [-1]) for e in network_weights], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_942": {
                "variable": {
                    "value": "network_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(e, [-1]) for e in network_weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_963": {
                "variable": {
                    "value": "all_weights_flat_split",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "serialized_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(fin)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.all_weights_flat_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_sequence_as_968": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.all_weights_structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "all_weights_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.flatten(self.all_weights_structure)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(t, s) for (t, s) in zip(all_weights_flat_split, self.all_weights_flat_shapes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "broadcast_to_285": {
                "variable": {
                    "value": "W_bw_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_bw_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_bw_arrow.init()[self.W_cname]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(W_bw_carry, (inner_batch_size,) + W.shape + (W_bw_carry.shape[0],))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(inner_batch_size,) + W.shape + (W_bw_carry.shape[0],)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_to_289": {
                "variable": {
                    "value": "b_bw_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_bw_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.b_bw_arrow.init()[self.b_cname]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(b_bw_carry, (inner_batch_size,) + b.shape + (b_bw_carry.shape[0],))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(inner_batch_size,) + b.shape + (b_bw_carry.shape[0],)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_to_433": {
                "variable": {
                    "value": "bw_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bw_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ],
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ],
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(inner_batch_size, self.in_dim) + (bw_carry.shape[0],)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_to_541": {
                "variable": {
                    "value": "bw_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bw_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ],
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ],
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(inner_batch_size, self.in_dim) + (bw_carry.shape[0],)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_to_651": {
                "variable": {
                    "value": "bw_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bw_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ],
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ],
                        [
                            "self.bw_arrow.init()[self.carry_name]",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(bw_carry, (inner_batch_size, self.in_dim) + (bw_carry.shape[0],))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(inner_batch_size, self.in_dim) + (bw_carry.shape[0],)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_799": {
                "structure": {
                    "value": "self._init_nested(inner_batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_809": {
                "values": {
                    "value": "[tf.reshape(e, [-1]) for e in pfw]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_814": {
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_853": {
                "input_tensor": {
                    "value": "d * d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_909": {
                "structure": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_910": {
                "input_tensor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GFile_947": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_fn + '_{:08d}.npy'.format(step)",
                            "BinOp"
                        ],
                        [
                            "filenames[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "glob_954": {
                "pattern": {
                    "value": "matcher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_fn + '_*.npy'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GFile_959": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_fn + '_{:08d}.npy'.format(step)",
                            "BinOp"
                        ],
                        [
                            "filenames[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_965": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_809": {
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_943": {
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_783": {
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_796": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mplp/mplp/training.py": {
        "tensorflow": {
            "enable_v2_behavior_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "xrem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, xt.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "yrem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, yt.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "xt_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, xt.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "yt_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, yt.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_103": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inner_batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "xt_flat.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_105": {
                "variable": {
                    "value": "xfinal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "xt_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xt, [-1, xt.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([inner_batch_size], minval=0, maxval=xt_flat.shape[0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_106": {
                "variable": {
                    "value": "yfinal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "yt_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(yt, [-1, yt.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([inner_batch_size], minval=0, maxval=xt_flat.shape[0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_49": {
                "variable": {
                    "value": "pfw",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "tf.stop_gradient",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "pfw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(tf.stop_gradient, pfw)",
                            "Call"
                        ],
                        [
                            "pfw_b if same_pfw else pfw_b[i]",
                            "IfExp"
                        ],
                        [
                            "self.network.deserialize_pfw(pfw)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_86": {
                "x": {
                    "value": "num_loops",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "x": {
                    "value": "num_loops",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "tf.stack(task_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_158": {
                "values": {
                    "value": "task_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_i)",
                            "Call"
                        ],
                        [
                            "loss_i * tf.cond(i > 0, lambda : 1.0, lambda : 0.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_67": {
                "variable": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "observed_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "observed_x + inner_batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "uniform_68": {
                "variable": {
                    "value": "rem_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inner_batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(1, observed_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_72": {
                "variable": {
                    "value": "xremi",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "xrem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xt, [-1, xt.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rem_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([inner_batch_size], minval=minval, maxval=maxval, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_73": {
                "variable": {
                    "value": "yremi",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "yrem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(yt, [-1, yt.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rem_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([inner_batch_size], minval=minval, maxval=maxval, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_i)",
                            "Call"
                        ],
                        [
                            "loss_i * tf.cond(i > 0, lambda : 1.0, lambda : 0.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_i)",
                            "Call"
                        ],
                        [
                            "loss_i * tf.cond(i > 0, lambda : 1.0, lambda : 0.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_123": {
                "input_tensor": {
                    "value": "hloss_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(hloss_i) * final_loss_ratio",
                            "BinOp"
                        ],
                        [
                            "hloss_i * self.heldout_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_159": {
                "input_tensor": {
                    "value": "tf.stack(hint_rem_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_159": {
                "values": {
                    "value": "hint_rem_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cond_79": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "self_organising_systems/shared/util.py": {
        "tensorflow": {
            "GFile_42": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "url",
                            "Name"
                        ],
                        [
                            "io.BytesIO(r.content)",
                            "Call"
                        ],
                        [
                            "GFile(url, mode='rb')",
                            "Call"
                        ],
                        [
                            "GFile(f, mode='wb')",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_19": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "url",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "self_organising_systems/shared/video.py": {
        "tensorflow": {
            "copy_50": {
                "a": {
                    "value": "self.tempfilename",
                    "type": "Attribute",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "remove_51": {
                "path": {
                    "value": "self.tempfilename",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "self_organising_systems/texture_ca/ca.py": {
        "tensorflow": {
            "concat_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x[:, -pad:], x, x[:, :pad]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x[:, :, -pad:], x, x[:, :, :pad]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fake_quant_with_min_max_vars_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x[:, -pad:], x, x[:, :pad]], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x[:, :, -pad:], x, x[:, :, :pad]], 2)",
                            "Call"
                        ],
                        [
                            "pad_repeat(x, 1)",
                            "Call"
                        ],
                        [
                            "x + dx * tf.cast(update_mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "qfunc(x, min=-cfg.texture_ca.q, max=cfg.texture_ca.q)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "max": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_26": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(tf.abs(w))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_43": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([identify, c * dx - s * dy, s * dx + c * dy, laplacian], -1)[:, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.repeat(kernel, chn, 2)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "chn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_48": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x[:, -pad:], x, x[:, :pad]], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x[:, :, -pad:], x, x[:, :, :pad]], 2)",
                            "Call"
                        ],
                        [
                            "pad_repeat(x, 1)",
                            "Call"
                        ],
                        [
                            "x + dx * tf.cast(update_mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "qfunc(x, min=-cfg.texture_ca.q, max=cfg.texture_ca.q)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([identify, c * dx - s * dy, s * dx + c * dy, laplacian], -1)[:, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.repeat(kernel, chn, 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_54": {
                "variable": {
                    "value": "w0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[init_fn([in_n, out_n]), tf.zeros([1, out_n])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "w0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([init_fn([in_n, out_n]), tf.zeros([1, out_n])], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "glorot_normal_74": {
                "variable": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "cfg.texture_ca.fixed_seed or None",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "GradientTape_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_26": {
                "input_tensor": {
                    "value": "tf.abs(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x[:, -pad:], x, x[:, :pad]], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x[:, :, -pad:], x, x[:, :, :pad]], 2)",
                            "Call"
                        ],
                        [
                            "pad_repeat(x, 1)",
                            "Call"
                        ],
                        [
                            "x + dx * tf.cast(update_mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "qfunc(x, min=-cfg.texture_ca.q, max=cfg.texture_ca.q)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_41": {
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sin_41": {
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_42": {
                "values": {
                    "value": "[identify, c * dx - s * dy, s * dx + c * dy, laplacian]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "glorot_uniform_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer1(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_26": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_quant(w, -bound, bound)",
                            "Call"
                        ],
                        [
                            "fake_param_quant(self.w)",
                            "Call"
                        ],
                        [
                            "w[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_87": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x[:, -pad:], x, x[:, :pad]], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x[:, :, -pad:], x, x[:, :, :pad]], 2)",
                            "Call"
                        ],
                        [
                            "pad_repeat(x, 1)",
                            "Call"
                        ],
                        [
                            "x + dx * tf.cast(update_mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "qfunc(x, min=-cfg.texture_ca.q, max=cfg.texture_ca.q)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GFile_115": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_119": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "shape": {
                    "value": "[1, out_n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x[:, -pad:], x, x[:, :pad]], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x[:, :, -pad:], x, x[:, :, :pad]], 2)",
                            "Call"
                        ],
                        [
                            "pad_repeat(x, 1)",
                            "Call"
                        ],
                        [
                            "x + dx * tf.cast(update_mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "qfunc(x, min=-cfg.texture_ca.q, max=cfg.texture_ca.q)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_quant(w, -bound, bound)",
                            "Call"
                        ],
                        [
                            "fake_param_quant(self.w)",
                            "Call"
                        ],
                        [
                            "w[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "uniform_101": {
                "shape": {
                    "value": "tf.shape(x[:, :, :, :1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(x[:, :, :, :1])) <= fire_rate",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "x[:, :, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "self_organising_systems/texture_ca/losses.py": {
        "tensorflow": {
            "VGG16_13": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_17": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "[vgg.input]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style_layers + [content_layer]",
                            "BinOp"
                        ],
                        [
                            "{name: vgg.get_layer(name).output for name in layers}",
                            "DictComp"
                        ],
                        [
                            "self.model(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_35": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.style_loss(gs, self.target_style)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_43": {
                "variable": {
                    "value": "(n, h, w, ch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_45": {
                "variable": {
                    "value": "gram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhwc, bhwd -> bcd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a + 1.0) - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a + 1.0) - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "overflow_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.clip_by_value(x, 0.0, 1.0) - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "import_graph_def_66": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "self.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input': imgs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.import_graph_def(self.graph_def, {'input': imgs}, self.outputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_40": {
                "inputs": {
                    "value": "[tf.reduce_mean(tf.square(x - y), [-2, -1]) for (x, y) in zip(a, b)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a + 1.0) - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_44": {
                "x": {
                    "value": "a + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_46": {
                "x": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_50": {
                "name": {
                    "value": "cfg.texture_ca.inception_pb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_64": {
                "x": {
                    "value": "tf.clip_by_value(x, 0.0, 1.0) - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "tf.square(x - y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "a[..., self.ch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_40": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_64": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "self_organising_systems/texture_ca/texture_synth.py": {
        "tensorflow": {
            "enable_v2_behavior_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_61": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.experiment_log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PiecewiseConstantDecay_76": {
                "variable": {
                    "value": "lr_sched",
                    "type": "variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "[1000]",
                    "type": "List",
                    "possible_values": []
                },
                "values": {
                    "value": "[tcfg.lr, tcfg.lr * 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "self.trainer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_sched",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PiecewiseConstantDecay([1000], [tcfg.lr, tcfg.lr * 0.1])",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_112": {
                "variable": {
                    "value": "iter_n",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "tcfg.rollout_len_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tcfg.rollout_len_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_84": {
                "name": {
                    "value": "batch_vis",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "vis[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_106": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_model(to_rgb(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_113": {
                "persistent": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_119": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}