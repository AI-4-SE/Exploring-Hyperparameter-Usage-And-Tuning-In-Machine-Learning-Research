{
    "tiny_face_eval.py": {
        "tensorflow": {
            "placeholder_92": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "non_max_suppression_202": {
                "variable": {
                    "value": "refind_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "tf.convert_to_tensor(bboxes[:, :4], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "scores": {
                    "value": "tf.convert_to_tensor(bboxes[:, 4], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_output_size": {
                    "value": "bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "nms_thresh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Graph_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_202": {
                "value": {
                    "value": "bboxes[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_203": {
                "value": {
                    "value": "bboxes[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tiny_face_model.py": {
        "tensorflow": {
            "constant_initializer_44": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name + '_filter')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_63": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name + '_bias')",
                            "Call"
                        ],
                        [
                            "self._bias_variable_on_cpu(name, shape[3])",
                            "Call"
                        ],
                        [
                            "self._bias_variable_on_cpu(name, shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_127": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._weight_variable_on_cpu(name, shape)",
                            "Call"
                        ],
                        [
                            "self._weight_variable_on_cpu(name, shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_162": {
                "variable": {
                    "value": "(nb, h, w, nc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(bottom)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_164": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._weight_variable_on_cpu(name, shape)",
                            "Call"
                        ],
                        [
                            "self._weight_variable_on_cpu(name, shape)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([nb, (h - 1) * strides[1] - 3 + shape[0], (w - 1) * strides[2] - 3 + shape[1], nc])[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_194": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_block(bottom, name + '_branch2a', shape=[1, 1, in_channel, neck_channel], strides=_strides, padding='VALID', add_relu=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block(res, name + '_branch2b', shape=[3, 3, neck_channel, neck_channel], padding='SAME', add_relu=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block(res, name + '_branch2c', shape=[1, 1, neck_channel, out_channel], padding='VALID', add_relu=False)",
                            "Call"
                        ],
                        [
                            "trunk + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_206": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [3, 3], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_208": {
                "variable": {
                    "value": "pool1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, weight, strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(bottom, weight, output_shape, strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bias) if has_bias else conv",
                            "IfExp"
                        ],
                        [
                            "self.conv_block(img, 'conv1', shape=[7, 7, 3, 64], strides=[1, 2, 2, 1], padding='VALID', add_relu=True)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_236": {
                "variable": {
                    "value": "_size",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[height[0], width[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "_offsets",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs[0], 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "extract_glimpse_238": {
                "variable": {
                    "value": "score_res3c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "score_res3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_block(res3b3, 'score_res3', shape=[1, 1, 512, 125], padding='VALID', has_bias=True, add_bn=False, add_relu=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([height[0], width[0]])",
                            "Call"
                        ]
                    ]
                },
                "offsets": {
                    "value": "_offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([bs[0], 2])",
                            "Call"
                        ]
                    ]
                },
                "centered": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(weights, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(bias, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(scale, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(offset, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(mean, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(variance, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(weights, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(bias, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(scale, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(offset, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(mean, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(variance, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_92": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_scale')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_scale', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name2 + '_scale'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(weights, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(bias, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(scale, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(offset, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(mean, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(variance, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_94": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_offset')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_offset', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name2 + '_offset'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(weights, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(bias, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(scale, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(offset, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(mean, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(variance, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_96": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_mean')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_mean', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name2 + '_mean'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(weights, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(bias, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(scale, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(offset, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(mean, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(variance, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_98": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "variance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_variance')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_variance', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "variance",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name2 + '_variance'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(weights, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(bias, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(scale, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(offset, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(mean, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(variance, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_136": {
                "variable": {
                    "value": "pre_activation",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, bias) if has_bias else conv",
                            "IfExp"
                        ],
                        [
                            "tf.nn.batch_normalization(pre_activation, mean, variance, offset, scale, variance_epsilon=eps)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_mean')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_mean', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_variance')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_variance', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_offset')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_offset', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name2 + '_scale')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name2 + '_scale', shape, initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_46": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_65": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_91": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_131": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, weight, strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(bottom, weight, output_shape, strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bias) if has_bias else conv",
                            "IfExp"
                        ],
                        [
                            "self.conv_block(img, 'conv1', shape=[7, 7, 3, 64], strides=[1, 2, 2, 1], padding='VALID', add_relu=True)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name + '_bias')",
                            "Call"
                        ],
                        [
                            "self._bias_variable_on_cpu(name, shape[3])",
                            "Call"
                        ],
                        [
                            "self._bias_variable_on_cpu(name, shape[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_138": {
                "features": {
                    "value": "pre_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, bias) if has_bias else conv",
                            "IfExp"
                        ],
                        [
                            "tf.nn.batch_normalization(pre_activation, mean, variance, offset, scale, variance_epsilon=eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_162": {
                "input": {
                    "value": "bottom",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_163": {
                "values": {
                    "value": "[nb, (h - 1) * strides[1] - 3 + shape[0], (w - 1) * strides[2] - 3 + shape[1], nc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_168": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, weight, strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(bottom, weight, output_shape, strides, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bias) if has_bias else conv",
                            "IfExp"
                        ],
                        [
                            "self.conv_block(img, 'conv1', shape=[7, 7, 3, 64], strides=[1, 2, 2, 1], padding='VALID', add_relu=True)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_data_by_key(name + '_bias')",
                            "Call"
                        ],
                        [
                            "self._bias_variable_on_cpu(name, shape[3])",
                            "Call"
                        ],
                        [
                            "self._bias_variable_on_cpu(name, shape[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_235": {
                "value": {
                    "value": "tf.shape(score4)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_235": {
                "input": {
                    "value": "score4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_trans_layer(score_res4, 'score4', shape=[4, 4, 125, 125], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}