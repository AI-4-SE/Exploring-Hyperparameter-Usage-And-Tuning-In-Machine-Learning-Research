{
    "lib/core/conv.py": {
        "torch": {
            "Conv2d_6": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/core/criterion.py": {
        "torch": {
            "CrossEntropyLoss_12": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_20": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(score, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(score, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_43": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(score, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(score, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/core/function.py": {
        "torch": {
            "from_numpy_115": {
                "variable": {
                    "value": "tot_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tot_inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(config.DATASET.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tot_inter).to(device)",
                            "Call"
                        ],
                        [
                            "reduce_tensor(tot_inter).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "tot_inter + inter",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "tot_union",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tot_union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(config.DATASET.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tot_union).to(device)",
                            "Call"
                        ],
                        [
                            "reduce_tensor(tot_union).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "tot_union + union",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_101": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image, label)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "test_dataset.multi_scale_inference(model, image, scales=config.TEST.SCALE_LIST, flip=config.TEST.FLIP_TEST)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, (size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "test_dataset.multi_scale_inference(model, image, scales=config.TEST.SCALE_LIST, flip=config.TEST.FLIP_TEST)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, (size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(size[-2], size[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image, label)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "test_dataset.multi_scale_inference(model, image, scales=config.TEST.SCALE_LIST, flip=config.TEST.FLIP_TEST)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, (size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "test_dataset.multi_scale_inference(model, image, scales=config.TEST.SCALE_LIST, flip=config.TEST.FLIP_TEST)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, (size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(size[-2], size[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_191": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image, label)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "test_dataset.multi_scale_inference(model, image, scales=config.TEST.SCALE_LIST, flip=config.TEST.FLIP_TEST)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, (size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "test_dataset.multi_scale_inference(model, image, scales=config.TEST.SCALE_LIST, flip=config.TEST.FLIP_TEST)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, (size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(size[-2], size[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/core/psp.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "interpolate_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "OrderedDict([('pool', nn.AdaptiveAvgPool2d(s)), ('conv', conv1x1(in_channels, out_channels)), ('norm', norm_layer(out_channels)), ('relu', nn.ReLU(True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_23": {
                "output_size": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/core/self_attention.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', conv1x1(self.in_channels, self.key_channels)), ('norm', norm_layer(self.key_channels)), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.f_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', conv1x1(self.in_channels, self.key_channels)), ('norm', norm_layer(self.key_channels)), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', conv1x1(self.in_channels, self.value_channels)), ('norm', norm_layer(self.value_channels)), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', conv1x1(self.value_channels, self.out_channels)), ('norm', norm_layer(self.out_channels)), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_query(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_key(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_value(x).view(batch_size, self.value_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_78": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(sim_map, value)",
                            "Call"
                        ],
                        [
                            "context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "context.view(batch_size, self.value_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=context, size=(h, w), **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/ade20k.py": {
        "torch": {}
    },
    "lib/datasets/base_dataset.py": {
        "torch": {
            "interpolate_151": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image.cuda())",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(pred, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred + flip_pred",
                            "BinOp"
                        ],
                        [
                            "pred * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.inference(model, crop_img, flip)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(size[-2], size[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image.cuda())",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(pred, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred + flip_pred",
                            "BinOp"
                        ],
                        [
                            "pred * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.inference(model, crop_img, flip)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "final_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes, ori_height, ori_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_158": {
                "variable": {
                    "value": "flip_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(torch.from_numpy(flip_img.copy()).cuda())",
                            "Call"
                        ],
                        [
                            "flip_output[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flip_output, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(size[-2], size[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "flip_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flip_pred[:, :, :, ::-1].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_225": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, new_img, flip)",
                            "Call"
                        ],
                        [
                            "preds[:, :, 0:height, 0:width]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(preds, (ori_height, ori_width), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros([1, self.num_classes, new_h, new_w]).cuda()",
                            "Call"
                        ],
                        [
                            "preds / count",
                            "BinOp"
                        ],
                        [
                            "preds[:, :, :height, :width]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(ori_height, ori_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "new_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_scale_aug(image=image, rand_scale=scale, rand_crop=False)",
                            "Call"
                        ],
                        [
                            "self.pad_image(new_img, height, width, self.crop_size, padvalue)",
                            "Call"
                        ],
                        [
                            "new_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(new_img, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(new_img)",
                            "Call"
                        ],
                        [
                            "self.pad_image(new_img, height, width, self.crop_size, padvalue)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes, new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "ndarray": {
                    "value": "flip_img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "crop_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "crop_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_img[h0:h1, w0:w1, :]",
                            "Subscript"
                        ],
                        [
                            "self.pad_image(crop_img, h1 - h0, w1 - w0, self.crop_size, padvalue)",
                            "Call"
                        ],
                        [
                            "crop_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(crop_img, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(crop_img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/cityscapes.py": {
        "torch": {
            "zeros_137": {
                "variable": {
                    "value": "final_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes, ori_height, ori_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_178": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, new_img, flip)",
                            "Call"
                        ],
                        [
                            "preds[:, :, 0:height, 0:width]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros([1, self.num_classes, new_h, new_w]).cuda()",
                            "Call"
                        ],
                        [
                            "F.interpolate(preds, (ori_height, ori_width), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "preds / count",
                            "BinOp"
                        ],
                        [
                            "preds[:, :, :height, :width]",
                            "Subscript"
                        ],
                        [
                            "np.asarray(np.argmax(preds, axis=1), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(ori_height, ori_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "new_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_scale_aug(image=image, rand_scale=scale, rand_crop=False)",
                            "Call"
                        ],
                        [
                            "new_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(new_img, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(new_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes, new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "crop_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "crop_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_img[h0:h1, w0:w1, :]",
                            "Subscript"
                        ],
                        [
                            "crop_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(crop_img, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(crop_img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/lip.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "self.flip_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(14)) + [15, 14, 17, 16, 19, 18]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image.cuda())",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(pred, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred + flip_pred",
                            "BinOp"
                        ],
                        [
                            "pred * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(size[-2], size[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image.cuda())",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(pred, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred + flip_pred",
                            "BinOp"
                        ],
                        [
                            "pred * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_116": {
                "variable": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(image, size, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(os.path.join(self.img_dir, item['img']), cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, self.crop_size[::-1], interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "self.input_transform(image)",
                            "Call"
                        ],
                        [
                            "image.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "image[:, ::flip, :]",
                            "Subscript"
                        ],
                        [
                            "self.resize_image(image, label, self.crop_size)",
                            "Call"
                        ],
                        [
                            "self.gen_sample(image, label, self.multi_scale, False)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_120": {
                "variable": {
                    "value": "flip_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(flip_img.cuda())",
                            "Call"
                        ],
                        [
                            "flip_output[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flip_output, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(size[-2], size[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_122": {
                "variable": {
                    "value": "flip_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(flip_img.cuda())",
                            "Call"
                        ],
                        [
                            "flip_output[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(flip_output, size=(size[-2], size[-1]), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.flip_idx.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_123": {
                "variable": {
                    "value": "flip_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(flip_output, dim=1, index=self.flip_idx.cuda())",
                            "Call"
                        ],
                        [
                            "torch.flip(flip_pred, [3])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/mscoco.py": {
        "torch": {
            "load_71": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "ids_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.root, 'annotations/voc_coco_pretrain_val_ids.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.root, 'annotations/voc_coco_pretrain_train_ids.pth')",
                            "Call"
                        ],
                        [
                            "ids_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_155": {
                "obj": {
                    "value": "new_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "ids_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.root, 'annotations/voc_coco_pretrain_val_ids.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.root, 'annotations/voc_coco_pretrain_train_ids.pth')",
                            "Call"
                        ],
                        [
                            "ids_file",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/pascal_aug.py": {
        "torch": {}
    },
    "lib/datasets/pascal_ctx.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "mask_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.root, 'val.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.root, 'train.pth')",
                            "Call"
                        ],
                        [
                            "mask_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "mask_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.root, 'val.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.root, 'train.pth')",
                            "Call"
                        ],
                        [
                            "mask_file",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/pascal_voc.py": {
        "torch": {}
    },
    "lib/models/backbone/resnet.py": {
        "torch": {
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', conv3x3(3, stem_width, 2)), ('norm1', norm_layer(stem_width)), ('relu1', nn.ReLU(inplace=True)), ('conv2', conv3x3(stem_width, stem_width)), ('norm2', norm_layer(stem_width)), ('relu2', nn.ReLU(inplace=True)), ('conv3', conv3x3(stem_width, stem_width * 2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(downsample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_219": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_166": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/segnet.py": {
        "torch": {
            "transpose_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batchsize, self.groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "PixelShuffle_94": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "upscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upscale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('flatten', _flatten_layer), ('dropout', nn.Dropout2d(extra.DROP1)), ('pred', nn.Conv2d(_flatten_layer.inp // extra.UPSCALE1 ** 2, self.nclass, 1, bias=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('flatten', _aux_flatten_layer), ('dropout', nn.Dropout2d(extra.DROP2)), ('pred', nn.Conv2d(_aux_flatten_layer.inp // extra.UPSCALE2 ** 2, self.nclass, kernel_size=1, bias=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.head_alpha_nwd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "OrderedDict([('conv1', conv1), ('norm1', norm1), ('cs', ChannelShuffle(groups[i])), ('conv2', conv2), ('norm2', norm2), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_132": {
                "p": {
                    "value": "extra.DROP1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "_flatten_layer.inp // extra.UPSCALE1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_146": {
                "p": {
                    "value": "extra.DROP2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "_aux_flatten_layer.inp // extra.UPSCALE2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/lr_scheduler.py": {
        "torch": {}
    },
    "lib/utils/metric.py": {
        "torch": {
            "max_49": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_68": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/modelsummary.py": {
        "torch": {
            "prod_63": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.data.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_65": {
                "input": {
                    "value": "torch.LongTensor(list(output.size())[2:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_68": {
                "input": {
                    "value": "torch.LongTensor(list(output.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/utils.py": {
        "torch": {
            "SGD_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "config.TRAIN.NESTEROV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "config.TRAIN.AMSGRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "rand_70": {
                "variable": {
                    "value": "dump_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, config.TRAIN.IMAGE_SIZE[1], config.TRAIN.IMAGE_SIZE[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_state_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.TEST.MODEL_FILE",
                            "Attribute"
                        ],
                        [
                            "os.path.join(final_output_dir, 'final_state.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TEST_SET, num_samples=None, num_classes=config.DATASET.NUM_CLASSES, multi_scale=False, flip=False, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TEST.BASE_SIZE, crop_size=tuple(config.TEST.IMAGE_SIZE))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args.local_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TRAIN_SET, num_samples=None, num_classes=config.DATASET.NUM_CLASSES, multi_scale=config.TRAIN.MULTI_SCALE, flip=config.TRAIN.FLIP, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TRAIN.BASE_SIZE, crop_size=tuple(config.TRAIN.IMAGE_SIZE), scale_factor=config.TRAIN.SCALE_FACTOR)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TRAIN.BATCH_SIZE_PER_GPU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.TRAIN.SHUFFLE and train_sampler is None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TEST_SET, num_samples=config.TEST.NUM_SAMPLES, num_classes=config.DATASET.NUM_CLASSES, multi_scale=False, flip=False, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TEST.BASE_SIZE, crop_size=tuple(config.TEST.IMAGE_SIZE))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TEST.BATCH_SIZE_PER_GPU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "rand_90": {
                "variable": {
                    "value": "dump_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, config.TRAIN.IMAGE_SIZE[0], config.TRAIN.IMAGE_SIZE[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedSampler_124": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TRAIN_SET, num_samples=None, num_classes=config.DATASET.NUM_CLASSES, multi_scale=config.TRAIN.MULTI_SCALE, flip=config.TRAIN.FLIP, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TRAIN.BASE_SIZE, crop_size=tuple(config.TRAIN.IMAGE_SIZE), scale_factor=config.TRAIN.SCALE_FACTOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_151": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TEST_SET, num_samples=config.TEST.NUM_SAMPLES, num_classes=config.DATASET.NUM_CLASSES, multi_scale=False, flip=False, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TEST.BASE_SIZE, crop_size=tuple(config.TEST.IMAGE_SIZE))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_179": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('models.' + config.MODEL.NAME + '.get_seg_model')(config)",
                            "Call"
                        ],
                        [
                            "FullModel(model, criterion)",
                            "Call"
                        ],
                        [
                            "nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_104": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_state_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(final_output_dir, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'best_mIoU': best_mIoU, 'state_dict': model.module.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_dir, 'checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_dir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_dir, 'final_state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_ft.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args.local_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TRAIN_SET, num_samples=None, num_classes=config.DATASET.NUM_CLASSES, multi_scale=config.TRAIN.MULTI_SCALE, flip=config.TRAIN.FLIP, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TRAIN.BASE_SIZE, crop_size=tuple(config.TRAIN.IMAGE_SIZE), scale_factor=config.TRAIN.SCALE_FACTOR)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TRAIN.BATCH_SIZE_PER_GPU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.TRAIN.SHUFFLE and train_sampler is None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TEST_SET, num_samples=config.TEST.NUM_SAMPLES, num_classes=config.DATASET.NUM_CLASSES, multi_scale=False, flip=False, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TEST.BASE_SIZE, crop_size=tuple(config.TEST.IMAGE_SIZE))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TEST.BATCH_SIZE_PER_GPU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "load_177": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_state_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.PRETRAINED",
                            "Attribute"
                        ],
                        [
                            "os.path.join(final_output_dir, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_91": {
                "variable": {
                    "value": "dump_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, config.TRAIN.IMAGE_SIZE[0], config.TRAIN.IMAGE_SIZE[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedSampler_124": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TRAIN_SET, num_samples=None, num_classes=config.DATASET.NUM_CLASSES, multi_scale=config.TRAIN.MULTI_SCALE, flip=config.TRAIN.FLIP, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TRAIN.BASE_SIZE, crop_size=tuple(config.TRAIN.IMAGE_SIZE), scale_factor=config.TRAIN.SCALE_FACTOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_151": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('datasets.' + config.DATASET.DATASET)(root=config.DATASET.ROOT, list_path=config.DATASET.TEST_SET, num_samples=config.TEST.NUM_SAMPLES, num_classes=config.DATASET.NUM_CLASSES, multi_scale=False, flip=False, ignore_label=config.TRAIN.IGNORE_LABEL, base_size=config.TEST.BASE_SIZE, crop_size=tuple(config.TEST.IMAGE_SIZE))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_191": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('models.' + config.MODEL.NAME + '.get_seg_model')(config)",
                            "Call"
                        ],
                        [
                            "FullModel(model, criterion)",
                            "Call"
                        ],
                        [
                            "nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_104": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_state_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.PRETRAINED",
                            "Attribute"
                        ],
                        [
                            "os.path.join(final_output_dir, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'best_mIoU': best_mIoU, 'state_dict': model.module.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_dir, 'checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_dir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_dir, 'final_state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}