{
    "run_prl.py": {
        "sklearn": {
            "load_svmlight_file_50": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "options['dataset']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "train_test_split_60": {
                "variable": {
                    "value": "(Xtr, Xte, ytr, yte)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "options['test_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "manage_options()",
                            "Call"
                        ],
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "options['seed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "manage_options()",
                            "Call"
                        ],
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "MinMaxScaler_63": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_68": {
                "variable": {
                    "value": "Xtr",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "Xtr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=options['test_size'], random_state=options['seed'])",
                            "Call"
                        ],
                        [
                            "scaler.transform(Xtr)",
                            "Call"
                        ],
                        [
                            "normalize(Xtr)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_69": {
                "variable": {
                    "value": "Xte",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "Xte",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=options['test_size'], random_state=options['seed'])",
                            "Call"
                        ],
                        [
                            "scaler.transform(Xte)",
                            "Call"
                        ],
                        [
                            "normalize(Xte)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}