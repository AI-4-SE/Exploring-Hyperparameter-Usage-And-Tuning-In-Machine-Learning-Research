{
    "components/attention.py": {
        "torch": {
            "weight_norm_11": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_19": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "vq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "[0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "weight_norm_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_64": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "BCNet(x_dim, y_dim, z_dim, glimpse, dropout=dropout, k=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_mat",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, self.glimpse, v_num * q_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "num_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "num_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "components/classifier.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "weight_norm_9": {
                "module": {
                    "value": "nn.Linear(in_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_11": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_12": {
                "module": {
                    "value": "nn.Linear(hid_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "components/cosine_layers.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(input, p=2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight, p=2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "components/counting.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PiecewiseLin(16) for _ in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_135": {
                "variable": {
                    "value": "min_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a[:, :2, :].unsqueeze(dim=3).expand(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_139": {
                "variable": {
                    "value": "max_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a[:, 2:, :].unsqueeze(dim=3).expand(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_152": {
                "*size": {
                    "value": "n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "components/fc.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "input": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool1d_53": {
                "variable": {
                    "value": "self.p_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_25": {
                "module": {
                    "value": "nn.Linear(dims[-2], dims[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.h_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, h_out, 1, h_dim * self.k).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.h_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, h_out, 1, 1).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_61": {
                "variable": {
                    "value": "self.h_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(h_dim, h_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ * self.h_mat",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_20": {
                "module": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "[0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "[0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "components/language_model.py": {
        "torch": {
            "Embedding_17": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(np_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "(forward_, backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout_before_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_before_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_137": {
                "variable": {
                    "value": "self.dropout_after_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_after_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_176": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(forward_, backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "components/multi_modal_core.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.mmc_sizes[mmc_ix - 1]",
                            "Subscript"
                        ],
                        [
                            "self.v_dim",
                            "Attribute"
                        ],
                        [
                            "self.v_dim + self.q_emb_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_s + config.q_emb_dim",
                            "BinOp"
                        ],
                        [
                            "config.mmc_sizes[mmc_ix]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.mmc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.mmc_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.batch_norm_mmc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.mmc_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout2d_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "variable": {
                    "value": "self.batch_norm_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.mmc_sizes[mmc_ix - 1]",
                            "Subscript"
                        ],
                        [
                            "self.v_dim",
                            "Attribute"
                        ],
                        [
                            "self.v_dim + self.q_emb_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.batch_norm_before_aggregation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_s + config.q_emb_dim",
                            "BinOp"
                        ],
                        [
                            "config.mmc_sizes[mmc_ix]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "components/nonlinearity.py": {
        "torch": {
            "sigmoid_11": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "components/pairwise_relations.py": {
        "torch": {
            "unsqueeze_14": {
                "variable": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "v_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "x_full",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_i, v_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.interaction_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.interaction_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm1d_46": {
                "variable": {
                    "value": "self.sum_bnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "interactor_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.aggregation_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.aggregation_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_dim * 2 if gix == 0 else interactor_sizes[gix - 1]",
                            "IfExp"
                        ],
                        [
                            "g_size if fix == 0 else aggregator_sizes[-1]",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_size",
                            "Name"
                        ],
                        [
                            "f_size",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_dim * 2 if gix == 0 else interactor_sizes[gix - 1]",
                            "IfExp"
                        ],
                        [
                            "g_size if fix == 0 else aggregator_sizes[-1]",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_size",
                            "Name"
                        ],
                        [
                            "f_size",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "criterion/rubi_criterion.py": {
        "torch": {
            "BCEWithLogitsLoss_12": {
                "variable": {
                    "value": "self.fusion_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_13": {
                "variable": {
                    "value": "self.question_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "zeros_310": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_ans_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(entry['q_token'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(answer['labels'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "answer['labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_261": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(answer['scores'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scores)",
                            "Call"
                        ],
                        [
                            "answer['scores']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "metrics.py": {
        "torch": {}
    },
    "models/ban.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.b_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.b_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.q_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.q_prj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.c_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.c_prj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_41": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/mlp.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, dimensions[0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimensions[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "din",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "F.__dict__[self.activation](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/ramen.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.pre_classification_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classifier_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.num_ans_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_in_size if ix == 0 else config.classifier_sizes[ix - 1]",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.pre_classification_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.pre_classification_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "p": {
                    "value": "config.classifier_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/relation_network.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.aggregator_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_ans_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "vq_paired",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q_emb_repeated)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/rnn.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(forward_, backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/rubi.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.c_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "input": {
                    "value": "q_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_1(q_embedding)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/rubi_baseline.py": {
        "torch": {
            "zeros_like_19": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_21": {
                "variable": {
                    "value": "arange_id",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_30": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2 * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.q_att_linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.q_emb_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.q_att_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_142": {
                "variable": {
                    "value": "(mm, mm_argmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mm.contiguous().view(bsize * n_regions, -1)",
                            "Call"
                        ],
                        [
                            "self.fusion_module([q, mm])",
                            "Call"
                        ],
                        [
                            "mm.view(bsize, n_regions, -1)",
                            "Call"
                        ],
                        [
                            "self.process_fusion(q_expand, v)",
                            "Call"
                        ],
                        [
                            "v + mm",
                            "BinOp"
                        ],
                        [
                            "mm.mean(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_169": {
                "variable": {
                    "value": "q_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_att_linear0(q)",
                            "Call"
                        ],
                        [
                            "F.relu(q_att)",
                            "Call"
                        ],
                        [
                            "q_att_linear1(q_att)",
                            "Call"
                        ],
                        [
                            "mask_softmax(q_att, l)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ],
                        [
                            "q_atts",
                            "Name"
                        ],
                        [
                            "q_att.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unbind_174": {
                "variable": {
                    "value": "q_atts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_att_linear0(q)",
                            "Call"
                        ],
                        [
                            "F.relu(q_att)",
                            "Call"
                        ],
                        [
                            "q_att_linear1(q_att)",
                            "Call"
                        ],
                        [
                            "mask_softmax(q_att, l)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ],
                        [
                            "q_atts",
                            "Name"
                        ],
                        [
                            "q_att.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/updn.py": {
        "torch": {}
    },
    "preprocess/utils.py": {
        "torch": {
            "load_60": {
                "f": {
                    "value": "net_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "run_network.py": {
        "torch": {
            "binary_cross_entropy_with_logits_131": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset(args.test_split, dictionary, data_root=args.dataroot, args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_173": {
                "variable": {
                    "value": "model_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.expt_resume_dir, '{}-model.pth'.format(args.resume_expt_type))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset(args.train_split, dictionary, data_root=args.dataroot, args=args)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(models, args.model)(args)",
                            "Call"
                        ],
                        [
                            "rubi.cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "metrics_n_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.copy()",
                            "Call"
                        ],
                        [
                            "save_metrics_n_model(metrics, model, optimizer, args, is_best)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "lmf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_22": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[logits_key]",
                            "Subscript"
                        ],
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_44": {
                "obj": {
                    "value": "metrics_n_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.copy()",
                            "Call"
                        ],
                        [
                            "save_metrics_n_model(metrics, model, optimizer, args, is_best)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "bmf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_67": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__112": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_59": {
                "f": {
                    "value": "net_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vqa_utils.py": {
        "torch": {
            "binary_cross_entropy_with_logits_169": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['logits']",
                            "Subscript"
                        ],
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "max_177": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['logits']",
                            "Subscript"
                        ],
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}