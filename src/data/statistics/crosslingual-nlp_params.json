{
    "src/metric.py": {
        "sklearn": {
            "accuracy_score_86": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.gold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "recall_score_87": {
                "variable": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.gold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "average": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "self.pos_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "precision_score_90": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.gold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "average": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "self.pos_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "f1_score_93": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.gold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "average": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "self.pos_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_score_121": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.gold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "max_80": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_115": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_143": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_181": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "example/contrastive-alignment/dump.py": {
        "torch": {
            "ModuleDict_39": {
                "variable": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "mapping[lang]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "glob(ckpt, recursive=True)",
                            "Call"
                        ],
                        [
                            "f'{_dir}/en-{lang}-subset1/{model}-sim_linear/{name}/version_0/mapping.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "save_44": {
                "obj": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.ModuleDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f'mapping/{name}/{model}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/awesome-align.py": {
        "torch": {
            "SequentialSampler_353": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LineByLineTextDataset(tokenizer, args, file_path=args.data_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_354": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LineByLineTextDataset(tokenizer, args, file_path=args.data_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_449": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "len_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - attention_mask_src",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "len_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - attention_mask_tgt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(hidden_states_src)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_tgt.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "variable": {
                    "value": "guide",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "tgt_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_sequence_344": {
                "variable": {
                    "value": "ids_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "ids_src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad_sequence(ids_src, batch_first=True, padding_value=tokenizer.pad_token_id)",
                            "Call"
                        ],
                        [
                            "tokenizer.prepare_for_model(list(itertools.chain(*wid_src)), return_tensors='pt', max_length=max_len, truncation=True)['input_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_347": {
                "variable": {
                    "value": "ids_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "ids_tgt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad_sequence(ids_tgt, batch_first=True, padding_value=tokenizer.pad_token_id)",
                            "Call"
                        ],
                        [
                            "tokenizer.prepare_for_model(list(itertools.chain(*wid_tgt)), return_tensors='pt', max_length=max_len, truncation=True)['input_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "so_loss_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(attention_probs_src * guide, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "so_loss_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(attention_probs_tgt * guide, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_152": {
                "variable": {
                    "value": "min_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(1 - attention_mask_src, -1)",
                            "Call"
                        ],
                        [
                            "min(bpelen_src, len(b2w_src))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_153": {
                "variable": {
                    "value": "trace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs_src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores_src) if extraction == 'softmax' else None",
                            "IfExp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores_src / torch.sqrt(len_tgt.view(-1, 1, 1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attention_probs_tgt.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "trace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_156": {
                "variable": {
                    "value": "trace",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bii->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "trace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention_probs_src, attention_probs_tgt.transpose(-1, -2)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bii->b', trace)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_275": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_276": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_242": {
                "variable": {
                    "value": "non_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_109": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_114": {
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_127": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_130": {
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_148": {
                "input": {
                    "value": "so_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "so_loss_src / len_src + so_loss_tgt / len_tgt",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(so_loss)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_157": {
                "input": {
                    "value": "trace / min_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_128": {
                "input": {
                    "value": "len_tgt.view(-1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "input": {
                    "value": "len_src.view(-1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "attention_probs_src * guide",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "attention_probs_tgt * guide",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset/base.py": {
        "torch": {}
    },
    "src/model/aligner.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.mappings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_123": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_hid - tgt_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_123": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tgt_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt_hid.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_147": {
                "variable": {
                    "value": "fwd_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(src_hid, tgt_hid)",
                            "Call"
                        ],
                        [
                            "sim / src_hid.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "sim / tgt_hid.norm(dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "sim / self.hparams.aligner_temperature",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(hid, hid.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "sim / hid_norm",
                            "BinOp"
                        ],
                        [
                            "sim / hid_norm.transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "sim / self.hparams.aligner_temperature",
                            "BinOp"
                        ],
                        [
                            "sim - torch.eye(seq_len, device=hid.device) * 1000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_149": {
                "variable": {
                    "value": "bwd_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_hid, tgt_hid)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((src_hid, tgt_hid))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hid.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_165": {
                "variable": {
                    "value": "joint_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(src_hid, tgt_hid)",
                            "Call"
                        ],
                        [
                            "sim / src_hid.norm(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "sim / tgt_hid.norm(dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "sim / self.hparams.aligner_temperature",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(hid, hid.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "sim / hid_norm",
                            "BinOp"
                        ],
                        [
                            "sim / hid_norm.transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "sim / self.hparams.aligner_temperature",
                            "BinOp"
                        ],
                        [
                            "sim - torch.eye(seq_len, device=hid.device) * 1000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_167": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(sim, dim=-1)",
                            "Call"
                        ],
                        [
                            "extra",
                            "Name"
                        ]
                    ]
                },
                "target": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(seq_len * 2, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "batch[goal]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['src_align'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "hid.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['src_align'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_177": {
                "input": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "l2_loss + torch.norm(old_params[k] - new_params[k]) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Identity_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_116": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['src_align'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "split_117": {
                "variable": {
                    "value": "(i, j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(seq_len * 2, device=device)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "len(goal) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "batch[goal]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(j, i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_137": {
                "input": {
                    "value": "torch.stack(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_82": {
                "tensors": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams.aligner_proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "sent.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(src_hid - tgt_hid, dim=1).square().mean()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(F.nll_loss(fwd_logits, goal) + F.nll_loss(bwd_logits, goal)) / 2",
                            "BinOp"
                        ],
                        [
                            "F.nll_loss(joint_logits, goal)",
                            "Call"
                        ],
                        [
                            "loss + l2_param_coeff * l2_param_reg + l2_src_coeff * l2_src_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nll_loss_151": {
                "input": {
                    "value": "bwd_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(sim.transpose(0, 1), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(seq_len * 2, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_163": {
                "n": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['src_align'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "hid.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "hid.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_176": {
                "input": {
                    "value": "old_params[k] - new_params[k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_183": {
                "input": {
                    "value": "(orig_src_hs - src_hs) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "result[f{prefix}_num_examples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "res[f'{prefix}_num_examples']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "nn.Linear(self.hidden_size, self.hidden_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "result[f{prefix}_num_examples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "res[f'{prefix}_num_examples']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams.aligner_proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/base.py": {
        "torch": {
            "Parameter_55": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamW_354": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, self.hparams.adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.hparams.adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "hparams.mapping",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_251": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_453": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cache_file)",
                            "Call"
                        ],
                        [
                            "data_class(**params)",
                            "Call"
                        ],
                        [
                            "self.trn_datasets[0]",
                            "Subscript"
                        ],
                        [
                            "ConcatDataset(self.trn_datasets)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConcatDataset_455": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "self.trn_datasets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_461": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cache_file)",
                            "Call"
                        ],
                        [
                            "data_class(**params)",
                            "Call"
                        ],
                        [
                            "self.trn_datasets[0]",
                            "Subscript"
                        ],
                        [
                            "ConcatDataset(self.trn_datasets)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "util.ConcatSampler(dataset, self.hparams.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_250": {
                "tensors": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_277": {
                "variable": {
                    "value": "mean_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[key] for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_277": {
                "variable": {
                    "value": "mean_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_435": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f'{self.hparams.cache_path}/{md5}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "RandomSampler_457": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cache_file)",
                            "Call"
                        ],
                        [
                            "data_class(**params)",
                            "Call"
                        ],
                        [
                            "self.trn_datasets[0]",
                            "Subscript"
                        ],
                        [
                            "ConcatDataset(self.trn_datasets)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_477": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_495": {
                "dataset": {
                    "value": "tst_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "partial(util.default_collate, padding=self.padding)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_284": {
                "tensors": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_296": {
                "tensors": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_373": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(optimizer_grouped_parameters, lr=self.hparams.learning_rate, betas=(0.9, self.hparams.adam_beta2), eps=self.hparams.adam_eps)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "lang_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tokenizer.lang2id[lang] for lang in langs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sent.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_440": {
                "obj": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cache_file)",
                            "Call"
                        ],
                        [
                            "data_class(**params)",
                            "Call"
                        ],
                        [
                            "self.trn_datasets[0]",
                            "Subscript"
                        ],
                        [
                            "ConcatDataset(self.trn_datasets)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cache_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f'{self.hparams.cache_path}/{md5}'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/classifier.py": {
        "torch": {
            "Linear_42": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nb_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_67": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_69": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.view(-1, self.nb_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "batch['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/crf.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.state_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_126": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "prev_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "tgt_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_175": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "energy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[length, batch_size, num_label, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "energy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "pointer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[length, batch_size, num_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "energy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_182": {
                "variable": {
                    "value": "dummy_pointer",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_labels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "energy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "back_pointer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[length, batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "energy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_197": {
                "variable": {
                    "value": "(_, back_pointer[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[-1].squeeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.trans_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels * self.num_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.trans_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_193": {
                "variable": {
                    "value": "(pi_t, pointer_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_transpose[t] + pi_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "torch.exp(x - xmax).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_25": {
                "input": {
                    "value": "torch.exp(x - xmax).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_21": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_25": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/dependency_parser.py": {
        "torch": {
            "Bilinear_76": {
                "variable": {
                    "value": "self.tag_bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "hparams.parser_tag_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "hparams.parser_tag_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nb_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_288": {
                "variable": {
                    "value": "range_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "head_tag.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "score_arc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_288": {
                "variable": {
                    "value": "range_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_300": {
                "variable": {
                    "value": "timestep_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "score_arc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_433": {
                "variable": {
                    "value": "normalized_pairwise_head_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_head_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tag_bilinear(head_tag, child_tag)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_433": {
                "variable": {
                    "value": "normalized_pairwise_head_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_443": {
                "variable": {
                    "value": "normalized_arc_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_arc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arc_attention(head_arc, child_arc)",
                            "Call"
                        ],
                        [
                            "score_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.arc_attention(head_arc, child_arc)",
                            "Call"
                        ],
                        [
                            "score_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "score_arc + torch.diag(torch.zeros(mask.size(1), device=score_arc.device).fill_(-np.inf))",
                            "BinOp"
                        ],
                        [
                            "score_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_443": {
                "variable": {
                    "value": "normalized_arc_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_449": {
                "variable": {
                    "value": "batch_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_arc_logits.unsqueeze(1) + normalized_pairwise_head_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_523": {
                "variable": {
                    "value": "range_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "head_tag.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "head_tag.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_523": {
                "variable": {
                    "value": "range_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nb_pos_tags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nb_pos_tags + 1",
                            "BinOp"
                        ],
                        [
                            "self.nb_pos_tags",
                            "Attribute"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hparams.parser_pos_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.pos_tagger",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nb_pos_tags",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_133": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pos_tagger(hs)",
                            "Call"
                        ],
                        [
                            "self.pos_tagger(hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_139": {
                "variable": {
                    "value": "hs_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.exp().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.pos_embed.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hs, hs_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_201": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pos_tagger(hs)",
                            "Call"
                        ],
                        [
                            "self.pos_tagger(hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_202": {
                "variable": {
                    "value": "pos_nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.view(-1, self.nb_pos_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "batch['pos_tags'].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "LABEL_PAD_ID",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hs, hs_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_218": {
                "variable": {
                    "value": "hs_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.exp().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.pos_embed.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hs, hs_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_360": {
                "input": {
                    "value": "torch.zeros(mask.size(1), device=score_arc.device).fill_(-np.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_484": {
                "ndarray": {
                    "value": "np.stack(heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_485": {
                "ndarray": {
                    "value": "np.stack(head_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "mask.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "score_arc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/module.py": {
        "torch": {
            "TransformerEncoderLayer_30": {
                "variable": {
                    "value": "trm_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_37": {
                "variable": {
                    "value": "self.trm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "trm_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(input_dim, num_heads, dim_feedforward=hidden_dim, dropout=dropout, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_tensor.data.new_ones(input_tensor.shape[0], input_tensor.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, mat1_dim, mat2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "variable": {
                    "value": "intermediate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(mat1.unsqueeze(1), self.weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mat2.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "mat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat1, bias1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "mat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat2, bias2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "mat1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mat1_dim + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "mat2_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mat2_dim + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/tagger.py": {
        "torch": {
            "Linear_51": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nb_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_80": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(hs)",
                            "Call"
                        ],
                        [
                            "self.classifier(hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(_, predicted_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "energy",
                            "Name"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_127": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(hs)",
                            "Call"
                        ],
                        [
                            "self.classifier(hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_129": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.view(-1, self.nb_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "batch['labels'].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "LABEL_PAD_ID",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/predict.py": {
        "torch": {
            "DataLoader_107": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(read_file(filepath, tknzr, lang))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partial(default_collate, padding=padding)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/util.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.mappings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LambdaLR_127": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_144": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(d) for d in concat_dataset.datasets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_293": {
                "input": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_177": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "elem.new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_228": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pl_module.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pl_module.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "self.mappings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_231": {
                "data_source": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_193": {
                "data": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_197": {
                "data": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_190": {
                "data": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch",
                            "Name"
                        ]
                    ]
                }
            }
        }
    }
}