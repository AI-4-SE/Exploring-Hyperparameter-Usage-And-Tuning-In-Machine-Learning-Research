{
    "batch_gen.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "batch_input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(batch_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "np.shape(batch_input[0])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(batch_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "batch_input_tensor[i, :, :np.shape(batch_input[i])[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "batch_target_tensor[i, :np.shape(batch_target[i])[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "mask[i, :, :np.shape(batch_target[i])[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "np.shape(batch_target[i])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "len(batch_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(length_of_sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "exchange_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "randn_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_22": {
                "variable": {
                    "value": "exchange_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_35": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(DilatedResidualLayer(2 ** i, num_f_maps, num_f_maps)) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_37": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_38": {
                "variable": {
                    "value": "self.exchange_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_58": {
                "variable": {
                    "value": "self.conv_dilated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_59": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_dilated(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_93": {
                "variable": {
                    "value": "cos_sim_pairwise",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute((1, 3, 0, 2))",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_sim_pairwise.reshape(batch_size, seq_length, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(adj, dim=1).reshape(batch_size, seq_length, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "self.cosine_pairwise(input)",
                            "Call"
                        ],
                        [
                            "self.conv_dilated_adj(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(adj, dim=1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "adj.reshape(batch_size, seq_length, self.df_size, self.df_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2] // 2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unfold_103": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute((1, 3, 0, 2))",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(self.dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(x, kernel_size=(self.kernel_size, 1), dilation=(self.dilation, 1), padding=(self.padding, 0))",
                            "Call"
                        ],
                        [
                            "input.reshape(batch_size, feat_dim, self.kernel_size, L).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_sim_pairwise.reshape(batch_size, seq_length, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(adj, dim=1).reshape(batch_size, seq_length, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "self.cosine_pairwise(input)",
                            "Call"
                        ],
                        [
                            "self.conv_dilated_adj(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(adj, dim=1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "adj.reshape(batch_size, seq_length, self.df_size, self.df_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ],
                        [
                            "support.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "fold_113": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "output.permute(0, 3, 2, 1).reshape((batch_size, feat_dim * self.kernel_size, L))",
                            "Call"
                        ],
                        [
                            "F.fold(output, (1, L), (self.kernel_size, 1), dilation=(self.dilation, 1), padding=(self.padding, 0))",
                            "Call"
                        ],
                        [
                            "output.squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, L)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(self.dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_130": {
                "variable": {
                    "value": "self.conv_dilated_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "df_size * df_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "df_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(dilation * (df_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_131": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_sim_pairwise.reshape(batch_size, seq_length, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(adj, dim=1).reshape(batch_size, seq_length, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "self.cosine_pairwise(input)",
                            "Call"
                        ],
                        [
                            "self.conv_dilated_adj(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(adj, dim=1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "adj.reshape(batch_size, seq_length, self.df_size, self.df_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_137": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_148": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.gcn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(GCNResidualLayer(2 ** i, df_size, num_f_maps, num_f_maps)) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_150": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_151": {
                "variable": {
                    "value": "self.exchange_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_139": {
                "input": {
                    "value": "self.gcn_dilated2(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_19": {
                "n": {
                    "value": "x.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1538574472",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1538574472",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(GCNStageModel(num_layers, num_f_maps, df_size, num_classes, num_classes)) for s in range(num_stages - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "exchange_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "exchange_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(exchange_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_37": {
                "variable": {
                    "value": "exchange_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "exchange_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(exchange_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_38": {
                "variable": {
                    "value": "exchange_cls_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "exchange_cls_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(exchange_cls_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_46": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_47": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs, out.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_80": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + '/epoch-' + str(epoch + 1) + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir + '/epoch-' + str(epoch + 1) + '.opt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(features_path + vid.split('.')[0] + '.npy')",
                            "Call"
                        ],
                        [
                            "features[:, ::sample_rate]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_106": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "mask[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "model_dir + '/epoch-' + str(epoch) + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "input": {
                    "value": "ex_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "input_x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "torch.clamp(self.mse(F.log_softmax(p[:, :, 1:], dim=1), F.log_softmax(p.detach()[:, :, :-1], dim=1)), min=0, max=16) * mask[:, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_71": {
                "input": {
                    "value": "torch.clamp(self.mse(F.log_softmax(p[:, :, 1:], dim=1), F.log_softmax(p.detach()[:, :, :-1], dim=1)), min=0, max=16) * mask[:, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_67": {
                "input": {
                    "value": "self.mse(F.log_softmax(p[:, :, 1:], dim=1), F.log_softmax(p.detach()[:, :, :-1], dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_71": {
                "input": {
                    "value": "self.mse(F.log_softmax(p[:, :, 1:], dim=1), F.log_softmax(p.detach()[:, :, :-1], dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_67": {
                "input": {
                    "value": "p.detach()[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_71": {
                "input": {
                    "value": "p.detach()[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}