{
    "src/architectures.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(data.x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/chem.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "afm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "featurize_mol(mol)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "(afm - min_vec) / diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(x_smiles, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "get_edge_indices(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_27": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/graph_conv.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.lin_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "coors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coors",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.lin_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_40": {
                "variable": {
                    "value": "spatial_scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_in(relative_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "aggr_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_out(aggr_out)",
                            "Call"
                        ],
                        [
                            "F.relu(aggr_out)",
                            "Call"
                        ],
                        [
                            "F.dropout(aggr_out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "aggr_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "aggr_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_out(aggr_out)",
                            "Call"
                        ],
                        [
                            "F.relu(aggr_out)",
                            "Call"
                        ],
                        [
                            "F.dropout(aggr_out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "aggr_out",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/normalized_cut_2d.py": {
        "torch": {
            "norm_7": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[row] - pos[col]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_models.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}