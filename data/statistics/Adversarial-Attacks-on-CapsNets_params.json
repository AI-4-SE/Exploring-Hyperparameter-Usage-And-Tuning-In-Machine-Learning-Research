{
    "paper/visualization/tsne_cifar10.py": {
        "sklearn": {
            "TSNE_24": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "paper/visualization/tsne_svhn.py": {
        "sklearn": {
            "TSNE_24": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "paper/visualization/tsne_two_conv.py": {
        "sklearn": {
            "TSNE_25": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/activations.py": {
        "tensorflow": {
            "get_default_graph_22": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables(scope=model.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_80": {
                "msg": {
                    "value": "Activations for %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "attack_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_94": {
                "msg": {
                    "value": "Measuring originals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_96": {
                "msg": {
                    "value": "Measuring adversarial examples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_113": {
                "msg": {
                    "value": "Creating model graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_116": {
                "msg": {
                    "value": "ios: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "get_ios()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_124": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_127": {
                "variable": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, model.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_119": {
                "scope": {
                    "value": "model.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/attacks/cw.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "self.original",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.lagrangian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_by_value_36": {
                "variable": {
                    "value": "initial_im",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.original + tf.random_normal(self.original.get_shape(), mean=0.0, stddev=rand_start_std)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.atanh(2 * initial_im - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_54": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.one_hot(self.target, num_classes), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_58": {
                "variable": {
                    "value": "others_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(logits, mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_62": {
                "variable": {
                    "value": "pert_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image - self.original",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_70": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "opt.variables() + [w, tf.train.get_global_step()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "debug_123": {
                "msg": {
                    "value": "Starting binary search",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_133": {
                "msg": {
                    "value": "Final run with c=%f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_binary_search_min(test_func, init_c=c_prop.fget(), max_iter=max_bin_iter)",
                            "Call"
                        ],
                        [
                            "init_c",
                            "variable"
                        ],
                        [
                            "c_max",
                            "variable"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ],
                        [
                            "(c_max + c_min) / 2",
                            "BinOp"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_101": {
                "msg": {
                    "value": "Testing adv img with c=%f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_binary_search_min(test_func, init_c=c_prop.fget(), max_iter=max_bin_iter)",
                            "Call"
                        ],
                        [
                            "init_c",
                            "variable"
                        ],
                        [
                            "c_max",
                            "variable"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ],
                        [
                            "(c_max + c_min) / 2",
                            "BinOp"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5 + 1e-08) * (tf.tanh(w) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "tf.one_hot(self.target, num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_58": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.model.logits)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.cast(tf.one_hot(self.target, num_classes), tf.bool))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_61": {
                "x": {
                    "value": "others_logits - target_logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-kappa",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atanh_42": {
                "x": {
                    "value": "2 * initial_im - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', trainable=True, initializer=tf.atanh(2 * initial_im - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_55": {
                "indices": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_113": {
                "msg": {
                    "value": "Loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([attack.optimizer, attack.loss], feed_dict={attack.original: orig, attack.target: target, attack.lagrangian: c})",
                            "Call"
                        ],
                        [
                            "pert_norm + self.lagrangian * adv_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_global_step_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_116": {
                "msg": {
                    "value": "Stopped early",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_148": {
                "msg": {
                    "value": "Early stopping in final run",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/attacks/deepfool.py": {
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "dataset.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_15": {
                "msg": {
                    "value": "Using own jacobian function (slow)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_20": {
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_19": {
                "ys": {
                    "value": "y[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/attacks/fast_batch_attacks.py": {
        "tensorflow": {
            "clip_by_value_21": {
                "t": {
                    "value": "self._unclipped_pert()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0 - self.model.img",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - self.model.img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_37": {
                "ys": {
                    "value": "self.model.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.model.img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_38": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.model.loss, self.model.img)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "code/attacks/universal_perturbation.py": {
        "tensorflow": {
            "info_116": {
                "msg": {
                    "value": "Reached acc %1.3f with norm %2.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._best_fool_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "la.norm(self.perturbation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_113": {
                "msg": {
                    "value": "it: %d, acc: %1.3f, norm: %1.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "it in range(self.max_it)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(correct)",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_105": {
                "msg": {
                    "value": "Found good perturbation",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/boundary_main.py": {
        "tensorflow": {
            "Saver_73": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables(scope=model.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_49": {
                "msg": {
                    "value": "Starting at img %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(adv_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_69": {
                "msg": {
                    "value": "Creating model graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_75": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_41": {
                "msg": {
                    "value": "Loading adv img from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "att_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(att_dir, 'adv_images.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_44": {
                "msg": {
                    "value": "Creating empty array for adv img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_59": {
                "msg": {
                    "value": "Number of adv images: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(num_adv, cfg.number_img, adv_at_once)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_60": {
                "msg": {
                    "value": "Finished iteration in %.2f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - tic",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_78": {
                "variable": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, model.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_73": {
                "scope": {
                    "value": "model.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/configs/__init__.py": {
        "tensorflow": {}
    },
    "code/configs/boundary_main_cfg.py": {
        "tensorflow": {}
    },
    "code/configs/cw_main_cfg.py": {
        "tensorflow": {}
    },
    "code/configs/deepfool_main_cfg.py": {
        "tensorflow": {}
    },
    "code/cw_main.py": {
        "tensorflow": {
            "Saver_79": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables(scope=attack.model.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_49": {
                "msg": {
                    "value": "Starting at img %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(adv_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_70": {
                "msg": {
                    "value": "Creating attack ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_81": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_41": {
                "msg": {
                    "value": "Loading adv img from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "att_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(att_dir, 'adv_images.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_44": {
                "msg": {
                    "value": "Creating empty array for adv img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_60": {
                "msg": {
                    "value": "Number of adv images: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(num_adv, cfg.number_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_61": {
                "msg": {
                    "value": "Finished iteration in %.2f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - tic",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_84": {
                "variable": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, attack.model.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_25": {
                "msg": {
                    "value": "Read c value: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "_c_prop.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_54": {
                "msg": {
                    "value": "Attack failed...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_79": {
                "scope": {
                    "value": "attack.model.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/deepfool_main.py": {
        "tensorflow": {
            "Saver_66": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables(scope=deepfool.model.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_31": {
                "msg": {
                    "value": "Starting at img %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(adv_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_60": {
                "msg": {
                    "value": "Creating attack ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_68": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_24": {
                "msg": {
                    "value": "Loading adv img from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "att_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(att_dir, 'adv_images.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_27": {
                "msg": {
                    "value": "Creating empty array for adv img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_49": {
                "msg": {
                    "value": "Number of adv images: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(num_adv, cfg.number_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_50": {
                "msg": {
                    "value": "Finished iteration in %.2f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - tic",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_72": {
                "variable": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, deepfool.model.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_37": {
                "msg": {
                    "value": "Attack failed...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_66": {
                "scope": {
                    "value": "deepfool.model.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_42": {
                "msg": {
                    "value": "Failed a second time...",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/measure_probabilities.py": {
        "tensorflow": {
            "Saver_140": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables(scope=model.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_33": {
                "msg": {
                    "value": "Measuring %s: source %s, target %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "attack_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'universal_perturbation'",
                            "str"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "source_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[2]",
                            "Subscript"
                        ],
                        [
                            "source_name",
                            "Method Argument"
                        ],
                        [
                            "source_name",
                            "Method Argument"
                        ],
                        [
                            "source_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_44": {
                "msg": {
                    "value": "Loaded adv images %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "adv_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(source_path, adv_file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_68": {
                "msg": {
                    "value": "Measuring %s: source %s, target %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "attack_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'universal_perturbation'",
                            "str"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "source_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[2]",
                            "Subscript"
                        ],
                        [
                            "source_name",
                            "Method Argument"
                        ],
                        [
                            "source_name",
                            "Method Argument"
                        ],
                        [
                            "source_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_98": {
                "msg": {
                    "value": "Measuring %s: source %s on originals",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "attack_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'universal_perturbation'",
                            "str"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ],
                        [
                            "attack_name",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "model.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_103": {
                "msg": {
                    "value": "Loaded adv images %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "original_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.data_dir, dataset_name, attack_name, 'originals.npz')",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_136": {
                "msg": {
                    "value": "Creating model graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_145": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_47": {
                "msg": {
                    "value": "Amplifying perturbations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_85": {
                "msg": {
                    "value": "Loaded adv images %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "pert_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(source_path, adv_file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_148": {
                "variable": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, model.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_82": {
                "msg": {
                    "value": "Amplifying perturbations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_140": {
                "scope": {
                    "value": "model.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/basicmodel.py": {
        "tensorflow": {
            "equal_127": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "debug_68": {
                "msg": {
                    "value": "%s properties: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.normal_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "debug_69": {
                "msg": {
                    "value": "%s training: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.normal_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_99": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_109": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "input": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_117": {
                "indices": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "input_tensor": {
                    "value": "tf.cast(correct_preds, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_108": {
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_128": {
                "x": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.prediction, self.label)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/capsnet_original.py": {
        "tensorflow": {
            "AdamOptimizer_64": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_28": {
                "msg": {
                    "value": "Shape after conv-layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_32": {
                "msg": {
                    "value": "Shape after primary caps: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_52": {
                "variable": {
                    "value": "garbage_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.encoder[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "encoder_out_masked_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoder_out_masked_flat, garbage_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_71": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_72": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_73": {
                "name": {
                    "value": "recon_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_74": {
                "name": {
                    "value": "l1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_75": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_76": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "atanh_46": {
                "x": {
                    "value": "2 * self.probabilities - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_56": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_57": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_58": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "np.multiply.reduce(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *self.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_65": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_65": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_81": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/capsnet_small.py": {
        "tensorflow": {
            "AdamOptimizer_65": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_29": {
                "msg": {
                    "value": "Shape after conv-layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_33": {
                "msg": {
                    "value": "Shape after primary caps: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_53": {
                "variable": {
                    "value": "garbage_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.encoder[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_54": {
                "variable": {
                    "value": "encoder_out_masked_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoder_out_masked_flat, garbage_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_72": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_73": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_74": {
                "name": {
                    "value": "recon_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_75": {
                "name": {
                    "value": "l1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_76": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_77": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_27": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "squeeze_37": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "atanh_47": {
                "x": {
                    "value": "2 * self.probabilities - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_57": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_58": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_59": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "np.multiply.reduce(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "tensor": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *self.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_66": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_66": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_82": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_89": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/capsnet_variant.py": {
        "tensorflow": {
            "AdamOptimizer_84": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_40": {
                "msg": {
                    "value": "Shape after conv-layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_44": {
                "msg": {
                    "value": "Shape after primary caps: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_71": {
                "variable": {
                    "value": "garbage_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.encoder[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "encoder_out_masked_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoder_out_masked_flat, garbage_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_91": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_92": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_93": {
                "name": {
                    "value": "recon_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_94": {
                "name": {
                    "value": "l1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_95": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_96": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes['conv_filters1']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes['conv_kernel']",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_36": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_37": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes['conv_filters2']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes['conv_kernel']",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_38": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "squeeze_54": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "atanh_65": {
                "x": {
                    "value": "2 * self.probabilities - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_75": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.sizes['decoder_dense1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_76": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.sizes['decoder_dense2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_77": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "np.multiply.reduce(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "tensor": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *self.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_85": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_85": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_102": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_109": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/conv_baseline.py": {
        "tensorflow": {
            "AdamOptimizer_57": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_76": {
                "variable": {
                    "value": "cross_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "tf.one_hot(self.label, self.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "logits": {
                    "value": "self.logits[:, :self.num_classes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_64": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_65": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_pooling2d_25": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_27": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_29": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_pooling2d_31": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_33": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_35": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_36": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_pooling2d_37": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_41": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_42": {
                "structure": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_43": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_44": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dense_46": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_58": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_71": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables(self.scope) if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "one_hot_76": {
                "indices": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_58": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_71": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_71": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/conv_good.py": {
        "tensorflow": {
            "AdamOptimizer_59": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_78": {
                "variable": {
                    "value": "cross_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "tf.one_hot(self.label, self.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_67": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_pooling2d_26": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_28": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_30": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_31": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_pooling2d_33": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_35": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_37": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_38": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_pooling2d_39": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_43": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_44": {
                "structure": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_45": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_46": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dense_48": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_60": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_73": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables(self.scope) if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "one_hot_78": {
                "indices": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_60": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_73": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_73": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/dcnet.py": {
        "tensorflow": {
            "AdamOptimizer_99": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_51": {
                "msg": {
                    "value": "Shape after conv-layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_56": {
                "msg": {
                    "value": "Shape after primary caps: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_106": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_108": {
                "name": {
                    "value": "recon_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_109": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_110": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32 - self.shape[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_46": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_48": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_49": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "squeeze_66": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "atanh_76": {
                "x": {
                    "value": "2 * self.probabilities - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_89": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_90": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_91": {
                "values": {
                    "value": "[o(-1), o(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_92": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "2024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_93": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "np.multiply.reduce(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *self.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_100": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_115": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_42": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "input": {
                    "value": "tf.layers.batch_normalization(o(), training=is_training)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_100": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_44": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_global_step_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_115": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/dcnet2.py": {
        "tensorflow": {
            "AdamOptimizer_95": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_47": {
                "msg": {
                    "value": "Shape after conv-layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_52": {
                "msg": {
                    "value": "Shape after primary caps: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_102": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_103": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_104": {
                "name": {
                    "value": "recon_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_106": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "16 - self.shape[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_42": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_45": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "squeeze_62": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "atanh_72": {
                "x": {
                    "value": "2 * self.probabilities - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_85": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_86": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_87": {
                "values": {
                    "value": "[o(-1), o(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_88": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "2024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_89": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "np.multiply.reduce(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "tensor": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *self.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_96": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_111": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "input": {
                    "value": "tf.layers.batch_normalization(o(), training=is_training)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_96": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_40": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_global_step_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_111": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/dcnet_big.py": {
        "tensorflow": {
            "AdamOptimizer_88": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_44": {
                "msg": {
                    "value": "Shape after conv-layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_48": {
                "msg": {
                    "value": "Shape after primary caps: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_95": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_96": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_97": {
                "name": {
                    "value": "recon_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_98": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_99": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_40": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "squeeze_55": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "atanh_65": {
                "x": {
                    "value": "2 * self.probabilities - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_78": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_79": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_80": {
                "values": {
                    "value": "[o(-1), o(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_81": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "2024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_82": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "np.multiply.reduce([32, 32, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "tensor": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_89": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_103": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_36": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "input": {
                    "value": "tf.layers.batch_normalization(o(), training=is_training)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_89": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_38": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_global_step_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_103": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/dcnet_large.py": {
        "tensorflow": {
            "AdamOptimizer_87": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_43": {
                "msg": {
                    "value": "Shape after conv-layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_47": {
                "msg": {
                    "value": "Shape after primary caps: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "o().get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_94": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_95": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_96": {
                "name": {
                    "value": "recon_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_97": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_98": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_39": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "squeeze_54": {
                "input": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "atanh_64": {
                "x": {
                    "value": "2 * self.probabilities - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_77": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_78": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "[o(-1), o(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_80": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "2024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_81": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "np.multiply.reduce([32, 32, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_102": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "[o(-1), o(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "input": {
                    "value": "tf.layers.batch_normalization(o(), training=is_training)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_88": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_37": {
                "x": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_global_step_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_102": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/simplenet.py": {
        "tensorflow": {
            "AdamOptimizer_36": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_47": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "self.one_hot_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_41": {
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_42": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_43": {
                "name": {
                    "value": "Regularization",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.regularization_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_regularization_loss_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_20": {
                "structure": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_27": {
                "inputs": {
                    "value": "o()",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l1_l2_regularizer(scale_l1=self.l1_scale, scale_l2=self.l2_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_49": {
                "input_tensor": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(self.one_hot_label, self.logits)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_global_step_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/train.py": {
        "tensorflow": {
            "Summary_64": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=model.scope + '/test_accuracy', simple_value=acc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_76": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_48": {
                "msg": {
                    "value": "Average accuracy this epoch: %1.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([model.optimizer, model.loss, model.accuracy, tf.train.get_global_step(), model.summary_op], feed_dict={model.training: True})",
                            "Call"
                        ],
                        [
                            "np.average(acc_list)",
                            "Call"
                        ],
                        [
                            "np.average(acc_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_63": {
                "msg": {
                    "value": "\\nTest Accuracy: %1.3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "np.average(acc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_80": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.log_dir, dataset.name, model.name)",
                            "Call"
                        ],
                        [
                            "log_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_83": {
                "variable": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, model.name)",
                            "Call"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "create_global_step_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_138": {
                "msg": {
                    "value": "Creating model graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_147": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "debug_68": {
                "msg": {
                    "value": "Writing test summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_91": {
                "msg": {
                    "value": "Epoch: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(get_epoch())",
                            "Call"
                        ]
                    ]
                }
            },
            "info_93": {
                "msg": {
                    "value": "Time: %5.2f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - ep_start_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_120": {
                "msg": {
                    "value": "Load data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_131": {
                "msg": {
                    "value": "Creating iterator initializer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_every_n_34": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "| Steps: %5d | Loss: %5.3f | Accuracy: %1.3f",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "cfg.train_log_every_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([model.optimizer, model.loss, model.accuracy, tf.train.get_global_step(), model.summary_op], feed_dict={model.training: True})",
                            "Call"
                        ],
                        [
                            "sess.run(tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_104": {
                "msg": {
                    "value": "Saved to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, model.name)",
                            "Call"
                        ],
                        [
                            "ckpt_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "debug_41": {
                "msg": {
                    "value": "Writing summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_global_step_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/universal_main.py": {
        "tensorflow": {
            "Saver_80": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables(scope=model.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_70": {
                "msg": {
                    "value": "Building model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_76": {
                "msg": {
                    "value": "Creating attack ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_82": {
                "msg": {
                    "value": "Starting session",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_40": {
                "msg": {
                    "value": "'Attacking range {}-{}'.format(idx.min(), idx.max())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_85": {
                "variable": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dir(cfg.ckpt_dir, dataset.name, model.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_43": {
                "msg": {
                    "value": "Loading pert from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "att_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(att_dir, 'adv_perts{}-{}.npy'.format(idx.min(), idx.max()))",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_46": {
                "msg": {
                    "value": "Creating empty array for perts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_60": {
                "msg": {
                    "value": "Finished iteration in %.2f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - tic",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_80": {
                "scope": {
                    "value": "model.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/util/config.py": {
        "tensorflow": {
            "set_verbosity_69": {
                "level": {
                    "value": "tf.logging.DEBUG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_71": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_77": {
                "msg": {
                    "value": "Loaded additional config from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mod_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.config_dir + '.' + mod_name + '_cfg'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "debug_84": {
                "msg": {
                    "value": "No config %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "mod_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__main__.__file__.split('/')[-1][:-3] if not _is_interactive() else 'default'",
                            "IfExp"
                        ],
                        [
                            "mod_name",
                            "Method Argument"
                        ],
                        [
                            "mod_name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/util/data.py": {
        "tensorflow": {
            "clip_by_value_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), minval=0, maxval=1 - crop_size)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "debug_66": {
                "msg": {
                    "value": "Building augmentation function with scale %f, prob %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale if scale is not None else 0",
                            "IfExp"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "debug_67": {
                "msg": {
                    "value": "Building flip augmentations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_180": {
                "msg": {
                    "value": "Loading adversarial examples from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "adv_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f for f in os.listdir(att_dir) if f.endswith('.npy')]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(att_dir, f) for f in adv_files]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "debug_59": {
                "msg": {
                    "value": "Adding color augmentations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_73": {
                "msg": {
                    "value": "Building scalable augmentations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_145": {
                "msg": {
                    "value": "Saving to file %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'originals.npz')",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_149": {
                "msg": {
                    "value": "Loading from file %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'originals.npz')",
                            "Call"
                        ]
                    ]
                }
            },
            "crop_and_resize_22": {
                "image": {
                    "value": "[img]",
                    "type": "List",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[x, y, x + crop_size, y + crop_size]]",
                            "List"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_brightness_53": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), minval=0, maxval=1 - crop_size)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "param['bright']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_hue_61": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), minval=0, maxval=1 - crop_size)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "param['hue']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_saturation_62": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), minval=0, maxval=1 - crop_size)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - param['sat']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + param['sat']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_63": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(), minval=0, maxval=1 - crop_size)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, 0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - param['contr']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + param['contr']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/util/imgdataset.py": {
        "tensorflow": {}
    },
    "code/util/lazy.py": {
        "tensorflow": {
            "debug_71": {
                "msg": {
                    "value": "Building graph node %s-%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "function.__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "function.__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/util/util.py": {
        "tensorflow": {
            "debug_43": {
                "msg": {
                    "value": "Found class %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fatal_22": {
                "msg": {
                    "value": "%s path does not exist",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_89": {
                "msg": {
                    "value": "No parameter file found",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_108": {
                "pred": {
                    "value": "choice < p",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : f(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_default_graph_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_143": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "epoch",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_add_148": {
                "variable": {
                    "value": "epoch_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.get_variable('epoch', dtype=tf.int64, initializer=tf.constant(0, dtype=tf.int64), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_81": {
                "msg": {
                    "value": "Loading parameters from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "partial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.param_dir, name + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_85": {
                "msg": {
                    "value": "Loading parameters from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.param_dir, '_'.join([name] + optionals) + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_145": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}