{
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/custom_dataset_data_loader.py": {
        "torch": {}
    },
    "data/datasets.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "F1_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "F1_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "normalize_image(F1_img, 'regular')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "F1_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "F1_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "normalize_image(F1_img, 'regular')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "F1_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "F1_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "cv2.imread(F1_path, 1)",
                            "Call"
                        ],
                        [
                            "cv2.merge([r, g, b])",
                            "Call"
                        ],
                        [
                            "np.asarray(F1_img)",
                            "Call"
                        ],
                        [
                            "F1_img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(F1_img).float()",
                            "Call"
                        ],
                        [
                            "normalize_image(F1_img, 'regular')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "save_38": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, save_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/face2boundary2face_model.py": {
        "torch": {
            "MSELoss_73": {
                "variable": {
                    "value": "self.criterionL2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "real_F1F2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.fake_Boundary_resized, self.real_F2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "fake_F1F2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.fake_Boundary_resized, self.fake_F2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "L1Loss_79": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "boundary_tmp_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boundary_tmp_resized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cv2.resize(boundary_tmp, (self.fineSize_F1, self.fineSize_F1), 0, 0, cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.asarray(boundary_tmp_resized), axis=2)",
                            "Call"
                        ],
                        [
                            "boundary_tmp_resized.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boundary_tmp_resized).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "boundary_map_resized_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boundary_map_resized_stack, boundary_tmp_resized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "(self.fake_Boundary_resized, self.fake_F2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "LambdaLR_60": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "variable": {
                    "value": "downconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_367": {
                "variable": {
                    "value": "downrelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_369": {
                "variable": {
                    "value": "uprelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_418": {
                "variable": {
                    "value": "uprelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_444": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_456": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_457": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_458": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_459": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_461": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_462": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_463": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_494": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_516": {
                "variable": {
                    "value": "low1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x + fc_ + score_",
                            "BinOp"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ],
                        [
                            [
                                4,
                                5,
                                6,
                                7,
                                8
                            ],
                            "Call"
                        ],
                        [
                            [
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15
                            ],
                            "Call"
                        ],
                        [
                            [
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22
                            ],
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_539": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_541": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_542": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_546": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_559": {
                "variable": {
                    "value": "self.hg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_560": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_561": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_562": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_563": {
                "variable": {
                    "value": "self.fc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_564": {
                "variable": {
                    "value": "self.score_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score_[i](score)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_583": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_584": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_620": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_640": {
                "variable": {
                    "value": "self.feature_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_655": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_656": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_657": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_658": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_689": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_705": {
                "variable": {
                    "value": "self.pca",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_721": {
                "variable": {
                    "value": "self.edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_737": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_738": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_740": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_783": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_792": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_62": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "*args": {
                    "value": "*conv_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_373": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_422": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_501": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_512": {
                "modules": {
                    "value": "hg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_569": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_580": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_585": {
                "*args": {
                    "value": "conv",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_797": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_809": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_829": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_64": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_137": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_139": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_143": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_146": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_188": {
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_192": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_214": {
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "ngf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_245": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_247": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "LeakyReLU_283": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_304": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_383": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_390": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_407": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_428": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_434": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Linear_704": {
                "in_features": {
                    "value": "inSize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pcaSize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_719": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_720": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_773": {
                "in_channels": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_774": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channel_basic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_775": {
                "num_features": {
                    "value": "self.channel_basic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_776": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_777": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_786": {
                "in_features": {
                    "value": "8 * self.channel_basic * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_787": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_788": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_789": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_790": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "212",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_200": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_208": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_213": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_237": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_253": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_292": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_295": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_511": {
                "modules": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_555": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_570": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_798": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_800": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_239": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_255": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_557": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_558": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_397": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_440": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/test_model.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "boundary_tmp_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boundary_tmp_resized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cv2.resize(boundary_tmp, (self.fineSize_F1, self.fineSize_F1), 0, 0, cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.asarray(boundary_tmp_resized), axis=2)",
                            "Call"
                        ],
                        [
                            "boundary_tmp_resized.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boundary_tmp_resized).float()",
                            "Call"
                        ],
                        [
                            "cv2.resize(boundary_tmp, (self.fineSize_F1, self.fineSize_F1), 0, 0, cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.asarray(boundary_tmp_resized), axis=2)",
                            "Call"
                        ],
                        [
                            "boundary_tmp_resized.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boundary_tmp_resized).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "boundary_tmp_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boundary_tmp_resized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cv2.resize(boundary_tmp, (self.fineSize_F1, self.fineSize_F1), 0, 0, cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.asarray(boundary_tmp_resized), axis=2)",
                            "Call"
                        ],
                        [
                            "boundary_tmp_resized.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boundary_tmp_resized).float()",
                            "Call"
                        ],
                        [
                            "cv2.resize(boundary_tmp, (self.fineSize_F1, self.fineSize_F1), 0, 0, cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.asarray(boundary_tmp_resized), axis=2)",
                            "Call"
                        ],
                        [
                            "boundary_tmp_resized.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boundary_tmp_resized).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "boundary_map_resized_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boundary_map_resized_stack, boundary_tmp_resized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "boundary_map_resized_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boundary_map_resized_stack, boundary_tmp_resized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/transformer_model.py": {
        "torch": {
            "L1Loss_80": {
                "variable": {
                    "value": "self.imgLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_305": {
                "variable": {
                    "value": "self.alignLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_308": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/Align_40000.pth'.format(self.opt.pretrain_root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_317": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/v8_net_boundary_detection.pth'.format(self.opt.pretrain_root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_69": {
                "variable": {
                    "value": "self.patchLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_71": {
                "variable": {
                    "value": "self.patchLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "pre_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'{}/{}_{}.pth'.format(self.opt.load_path, name, self.opt.which_iter)",
                            "Call"
                        ],
                        [
                            "'{}/{}_{}.pth'.format(self.opt.model_dir, name, step)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_239": {
                "tensors": {
                    "value": "tuple(img_channel)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load('{}/Align_40000.pth'.format(self.opt.pretrain_root))",
                            "Call"
                        ],
                        [
                            "torch.load('{}/v8_net_boundary_detection.pth'.format(self.opt.pretrain_root))",
                            "Call"
                        ],
                        [
                            "np.loadtxt('{}/{}_{}.txt'.format(pca_root, ii, 212))",
                            "Call"
                        ],
                        [
                            "np.loadtxt('{}/inverse_{}_{}.txt'.format(pca_root, ii, 212))",
                            "Call"
                        ],
                        [
                            "[self.Edge(inputs[:, ii, :, :].contiguous().view(size_[0], 1, size_[2], size_[3])) for ii in range(size_[1])]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_366": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'{}/{}_{}.pth'.format(self.opt.load_path, name, self.opt.which_iter)",
                            "Call"
                        ],
                        [
                            "'{}/{}_{}.pth'.format(self.opt.model_dir, name, step)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "img_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_243": {
                "input": {
                    "value": "heat_map",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_73": {
                "device": {
                    "value": "self.opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "train_Transformer.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/affine_transforms.py": {
        "torch": {
            "from_numpy_57": {
                "variable": {
                    "value": "transform_matrix[:2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cv2.getRotationMatrix2D(center, rotate, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "util/image_pool.py": {
        "torch": {
            "unsqueeze_18": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "return_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(return_images, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "from_numpy_68": {
                "variable": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dst",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cv2.warpAffine(src, transform_matrix, (output_img_width, output_img_height), cv2.INTER_LINEAR, cv2.BORDER_CONSTANT, borderValue=(127, 127, 127))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.asarray(dst), axis=2)",
                            "Call"
                        ],
                        [
                            "dst.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(dst).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_normalise).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_normalise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty((input_tf.shape[0], input_tf.shape[1], input_tf.shape[2]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_113": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(batch + 1.0) / 2.0 * 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.div(batch, 255.0)",
                            "Call"
                        ],
                        [
                            "batch - Variable(mean)",
                            "BinOp"
                        ],
                        [
                            "batch / Variable(std)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}