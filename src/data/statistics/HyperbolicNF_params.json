{
    "data/generate_synthetic_densities.py": {
        "sklearn": {
            "make_moons_54": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "noise": {
                    "value": "noise",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random.randrange(MAX_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "flows/flows.py": {
        "sklearn": {},
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "zero_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(t1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_308": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_311": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_317": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_384": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_387": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_394": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_62": {},
            "sum_93": {
                "input": {
                    "value": "self.base_dist.log_prob(u) + sum_log_abs_det_jacobians",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_98": {},
            "zeros_66": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_73": {
                "start": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_100": {
                "start": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * x_0",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "x_proj_mu0[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_147": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * x_0",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "x_proj_mu0[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_167": {
                "start": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_176": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "t1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t1, zero_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "t1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t1, column)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_241": {},
            "zeros_like_288": {
                "input": {
                    "value": "mu_0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_289": {
                "input": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_303": {
                "start": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_316": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_365": {
                "input": {
                    "value": "mu_0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_366": {
                "input": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_382": {
                "start": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_392": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_393": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_454": {
                "input": {
                    "value": "mu_0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_455": {
                "input": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_140": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_209": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_276": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_354": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_442": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_126": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_332": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_414": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/euclidean_vgae.py": {
        "sklearn": {
            "roc_auc_score_380": {
                "y_true": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.to(logits.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_y, neg_y], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([pos_pred, neg_pred], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_380": {
                "y_true": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.to(logits.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_y, neg_y], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([pos_pred, neg_pred], dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(rng, idx.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.isin(perm, idx).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(rng, rest.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.isin(tmp, idx).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_56": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "self.radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mask * self.reparametrize(self.__mu__, self.__std__)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_151": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z, z.t())",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_156": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z, z.t())",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_174": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.r_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.t_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "inp_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r_gnn[edge_index[0]], r_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_gnn[edge_index[0]], t_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_213": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dist - r) / t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_217": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "inp_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r_gnn[edge_index[0]], r_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_gnn[edge_index[0]], t_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_225": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dist - r) / t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_246": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randperm_289": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "row.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_293": {
                "variable": {
                    "value": "data.val_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_295": {
                "variable": {
                    "value": "data.test_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "data.train_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_303": {
                "variable": {
                    "value": "neg_adj_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(neg_row.size(0)), n_v + n_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_316": {
                "variable": {
                    "value": "data.val_neg_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_319": {
                "variable": {
                    "value": "data.test_neg_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_346": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "logits.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_y, neg_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_pred, neg_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_419": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_43": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_383": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_like_436": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_499": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(z[edge_index[0]] * z[edge_index[1]]).sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_140": {
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(z, z.t())",
                            "Call"
                        ],
                        [
                            "torch.eye(z.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.eye(z.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.mm(logits, logits.t())",
                            "Call"
                        ],
                        [
                            "adj[y[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pairwise_distance_150": {
                "x1": {
                    "value": "z[edge_index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[edge_index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pairwise_distance_155": {
                "x1": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mask * self.reparametrize(self.__mu__, self.__std__)",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pairwise_distance_168": {
                "x1": {
                    "value": "z[edge_index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[edge_index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "input": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z, z.t())",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pairwise_distance_175": {
                "x1": {
                    "value": "z[edge_index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[edge_index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "input": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z, z.t())",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "1.0 / F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ],
                        [
                            "-1 * F.pairwise_distance(z[edge_index[0]], z[edge_index[1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_201": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pairwise_distance_206": {
                "x1": {
                    "value": "z[edge_index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[edge_index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pairwise_distance_218": {
                "x1": {
                    "value": "z[edge_index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[edge_index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_332": {
                "input": {
                    "value": "self.decoder(z, pos_edge_index) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_336": {
                "input": {
                    "value": "1 - self.decoder(z, neg_edge_index) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_386": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_389": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_480": {
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_489": {
                "input": {
                    "value": "base_mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__mu__ if mu is None else mu",
                            "IfExp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_490": {
                "input": {
                    "value": "base_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__std__ if std is None else std",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_502": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_505": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_482": {
                "input": {
                    "value": "base_logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__logvar__ if std is None else torch.log(std)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_483": {
                "input": {
                    "value": "masked_ones + self.mask * base_logvar - self.mask * base_mu.pow(2) - self.mask * base_logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/hyperbolic_vgae.py": {
        "sklearn": {
            "roc_auc_score_450": {
                "y_true": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.to(logits.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_y, neg_y], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([pos_pred, neg_pred], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_450": {
                "y_true": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.to(logits.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_y, neg_y], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([pos_pred, neg_pred], dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(rng, idx.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.isin(perm, idx).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(rng, rest.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.isin(tmp, idx).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(radius)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "not fixed_curvature",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_134": {
                "variable": {
                    "value": "std_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "mu_h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mask * clamp(z, min=-max_clamp_norm, max=max_clamp_norm)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_203": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_219": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "Call"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0][i]], z[edge_index[1][i]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z, z.t(), self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius).squeeze()",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_224": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "Call"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0][i]], z[edge_index[1][i]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z, z.t(), self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius).squeeze()",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_233": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_242": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "self.r_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.t_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "inp_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r_gnn[edge_index[0]], r_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_gnn[edge_index[0]], t_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_283": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dist - r) / t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_287": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "inp_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r_gnn[edge_index[0]], r_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "inp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_gnn[edge_index[0]], t_gnn[edge_index[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_296": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dist - r) / t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_317": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randperm_360": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "row.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_364": {
                "variable": {
                    "value": "data.val_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_366": {
                "variable": {
                    "value": "data.test_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "data.train_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_374": {
                "variable": {
                    "value": "neg_adj_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_379": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(neg_row.size(0)), n_v + n_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_387": {
                "variable": {
                    "value": "data.val_neg_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_390": {
                "variable": {
                    "value": "data.test_neg_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_416": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "logits.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_y, neg_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_pred, neg_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_484": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isfinite_143": {
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_mu(x, edge_index)",
                            "Call"
                        ],
                        [
                            "clamp(mu, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "all_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_144": {
                "input": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_logvar(x, edge_index)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "all_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_146": {
                "input": {
                    "value": "mu_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "exp_map_mu0(expand_proj_dims(mu), self.radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_150": {
                "input": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "all_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_453": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_561": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_149": {
                "input": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_logvar(x, edge_index)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_173": {
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(z[edge_index[0]] * z[edge_index[1]]).sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_185": {
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(z, z.t())",
                            "Call"
                        ],
                        [
                            "torch.eye(z.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.eye(z.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.eye(z.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.mm(logits, logits.t())",
                            "Call"
                        ],
                        [
                            "adj[y[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_194": {
                "data": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.r_mlp(inp_r).squeeze()",
                            "Call"
                        ],
                        [
                            "self.r_mlp(inp_r).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_195": {
                "data": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.t_mlp(inp_t).squeeze()",
                            "Call"
                        ],
                        [
                            "self.t_mlp(inp_r).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_233": {
                "data": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_237": {
                "input": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_237": {
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "Call"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0][i]], z[edge_index[1][i]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z, z.t(), self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius).squeeze()",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_244": {
                "input": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_244": {
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "Call"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0][i]], z[edge_index[1][i]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z, z.t(), self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "1.0 / hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius).squeeze()",
                            "BinOp"
                        ],
                        [
                            "-1 * hyperboloid_dist(z[edge_index[0]], z[edge_index[1]], self.radius)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_267": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_267": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_269": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_402": {
                "input": {
                    "value": "self.decoder(z, pos_edge_index) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_406": {
                "input": {
                    "value": "1 - self.decoder(z, neg_edge_index) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_456": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_459": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_549": {
                "input": {
                    "value": "mu_0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mu_0(mu_h.shape, device=mu_h.device)",
                            "Call"
                        ],
                        [
                            "self.encoder.mu_0(base_mu_h.shape, device=base_mu_h.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_550": {
                "input": {
                    "value": "base_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__std__ if std is None else std",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_564": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_567": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_199": {
                "input": {
                    "value": "(dist - self.r) / self.t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_506": {
                "input": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_logvar(x, edge_index)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_206": {
                "input": {
                    "value": "(dist - self.r) / self.t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_507": {
                "input": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_logvar(x, edge_index)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "visualization/visualize_flow.py": {
        "sklearn": {},
        "torch": {
            "Tensor_60": {
                "variable": {
                    "value": "gx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_61": {
                "variable": {
                    "value": "gy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "twodim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data/data_utils.py": {
        "torch": {
            "Tensor_33": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([row, col])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_238": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(edges_unique)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/graph_datasets.py": {
        "torch": {
            "tensor_103": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(G.edges)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_103": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_153": {
                "variable": {
                    "value": "self.feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(nx_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.objects)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_fixed_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_154": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(G.edges)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_159": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_55": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_58": {
                "variable": {
                    "value": "adj_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "col_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(nx_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.objects)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nodes_to_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.max_nodes - num_nodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_60": {
                "variable": {
                    "value": "adj_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_mat, col_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "row_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nodes_to_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.max_nodes - num_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.max_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "adj_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_mat, row_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(nx_graph.edges)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_63": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_165": {
                "variable": {
                    "value": "adj_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "self.max_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_fixed_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data/image_reconstruction.py": {
        "torch": {
            "isfinite_29": {
                "input": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.log_prob(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "dataset": {
                    "value": "self._get_dataset(train, download, transform=transformation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_98": {
                "input": {
                    "value": "x_mb_",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "dataset": {
                    "value": "self._get_dataset(train, transform=transformation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_135": {
                "input": {
                    "value": "x_mb_",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "dataset": {
                    "value": "datasets.CIFAR10(self.data_folder, train=train, download=False, transform=transformation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_165": {
                "input": {
                    "value": "x_mb_",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_dtype_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/representation_dataset.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.data_folder, f'{train_str}_data.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.data_folder, f'{train_str}_labels.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_77": {
                "variable": {
                    "value": "self.datasets[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "dataset": {
                    "value": "self.datasets[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/synthetic.py": {
        "torch": {
            "DataLoader_128": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BinaryDiffusionProcessDataset(self.in_dim, 5, number_of_children=2, sigma_children=1, param=1, number_of_siblings=5, factor_sibling=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BinaryDiffusionProcessDataset(self.in_dim, 5, number_of_children=2, sigma_children=1, param=1, number_of_siblings=5, factor_sibling=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Normal_146": {
                "loc": {
                    "value": "x_mb_",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(x_mb_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Normal_205": {
                "loc": {
                    "value": "x_mb_",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(x_mb_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_146": {
                "input": {
                    "value": "x_mb_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_205": {
                "input": {
                    "value": "x_mb_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/vae_dataset.py": {
        "torch": {}
    },
    "distributions/normal.py": {
        "torch": {
            "isfinite_12": {
                "input": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.log_prob(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distributions/wrapped_normal.py": {
        "torch": {
            "Normal_40": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(smaller_shape, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scale.repeat(s)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_55": {
                "input": {
                    "value": "logdet_partial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(n - 1) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_68": {
                "input": {
                    "value": "v_tilde",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.normal.rsample(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_72": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_85": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_90": {
                "input": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "n_logprob - logdet",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_95": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "smaller_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loc.shape[:-1] + torch.Size([tangent_dim])",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_54": {
                "input": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "flows/flow_helpers.py": {
        "torch": {
            "linear_117": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mu + (1 - self.mask) * (u * s.exp() + t)",
                            "BinOp"
                        ],
                        [
                            "x_hat * torch.sqrt(var + self.eps) + mean",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.s_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*s_net",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_181": {
                "variable": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_182": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_235": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_254": {
                "variable": {
                    "value": "sigma_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_tangent_mu0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inverse_exp_map_mu0(x, self.radius)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x, self.radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.cond_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(n_outputs, cond_label_size) / math.sqrt(cond_label_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "input_size + (cond_label_size if cond_label_size is not None else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.t_net[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_203": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_220": {
                "input": {
                    "value": "-self.log_gamma",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_84": {
                "start": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_119": {
                "input": {
                    "value": "y",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.log_gamma.exp() * x_hat + self.beta",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.cond_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[y, mx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[y, mx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_155": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "[y, mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[y, mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_221": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_223": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_86": {
                "start": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_90": {
                "n": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_93": {
                "low": {
                    "value": "min_prev_degree",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ],
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(hidden_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "cond_label_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_87": {
                "start": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_95": {
                "low": {
                    "value": "min_prev_degree",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ],
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_29": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_125": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/euclidean_vae.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "self.radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, self.hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim, self.hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.partial_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim, self.hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc_dmean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc_dlogvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_72": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(image_channels, 16, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "UnFlatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_237": {
                "variable": {
                    "value": "esp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*mu.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isfinite_65": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_dmean(d).view(*z.size()[:-1], self.input_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_66": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_100": {
                "variable": {
                    "value": "self.flow_model.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_71": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_85": {
                "input": {
                    "value": "base_logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "input": {
                    "value": "base_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "base_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softplus(base_logvar) + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_134": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_dmean(d).view(*z.size()[:-1], self.input_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_148": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_dmean(d).view(*z.size()[:-1], self.input_dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_151": {
                "input": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_176": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_179": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_dmean(d).view(*z.size()[:-1], self.input_dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_179": {
                "input": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_197": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_198": {
                "f": {
                    "value": "fn_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_207": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_210": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_212": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_213": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_224": {
                "in_channels": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_225": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_226": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_227": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_228": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_229": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_230": {
                "in_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "1 + base_logvar - base_mu.pow(2) - base_logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/hyperbolic_vae.py": {
        "torch": {
            "Parameter_40": {
                "variable": {
                    "value": "self.radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(radius)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "not fixed_curvature",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, self.hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim + 1, self.hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_127": {
                "variable": {
                    "value": "std_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "mu_h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "log_p_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prob_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([n, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "log_q_z_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prob_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([n, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(image_channels, 16, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "UnFlatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_241": {
                "variable": {
                    "value": "esp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*mu.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isfinite_109": {
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clamp(mu, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "clamp(mu, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_110": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_112": {
                "input": {
                    "value": "mu_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "exp_map_mu0(expand_proj_dims(mu), self.radius)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(expand_proj_dims(mu), self.radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_116": {
                "input": {
                    "value": "std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "F.softplus(logvar) + 1e-05",
                            "BinOp"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "all_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "radius",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "self.z_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_115": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_173": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_202": {
                "f": {
                    "value": "fn_enc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_203": {
                "f": {
                    "value": "fn_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_212": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_213": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_214": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_215": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_217": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_218": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_229": {
                "in_channels": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_230": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_231": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_232": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_233": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_234": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_235": {
                "in_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plot_wrapped_normal.py": {
        "torch": {
            "randn_52": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_157": {
                "variable": {
                    "value": "flow_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flow_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "flow_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flow_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FlowDataset(z)",
                            "Call"
                        ],
                        [
                            "FlowDataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_235": {
                "variable": {
                    "value": "flow_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flow_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FlowDataset(z)",
                            "Call"
                        ],
                        [
                            "FlowDataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_280": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "meshgrid_281": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_287": {
                "variable": {
                    "value": "twodim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx.flatten(), yy.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_302": {
                "variable": {
                    "value": "flow_model.base_dist_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "on_mani",
                    "type": "Call",
                    "possible_values": [
                        [
                            "exp_map_mu0(clamped_threedim, radius).cuda()",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(clamped_threedim, radius)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(clamped_threedim, radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_303": {
                "variable": {
                    "value": "flow_model.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "on_mani.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_306": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "probs + logmap_logdet(clamped_threedim.cuda(), radius)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs)",
                            "Call"
                        ],
                        [
                            "p_z.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_316": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-range_lim",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "range_lim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_pts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "meshgrid_317": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_318": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx.flatten(), yy.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_341": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_prob_dist - log_det",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_351": {
                "variable": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_385": {
                "variable": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_396": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_397": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "twodim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_406": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "probs + logmap_logdet(clamped_threedim.cuda(), radius)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs)",
                            "Call"
                        ],
                        [
                            "p_z.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_420": {
                "variable": {
                    "value": "mean_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_420": {
                "variable": {
                    "value": "mean_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_448": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(scale * x, scale * y) for (x, y) in centers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_216": {
                "variable": {
                    "value": "flow_model.base_dist_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "on_mani",
                    "type": "Call",
                    "possible_values": [
                        [
                            "exp_map_mu0(clamped_threedim, radius).cuda()",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(clamped_threedim, radius)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(clamped_threedim, radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_217": {
                "variable": {
                    "value": "flow_model.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "on_mani.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_220": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "probs + logmap_logdet(clamped_threedim.cuda(), radius)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs)",
                            "Call"
                        ],
                        [
                            "p_z.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_261": {
                "variable": {
                    "value": "flow_model.base_dist_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "on_mani",
                    "type": "Call",
                    "possible_values": [
                        [
                            "exp_map_mu0(clamped_threedim, radius).cuda()",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(clamped_threedim, radius)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(clamped_threedim, radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_262": {
                "variable": {
                    "value": "flow_model.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "on_mani.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_265": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "probs + logmap_logdet(clamped_threedim.cuda(), radius)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "flow_model.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs)",
                            "Call"
                        ],
                        [
                            "p_z.log_prob(on_mani)",
                            "Call"
                        ],
                        [
                            "torch.exp(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_163": {
                "*size": {
                    "value": "mu_0_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_164": {
                "*size": {
                    "value": "std_0_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_202": {
                "variable": {
                    "value": "flow_model.base_dist_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_batch.cuda()",
                            "Call"
                        ],
                        [
                            "data_batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_203": {
                "variable": {
                    "value": "flow_model.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_247": {
                "variable": {
                    "value": "flow_model.base_dist_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "data_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_batch.cuda()",
                            "Call"
                        ],
                        [
                            "data_batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_248": {
                "variable": {
                    "value": "flow_model.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_326": {
                "input": {
                    "value": "6 * math.pi * z[:, 0] / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_327": {
                "input": {
                    "value": "-0.5 * ((z[:, 0] - 1) / 0.6) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_328": {
                "input": {
                    "value": "(z[:, 0] - 1) / 0.3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "[torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_421": {},
            "randint_62": {
                "low": {
                    "value": "len(centers)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_66": {
                "*size": {
                    "value": "n_samples // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_67": {
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.rand(n_samples // 2)) * 540 * (2 * math.pi) / 360",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_67": {
                "*size": {
                    "value": "n_samples // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_75": {
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_77": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "radius",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([args.radius]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([args.radius]).to(args.dev)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([args.radius]).to(args.dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_186": {
                "data": {
                    "value": "radius",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([args.radius]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([args.radius]).to(args.dev)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([args.radius]).to(args.dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_234": {
                "data": {
                    "value": "radius",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor([args.radius]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([args.radius]).to(args.dev)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([args.radius]).to(args.dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_65": {
                "input": {
                    "value": "torch.rand(n_samples // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_66": {
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.rand(n_samples // 2)) * 540 * (2 * math.pi) / 360",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "[d1x, d1y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "[-d1x, -d1y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_73": {
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_75": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_84": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_85": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_86": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_87": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_89": {
                "input": {
                    "value": "linspace4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples4 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_90": {
                "input": {
                    "value": "linspace4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples4 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_91": {
                "input": {
                    "value": "linspace4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples4 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_92": {
                "input": {
                    "value": "linspace3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples3 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_93": {
                "input": {
                    "value": "linspace2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples2 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_94": {
                "input": {
                    "value": "linspace2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples2 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_95": {
                "input": {
                    "value": "linspace1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples1 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_96": {
                "input": {
                    "value": "linspace1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * math.pi, n_samples1 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "[torch.cat([2 * circ4_x, 2 * circ3_x, 2 * circ2_x, 2 * circ1_x]), torch.cat([2 * circ4_y, 2 * circ3_y, 2 * circ2_y, 2 * circ1_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_104": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "n_samples // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_107": {
                "mean": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.08 * torch.ones_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "[2 * circ4_x, 2 * circ3_x, 2 * circ2_x, 2 * circ1_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[2 * circ4_y, 2 * circ3_y, 2 * circ2_y, 2 * circ1_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)], dim=0) / 20",
                            "BinOp"
                        ],
                        [
                            "torch.stack([torch.cat([2 * circ4_x, 2 * circ3_x, 2 * circ2_x, 2 * circ1_x]), torch.cat([2 * circ4_y, 2 * circ3_y, 2 * circ2_y, 2 * circ1_y])], dim=1) * 3.0",
                            "BinOp"
                        ],
                        [
                            "x[torch.randint(0, n_samples, size=(n_samples,))]",
                            "Subscript"
                        ],
                        [
                            "xy_poincare[:, 0].view(-1, 100).detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.linspace(-5, 5, 100)",
                            "Call"
                        ],
                        [
                            "torch.linspace(-range_lim, range_lim, n_pts)",
                            "Call"
                        ],
                        [
                            "xy_poincare[:, 0].view(-1, 100).detach().cpu()",
                            "Call"
                        ],
                        [
                            "np.arange(-5, 5, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(x).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_107": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)], dim=0) / 20",
                            "BinOp"
                        ],
                        [
                            "torch.stack([torch.cat([2 * circ4_x, 2 * circ3_x, 2 * circ2_x, 2 * circ1_x]), torch.cat([2 * circ4_y, 2 * circ3_y, 2 * circ2_y, 2 * circ1_y])], dim=1) * 3.0",
                            "BinOp"
                        ],
                        [
                            "x[torch.randint(0, n_samples, size=(n_samples,))]",
                            "Subscript"
                        ],
                        [
                            "xy_poincare[:, 0].view(-1, 100).detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.linspace(-5, 5, 100)",
                            "Call"
                        ],
                        [
                            "torch.linspace(-range_lim, range_lim, n_pts)",
                            "Call"
                        ],
                        [
                            "xy_poincare[:, 0].view(-1, 100).detach().cpu()",
                            "Call"
                        ],
                        [
                            "np.arange(-5, 5, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(x).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_helper.py": {
        "torch": {
            "Tensor_359": {
                "variable": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_374": {
                "variable": {
                    "value": "flow_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flow_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.flow_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(fully_connected.edges)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_446": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_475": {
                "variable": {
                    "value": "adj_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decoder.forward_all(z_k, edge_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_80": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(recon_loss + model.beta * kld).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "-1 * flow_model.log_prob(z, edge_index).mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "model.radius.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "model.encoder.radius.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_300": {
                "input": {
                    "value": "model.encoder.radius.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_449": {
                "*size": {
                    "value": "node_embed_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_450": {
                "*size": {
                    "value": "node_embed_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_453": {
                "*size": {
                    "value": "mu_0_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim + 1])",
                            "Call"
                        ],
                        [
                            "torch.Size([nodes2gen, args.z_dim + 1])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_454": {
                "*size": {
                    "value": "node_embed_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "*size": {
                    "value": "node_embed_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_460": {
                "*size": {
                    "value": "node_embed_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "*size": {
                    "value": "mu_0_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim + 1])",
                            "Call"
                        ],
                        [
                            "torch.Size([nodes2gen, args.z_dim + 1])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_464": {
                "*size": {
                    "value": "node_embed_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([nodes2gen, args.z_dim])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_231": {
                "input": {
                    "value": "model.encoder.radius.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_396": {
                "input": {
                    "value": "gae_model.__logvar__",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/hyperbolics.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_1, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_51": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "right",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dst[..., 0:1] + radius, dst[..., 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "right",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src[..., 0:1] + radius, src[..., 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cosh(x_norm) * radius, sinh(x_norm) * x_normed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[..., 0:1] - alpha * radius, x[..., 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isfinite_19": {
                "input": {
                    "value": "logdet_partial",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(n - 1) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ],
                        [
                            "(n - 1) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ],
                        [
                            "(1 - n) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_28": {
                "input": {
                    "value": "logdet_partial",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(n - 1) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ],
                        [
                            "(n - 1) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ],
                        [
                            "(1 - n) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_39": {
                "input": {
                    "value": "logdet_partial",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(n - 1) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ],
                        [
                            "(n - 1) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ],
                        [
                            "(1 - n) * (torch.log(radius) + logsinh(r) - torch.log(r))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_110": {
                "input": {
                    "value": "ret",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.sum(m, dim=dim, keepdim=True) - 2 * m[..., 0:1]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(m, dim=dim, keepdim=False) - 2 * m[..., 0]",
                            "BinOp"
                        ],
                        [
                            "sqrt(product)",
                            "Call"
                        ],
                        [
                            "cosh(x_norm) * at_point + sinh(x_norm) * x_normed",
                            "BinOp"
                        ],
                        [
                            "torch.cat((cosh(x_norm) * radius, sinh(x_norm) * x_normed), dim=-1)",
                            "Call"
                        ],
                        [
                            "coef * (x - alpha * at_point)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_119": {
                "input": {
                    "value": "ret",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.sum(m, dim=dim, keepdim=True) - 2 * m[..., 0:1]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(m, dim=dim, keepdim=False) - 2 * m[..., 0]",
                            "BinOp"
                        ],
                        [
                            "sqrt(product)",
                            "Call"
                        ],
                        [
                            "cosh(x_norm) * at_point + sinh(x_norm) * x_normed",
                            "BinOp"
                        ],
                        [
                            "torch.cat((cosh(x_norm) * radius, sinh(x_norm) * x_normed), dim=-1)",
                            "Call"
                        ],
                        [
                            "coef * (x - alpha * at_point)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_77": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.cat((x_1, u), dim=1)",
                            "Call"
                        ],
                        [
                            "u + lorentz_prod * o",
                            "BinOp"
                        ],
                        [
                            "R * u / r",
                            "BinOp"
                        ],
                        [
                            "x[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "input": {
                    "value": "x[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_116": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.cat((x_1, u), dim=1)",
                            "Call"
                        ],
                        [
                            "u + lorentz_prod * o",
                            "BinOp"
                        ],
                        [
                            "R * u / r",
                            "BinOp"
                        ],
                        [
                            "x[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_117": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.cat((x_1, u), dim=1)",
                            "Call"
                        ],
                        [
                            "u + lorentz_prod * o",
                            "BinOp"
                        ],
                        [
                            "R * u / r",
                            "BinOp"
                        ],
                        [
                            "x[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_38": {
                "input": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "torch.mm(x, y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "torch.mm(x, y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_44": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/math_ops.py": {
        "torch": {
            "cat_109": {
                "variable": {
                    "value": "signs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(x_exp), -torch.ones_like(x_exp))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(x_exp), -2.0 * x_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(x_exp), -2.0 * x_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_126": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros_like(x_exp), -2.0 * x_exp), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros_like(x_exp), -2.0 * x_exp), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:-1] + torch.Size([1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosh_92": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1e-09)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-1.0 + 4 * eps, max=1.0 - 4 * eps)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1 + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sinh_97": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1e-09)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-1.0 + 4 * eps, max=1.0 - 4 * eps)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1 + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_102": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1e-09)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-1.0 + 4 * eps, max=1.0 - 4 * eps)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1 + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "variable": {
                    "value": "signs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros_like(x_exp), -2.0 * x_exp), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros_like(x_exp), -2.0 * x_exp), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "(zeros, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_16": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-max_norm, max=max_norm)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1e-09)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=-1.0 + 4 * eps, max=1.0 - 4 * eps)",
                            "Call"
                        ],
                        [
                            "clamp(x, min=1 + eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "x + z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_130": {
                "input": {
                    "value": "clamp(torch.sum(signs * torch.exp(value0), dim=dim, keepdim=keepdim), min=eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_109": {
                "input": {
                    "value": "x_exp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_110": {
                "input": {
                    "value": "x_exp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "input": {
                    "value": "x_exp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_119": {
                "input": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros_like(x_exp), -2.0 * x_exp), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros_like(x_exp), -2.0 * x_exp), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "signs * torch.exp(value0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_130": {
                "input": {
                    "value": "value0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "randperm_45": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_55": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_63": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "torch.sum(signs * torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_67": {
                "input": {
                    "value": "signs * torch.exp(value0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_59": {
                "input": {
                    "value": "value0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ],
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_67": {
                "input": {
                    "value": "value0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ],
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}