{
    "examples/plot_2D_simulation_example.py": {
        "sklearn": {
            "grid_to_graph_262": {
                "variable": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": []
                },
                "n_x": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(40, 40)",
                            "Tuple"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "n_y": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(40, 40)",
                            "Tuple"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FeatureAgglomeration_264": {
                "variable": {
                    "value": "ward",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "connectivity": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.grid_to_graph(n_x=shape[0], n_y=shape[1])",
                            "Call"
                        ]
                    ]
                },
                "linkage": {
                    "value": "ward",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/plot_fmri_data_example.py": {
        "sklearn": {
            "grid_to_graph_126": {
                "variable": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": []
                },
                "n_x": {
                    "value": "n_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "n_y": {
                    "value": "n_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "n_z": {
                    "value": "n_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masker.mask_img_.get_fdata().astype(bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "FeatureAgglomeration_128": {
                "variable": {
                    "value": "ward",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "connectivity": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.grid_to_graph(n_x=n_x, n_y=n_y, n_z=n_z, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Ridge_161": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Bunch_102": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.X",
                            "Attribute"
                        ],
                        [
                            "np.asarray(fmri_masked)[condition_mask, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.y",
                            "Attribute"
                        ],
                        [
                            "np.asarray((conditions[condition_mask] == 'face') * 2 - 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.groups",
                            "Attribute"
                        ],
                        [
                            "session_label[condition_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "bg_img": {
                    "value": "bg_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "mean_img(haxby_dataset.anat)",
                            "Call"
                        ],
                        [
                            "data.bg_img",
                            "Method Argument"
                        ]
                    ]
                },
                "masker": {
                    "value": "masker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.masker",
                            "Attribute"
                        ],
                        [
                            "NiftiMasker(mask_img=mask_img, standardize=True, smoothing_fwhm=None, memory=memory)",
                            "Call"
                        ],
                        [
                            "masker",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/plot_meg_data_example.py": {
        "sklearn": {
            "FeatureAgglomeration_325": {
                "variable": {
                    "value": "ward",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "connectivity": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mne.source_estimate.spatial_src_adjacency(forward['src'])",
                            "Call"
                        ],
                        [
                            "connectivity.tolil()",
                            "Call"
                        ],
                        [
                            "connectivity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pairwise_distances_250": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "Xi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[idx_i]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "Xj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[idx_j]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "affinity",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples_not_exhibited/plot_fig_1_nguyen_et_al.py": {
        "sklearn": {
            "StandardScaler_32": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hidimstat/clustered_inference.py": {
        "sklearn": {
            "check_memory_228": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "memory": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_memory(memory)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_244": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "resample_16": {
                "variable": {
                    "value": "train_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(n_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_subsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(n_samples * train_size)",
                            "Call"
                        ]
                    ]
                },
                "replace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resample_24": {
                "variable": {
                    "value": "train_group",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "unique_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_subsample_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(n_groups * train_size)",
                            "Call"
                        ]
                    ]
                },
                "replace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "hidimstat/desparsified_lasso.py": {
        "sklearn": {
            "check_memory_169": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "memory": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_memory(memory)",
                            "Call"
                        ],
                        [
                            "check_memory(memory)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_memory_324": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "memory": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_memory(memory)",
                            "Call"
                        ],
                        [
                            "check_memory(memory)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Lasso_53": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "precompute": {
                    "value": "gram_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.delete(np.delete(gram, i, axis=0), i, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "hidimstat/knockoffs/gaussian_knockoff.py": {
        "sklearn": {
            "check_memory_37": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "memory": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_memory(memory)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empirical_covariance_113": {
                "variable": {
                    "value": "Sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GraphicalLassoCV_121": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "alphas": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.001, 0.01, 0.1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "ledoit_wolf_118": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "assume_centered": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hidimstat/knockoffs/knockoff_aggregation.py": {
        "sklearn": {
            "check_memory_32": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "memory": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_27": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_random_state_52": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_54": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hidimstat/knockoffs/knockoffs.py": {
        "sklearn": {
            "check_memory_73": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "memory": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_memory(memory)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_76": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hidimstat/knockoffs/stat_coef_diff.py": {
        "sklearn": {
            "KFold_66": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LassoCV_69": {
                "alphas": {
                    "value": "lambdas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(lambda_max * np.exp(-n_lambdas), lambda_max, n_lambdas)",
                            "Call"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "joblib_verbose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=5, shuffle=True, random_state=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogisticRegressionCV_71": {
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "solver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'liblinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=5, shuffle=True, random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "tol": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogisticRegressionCV_75": {
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "joblib_verbose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=5, shuffle=True, random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "tol": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "hidimstat/noise_std.py": {
        "sklearn": {
            "KFold_59": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LassoCV_62": {
                "variable": {
                    "value": "clf_lasso_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "normalize": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=5, shuffle=True, random_state=seed)",
                            "Call"
                        ],
                        [
                            "KFold(n_splits=5, shuffle=True, random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features * 5",
                            "BinOp"
                        ],
                        [
                            "n_features * 5",
                            "BinOp"
                        ],
                        [
                            "10000.0",
                            "Method Argument"
                        ],
                        [
                            "10000.0",
                            "Method Argument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KFold_162": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiTaskLassoCV_167": {
                "variable": {
                    "value": "clf_mtlcv",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "normalize": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=5, shuffle=True, random_state=seed)",
                            "Call"
                        ],
                        [
                            "KFold(n_splits=5, shuffle=True, random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features * 5",
                            "BinOp"
                        ],
                        [
                            "n_features * 5",
                            "BinOp"
                        ],
                        [
                            "10000.0",
                            "Method Argument"
                        ],
                        [
                            "10000.0",
                            "Method Argument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "hidimstat/permutation_test.py": {
        "sklearn": {
            "Pipeline_66": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[('SVR', LinearSVR())]",
                            "List"
                        ]
                    ]
                }
            },
            "GridSearchCV_68": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline(steps)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'SVR__C': Cs}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LinearSVR_71": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.best_params_['SVR__C']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LinearSVR_75": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.best_params_['SVR__C']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "_safe_indexing_152": {
                "X": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.permutation(len(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_124": {
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVR(C=C)",
                            "Call"
                        ],
                        [
                            "LinearSVR(C=C)",
                            "Call"
                        ],
                        [
                            "estimator",
                            "Method Argument"
                        ],
                        [
                            "estimator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LinearSVR_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_128": {
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVR(C=C)",
                            "Call"
                        ],
                        [
                            "LinearSVR(C=C)",
                            "Call"
                        ],
                        [
                            "estimator",
                            "Method Argument"
                        ],
                        [
                            "estimator",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "hidimstat/standardized_svr.py": {
        "sklearn": {
            "Pipeline_38": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[('SVR', LinearSVR())]",
                            "List"
                        ]
                    ]
                }
            },
            "GridSearchCV_41": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline(steps)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'SVR__C': Cs}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LinearSVR_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hidimstat/test/test_clustered_inference.py": {
        "sklearn": {
            "grid_to_graph_42": {
                "variable": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": []
                },
                "n_x": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "int"
                        ],
                        [
                            "2000",
                            "int"
                        ]
                    ]
                },
                "n_y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_z": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FeatureAgglomeration_43": {
                "variable": {
                    "value": "ward",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "connectivity": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ],
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ]
                    ]
                },
                "linkage": {
                    "value": "ward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_to_graph_81": {
                "variable": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": []
                },
                "n_x": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "int"
                        ],
                        [
                            "2000",
                            "int"
                        ]
                    ]
                },
                "n_y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_z": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FeatureAgglomeration_82": {
                "variable": {
                    "value": "ward",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "connectivity": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ],
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ]
                    ]
                },
                "linkage": {
                    "value": "ward",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "hidimstat/test/test_ensemble_clustered_inference.py": {
        "sklearn": {
            "grid_to_graph_43": {
                "variable": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": []
                },
                "n_x": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "int"
                        ],
                        [
                            "2000",
                            "int"
                        ]
                    ]
                },
                "n_y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_z": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FeatureAgglomeration_44": {
                "variable": {
                    "value": "ward",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "connectivity": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ],
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ]
                    ]
                },
                "linkage": {
                    "value": "ward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_to_graph_86": {
                "variable": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": []
                },
                "n_x": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "int"
                        ],
                        [
                            "2000",
                            "int"
                        ]
                    ]
                },
                "n_y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_z": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FeatureAgglomeration_87": {
                "variable": {
                    "value": "ward",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "connectivity": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ],
                        [
                            "image.grid_to_graph(n_x=n_features, n_y=1, n_z=1)",
                            "Call"
                        ]
                    ]
                },
                "linkage": {
                    "value": "ward",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}