{
    "data_handler/dataset.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.uniform(low=-1, high=1, size=(32, 32))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data_handler/incremental_loader.py": {
        "torch": {
            "stack_133": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_140": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.forward(Variable(data_tensor), True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_152": {
                "variable": {
                    "value": "features_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_temp.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "to_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_copy[0:exmp_no]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "to_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_missing_experiment.py": {
        "torch": {
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "train_iterator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "train_iterator_nmc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader_nmc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "test_iterator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.test_data.test_data, dataset.test_data.test_labels, dataset.labels_per_class_test, dataset.classes, [], transform=dataset.test_transform, cuda=args.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_108": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "model/misc_functions.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "im_as_ten",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_as_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32(cv2im)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(im_as_arr[..., ::-1])",
                            "Call"
                        ],
                        [
                            "im_as_arr.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/res_utils.py": {
        "torch": {
            "AvgPool2d_9": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "(x, x.mul(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet32.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "basicblock",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basicblock",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.bn_a(basicblock)",
                            "Call"
                        ],
                        [
                            "F.relu(basicblock, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b(basicblock)",
                            "Call"
                        ],
                        [
                            "self.bn_b(basicblock)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_80": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "residual + basicblock",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage_1(x)",
                            "Call"
                        ],
                        [
                            "self.stage_2(x)",
                            "Call"
                        ],
                        [
                            "self.stage_3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_131": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage_1(x)",
                            "Call"
                        ],
                        [
                            "self.stage_2(x)",
                            "Call"
                        ],
                        [
                            "self.stage_3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage_1(x)",
                            "Call"
                        ],
                        [
                            "self.stage_2(x)",
                            "Call"
                        ],
                        [
                            "self.stage_3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_119": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage_1(x)",
                            "Call"
                        ],
                        [
                            "self.stage_2(x)",
                            "Call"
                        ],
                        [
                            "self.stage_3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x) / T",
                            "BinOp"
                        ],
                        [
                            "x[:, keep[0]:keep[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/test_model.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.conv2_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.conv2_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.conv2_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.conv5_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_18": {
                "variable": {
                    "value": "self.conv5_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noClasses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_bn2(self.conv3(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_bn3(self.conv4(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv5_drop(self.conv5_bn3(self.conv5(x))), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "self.conv2_bn1(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn2(self.conv3(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn3(self.conv4(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv5_drop(self.conv5_bn3(self.conv5(x))), 2))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_49": {
                "input": {
                    "value": "self.fc(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_25": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_27": {
                "input": {
                    "value": "self.conv2_bn2(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "input": {
                    "value": "self.conv2_bn3(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_29": {
                "input": {
                    "value": "self.conv5_drop(self.conv5_bn3(self.conv5(x)))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "input": {
                    "value": "self.fc(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_32": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "self.conv2_bn1(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn2(self.conv3(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_bn3(self.conv4(x)), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv5_drop(self.conv5_bn3(self.conv5(x))), 2))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "self.fc2(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "self.fc2(x) / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "run_experiment.py": {
        "torch": {
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "train_iterator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [1, 2], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_iterator_nmc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader_nmc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.train_data.train_data, dataset.train_data.train_labels, dataset.labels_per_class_train, dataset.classes, [1, 2], transform=dataset.train_transform, cuda=args.cuda, oversampling=not args.upsampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "test_iterator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_handler.IncrementalLoader(dataset.test_data.test_data, dataset.test_data.test_labels, dataset.labels_per_class_test, dataset.classes, [1, 2], transform=dataset.test_transform, cuda=args.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seeds",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/evaluator.py": {
        "torch": {
            "from_numpy_154": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_66": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_81": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_108": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_110": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "scaleTemp",
                            "Name"
                        ],
                        [
                            "scale / np.linalg.norm(scale, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_210": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "scaleTemp",
                            "Name"
                        ],
                        [
                            "scale / np.linalg.norm(scale, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "np.copy(scale)",
                            "Call"
                        ],
                        [
                            "scale / np.max(scale)",
                            "BinOp"
                        ],
                        [
                            "1 / scale",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(scale).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "scale.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_273": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ],
                        [
                            "result.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result)",
                            "Call"
                        ],
                        [
                            "result.cuda()",
                            "Call"
                        ],
                        [
                            "output.data - self.means.float()",
                            "BinOp"
                        ],
                        [
                            "torch.norm(result, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_156": {
                "input": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "outputTemp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_294": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "outputTemp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "output.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_299": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data, True).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "model(data, True).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "output * Variable(scale.float())",
                            "BinOp"
                        ],
                        [
                            "model(data, scale=Variable(scale.float()))",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(outputTemp)",
                            "Call"
                        ],
                        [
                            "output.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(output)",
                            "Call"
                        ],
                        [
                            "model(data, scale=Variable(scale.float()))",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(outputTemp)",
                            "Call"
                        ],
                        [
                            "output.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/trainer.py": {
        "torch": {
            "SGD_146": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_136": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "variable": {
                    "value": "old_classes_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(oldClassesIndices > 0).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "variable": {
                    "value": "new_classes_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(oldClassesIndices == 0).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_196": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(Variable(data_normal_loss))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(y_onehot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_175": {
                "input": {
                    "value": "oldClassesIndices > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_176": {
                "input": {
                    "value": "oldClassesIndices == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "kl_div_214": {
                "variable": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(Variable(data_distillation_loss), T=myT)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(pred2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "nll_loss_33": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}