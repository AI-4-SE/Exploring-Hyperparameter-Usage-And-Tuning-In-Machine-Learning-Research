{
    "utils/evals.py": {
        "sklearn": {
            "precision_recall_curve_212": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "all_predictions[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_recall_curve_232": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "all_predictions[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_233": {
                "variable": {
                    "value": "auPR",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "reorder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "roc_auc_score_289": {
                "variable": {
                    "value": "auROC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_curve_305": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_recall_curve_180": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "all_predictions[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_181": {
                "variable": {
                    "value": "auPR",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "reorder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "roc_auc_score_255": {
                "variable": {
                    "value": "auROC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "lamp/Attention.py": {
        "torch": {
            "bmm_33": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(output)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.linear_out(combined.view(-1, 2 * hidden_size))).view(batch_size, -1, hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_35": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(output, context.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, input_size), dim=1).view(batch_size, -1, input_size)",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "self.v(F.tanh(self.W(decoder_hidden) + self.U(encoder_outputs)))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(attn, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(attn, encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mix, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_38": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_out(combined.view(-1, 2 * hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, encoder_outputs.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_55": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(output, context.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, input_size), dim=1).view(batch_size, -1, input_size)",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "self.v(F.tanh(self.W(decoder_hidden) + self.U(encoder_outputs)))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U(encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_70": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, encoder_outputs.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_72": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(output, context.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, input_size), dim=1).view(batch_size, -1, input_size)",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "self.v(F.tanh(self.W(decoder_hidden) + self.U(encoder_outputs)))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U(encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, encoder_outputs.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(output, context.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, input_size), dim=1).view(batch_size, -1, input_size)",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(decoder_hidden, encoder_outputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ],
                        [
                            "self.v(F.tanh(self.W(decoder_hidden) + self.U(encoder_outputs)))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, encoder_outputs.size(1)), dim=1).view(batch_size, -1, encoder_outputs.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U(encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transform * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "input": {
                    "value": "self.W(decoder_hidden) + self.U(encoder_outputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lamp/Beam.py": {
        "torch": {
            "sort_75": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "dec_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(hyps)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lamp/Decoders.py": {
        "torch": {
            "Embedding_28": {
                "variable": {
                    "value": "self.tgt_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_tgt_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.attention_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ScaledDotProductAttention(d_model, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.rnn_layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(d_model + d_word_vec, d_model, batch_first=True, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_tgt_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_tgt_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_tgt_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "dec_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_seq.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "tgt_seq.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_tgt_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_tgt_vocab",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "self.constant_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(n_tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_107": {
                "variable": {
                    "value": "self.tgt_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_tgt_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_91": {
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_32": {
                "*args": {
                    "value": "d_model + d_word_vec",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_116": {
                "n": {
                    "value": "n_tgt_vocab",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_68": {
                "input": {
                    "value": "decoder_output.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_68": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lamp/Encoders.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner_hid, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_130": {
                "variable": {
                    "value": "self.brnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_49": {
                "variable": {
                    "value": "self.src_word_emb.weight.data[1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "self.src_word_emb.weight.data[1:].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_53": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "variable": {
                    "value": "self.position_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_max_seq + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool1d_70": {
                "variable": {
                    "value": "enc_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_word_emb(src_seq)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dropout(self.conv1(enc_input.transpose(1, 2))))[:, :, 0:-1]",
                            "Subscript"
                        ],
                        [
                            "F.max_pool1d(enc_input, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(enc_input).transpose(1, 2))[:, 0:-1, :]",
                            "Subscript"
                        ],
                        [
                            "enc_input + self.position_enc(src_pos)",
                            "BinOp"
                        ],
                        [
                            "self.src_word_emb(src_seq)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_123": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_125": {
                "variable": {
                    "value": "self.src_word_emb.weight.data[1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "self.src_word_emb.weight.data[1:].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_126": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_128": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool1d_98": {
                "variable": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_69": {
                "input": {
                    "value": "self.dropout(self.conv1(enc_input.transpose(1, 2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "input": {
                    "value": "self.conv2(enc_input).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lamp/Layers.py": {
        "torch": {
            "Parameter_107": {
                "variable": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d_model, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d_model, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "enc_dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_output, dec_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_dec_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((enc_output, dec_input), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight.repeat(enc_dec_input.size(0), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "enc_dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec_enc_attn_mask, torch.zeros(dec_input.size(1), dec_input.size(1)).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_130": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slf_attn_mask.repeat(support.size(0), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(enc_dec_input, self.weight.repeat(enc_dec_input.size(0), 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(dec_input, self.weight.repeat(dec_input.size(0), 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_140": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.repeat(dec_input.size(0), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_141": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slf_attn_mask.repeat(support.size(0), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(enc_dec_input, self.weight.repeat(enc_dec_input.size(0), 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(dec_input, self.weight.repeat(dec_input.size(0), 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.bias1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "slf_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dec_input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "dec_input.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "dec_input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "dec_input.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lamp/Models.py": {
        "torch": {
            "bmm_131": {
                "variable": {
                    "value": "int_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "int_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(int_out, tgt_word_proj_copy.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tgt_word_proj_copy.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_126": {
                "variable": {
                    "value": "seq_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_output",
                            "Name"
                        ],
                        [
                            "dec_output",
                            "Name"
                        ],
                        [
                            "self.tgt_word_proj(dec_output)",
                            "Call"
                        ],
                        [
                            "torch.diagonal(seq_logit, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_132": {
                "input": {
                    "value": "int_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(int_out, tgt_word_proj_copy.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lamp/SubLayers.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_28": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout2(q)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_41": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.attn_type(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_70": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_128": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_129": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_130": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_131": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_22": {
                "variable": {
                    "value": "self.attn_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_25": {
                "variable": {
                    "value": "self.attn_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_136": {
                "input": {
                    "value": "self.w_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lamp/Translator.py": {
        "torch": {
            "stack_58": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_current_state() for b in beams if not b.done]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_output[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "dec_output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "model.tgt_word_proj(dec_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_170": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(opt.max_token_seq_len_d)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lamp/utils.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ],
                        [
                            "subsequent_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "position_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * (j // 2) / d_pos_vec) for j in range(d_pos_vec)] if pos != 0 else np.zeros(d_pos_vec) for pos in range(n_position)])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "position_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * (j // 2) / d_pos_vec) for j in range(d_pos_vec)] if pos != 0 else np.zeros(d_pos_vec) for pos in range(n_position)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_47": {
                "variable": {
                    "value": "(ranked_labels, ranked_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "global_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "global_labels + labels",
                            "BinOp"
                        ],
                        [
                            "global_labels[0][0:-4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.get_trainable_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_100": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.get_trainable_parameters(), betas=(0.9, 0.98), lr=opt.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data['train']['tgt'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data['valid']['tgt'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data['test']['tgt'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_108": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LAMP(opt.src_vocab_size, opt.tgt_vocab_size, opt.max_token_seq_len_e, opt.max_token_seq_len_d, proj_share_weight=opt.proj_share_weight, embs_share_weight=opt.embs_share_weight, d_k=opt.d_k, d_v=opt.d_v, d_model=opt.d_model, d_word_vec=opt.d_word_vec, d_inner_hid=opt.d_inner_hid, n_layers_enc=opt.n_layers_enc, n_layers_dec=opt.n_layers_dec, n_head=opt.n_head, n_head2=opt.n_head2, dropout=opt.dropout, dec_dropout=opt.dec_dropout, dec_dropout2=opt.dec_dropout2, encoder=opt.encoder, decoder=opt.decoder, enc_transform=opt.enc_transform, onehot=opt.onehot, no_enc_pos_embedding=opt.no_enc_pos_embedding, no_dec_self_att=opt.no_dec_self_att, loss=opt.loss, label_adj_matrix=label_adj_matrix, attn_type=opt.attn_type, label_mask=opt.label_mask, matching_mlp=opt.matching_mlp, graph_conv=opt.graph_conv, int_preds=opt.int_preds)",
                            "Call"
                        ],
                        [
                            "utils.load_embeddings(model, '../../Data/word_embedding_dict.pth')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model_name + '/model.chkpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_115": {
                "device": {
                    "value": "opt.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "runner.py": {
        "torch": {
            "save_62": {
                "obj": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path.join(opt.model_name, 'epochs', 'valid_preds' + str(epoch_i + 1) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path.join(opt.model_name, 'epochs', 'valid_targets' + str(epoch_i + 1) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path.join(opt.model_name, 'epochs', 'test_preds' + str(epoch_i + 1) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_76": {
                "obj": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path.join(opt.model_name, 'epochs', 'test_targets' + str(epoch_i + 1) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path.join(opt.model_name, 'epochs', 'train_preds' + str(epoch_i + 1) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path.join(opt.model_name, 'epochs', 'train_targets' + str(epoch_i + 1) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_data._src_insts)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.tgt_vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_data._src_insts)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.tgt_vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_51": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred[0:batch[0][0].size(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "gold_binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_gold_binary(gold.data.cpu(), opt.tgt_vocab_size).cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt, torch.zeros(diff, tgt.size(1)).type(tgt.type()).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred[0:batch[0][0].size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "(src[0], torch.zeros(diff, src[0].size(1)).type(src[0].type()).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "(src[1], torch.zeros(diff, src[1].size(1)).type(src[1].type()).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.batch_size - src[0].size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.batch_size - src[0].size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "src[0].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.batch_size - src[0].size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "src[1].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(train_data._src_insts)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.tgt_vocab_size if opt.binary_relevance else opt.tgt_vocab_size - 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(train_data._src_insts)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.tgt_vocab_size if opt.binary_relevance else opt.tgt_vocab_size - 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "norm_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_38": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gold_binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_gold_binary(gold.data.cpu(), opt.tgt_vocab_size).cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "pred_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred_vals.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "tgt_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred_vals.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_43": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results[0][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gold_binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_gold_binary(gold.data.cpu(), opt.tgt_vocab_size).cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_62": {
                "*size": {
                    "value": "pred_vals.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_loader.py": {
        "torch": {
            "zeros_53": {
                "variable": {
                    "value": "label_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data['train']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(data['dict']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_60": {
                "variable": {
                    "value": "(values, ranking)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label_vals.sum(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(data['train']['tgt'][i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data['dict']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_37": {
                "variable": {
                    "value": "adj_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(data['dict']['tgt']) - 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_248": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_274": {
                "variable": {
                    "value": "inst_data_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_275": {
                "variable": {
                    "value": "inst_position_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/preprocess.py": {
        "torch": {
            "load_161": {
                "variable": {
                    "value": "predefined_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'settings': opt, 'dict': {'src': src_word2idx, 'tgt': tgt_word2idx}, 'train': {'src': train_src_insts, 'adj': train_adj_insts, 'tgt': train_tgt_insts}, 'valid': {'src': valid_src_insts, 'adj': valid_adj_insts, 'tgt': valid_tgt_insts}, 'test': {'src': test_src_insts, 'adj': test_adj_insts, 'tgt': test_tgt_insts}}",
                            "Dict"
                        ],
                        [
                            "{'settings': opt, 'dict': {'src': src_word2idx, 'tgt': tgt_word2idx}, 'train': {'src': train_src_insts, 'tgt': train_tgt_insts}, 'valid': {'src': valid_src_insts, 'tgt': valid_tgt_insts}, 'test': {'src': test_src_insts, 'tgt': test_tgt_insts}}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.save_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "zeros_66": {
                "variable": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data_dict) - 4, len(data_dict) - 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data_dict) - 4, len(data_dict) - 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "train_label_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data['train']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(data['dict']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "valid_label_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data['valid']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(data['dict']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "train_valid_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_label_vals, valid_label_vals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "mean_pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_valid_labels.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "median_158": {
                "variable": {
                    "value": "median_pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_valid_labels.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_159": {
                "variable": {
                    "value": "max_pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_valid_labels.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_165": {
                "variable": {
                    "value": "mean_samples_per_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_valid_labels.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "median_166": {
                "variable": {
                    "value": "median_samples_per_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_valid_labels.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_167": {
                "variable": {
                    "value": "max_samples_per_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_valid_labels.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_176": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_185": {
                "variable": {
                    "value": "dydx_l2norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dydx ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "gold_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gold.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "tgt_vocab_size + 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "gold_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gold.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "tgt_vocab_size + 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_221": {
                "variable": {
                    "value": "pretrained_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "emb_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KLDivLoss_17": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_30": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.data == self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.tgt_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(opt.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(y.size()).cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(data['train']['tgt'][i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data['dict']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(data['valid']['tgt'][i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data['dict']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_186": {
                "input": {
                    "value": "(dydx_l2norm - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCELoss_41": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_177": {
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(data['dict']['tgt']))",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(data['dict']['tgt']))",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(opt.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(y.size()).cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "dydx ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_190": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_190": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_191": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_191": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_191": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_233": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'settings': opt, 'epoch': epoch_i}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.model_name + '/accu_{accu:3.3f}.chkpt'.format(accu=100 * valid_loss)",
                            "BinOp"
                        ],
                        [
                            "opt.model_name + '/model.chkpt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_238": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'settings': opt, 'epoch': epoch_i}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.model_name + '/accu_{accu:3.3f}.chkpt'.format(accu=100 * valid_loss)",
                            "BinOp"
                        ],
                        [
                            "opt.model_name + '/model.chkpt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}