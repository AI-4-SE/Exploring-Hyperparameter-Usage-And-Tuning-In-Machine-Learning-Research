{
    "code/amazon/IDCF-GC/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_92": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_93": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_94": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_95": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_98": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_137": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.GAT_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_size * head_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_181": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_202": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_245": {
                "variable": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_246": {
                "variable": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_248": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_249": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_250": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_251": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_252": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_253": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_254": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_272": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_276": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_283": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_72": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse",
                            "Attribute"
                        ],
                        [
                            "self.edge_sparse",
                            "Attribute"
                        ],
                        [
                            "edge_index_ui_n[:, torch.randperm(edge_num_n)][:, :int(0.7 * edge_num_n)]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_73": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_iu_n[:, torch.randperm(edge_num_n)][:, :int(0.7 * edge_num_n)]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randint_206": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(0), self.sample_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_228": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse",
                            "Attribute"
                        ],
                        [
                            "self.edge_sparse",
                            "Attribute"
                        ],
                        [
                            "edge_index_ui_n[:, torch.randperm(edge_num_n)][:, :int(0.7 * edge_num_n)]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_229": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_iu_n[:, torch.randperm(edge_num_n)][:, :int(0.7 * edge_num_n)]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_241": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_242": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_244": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_138": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_74": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_75": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_230": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_231": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_76": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_77": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_198": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_232": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_233": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_228": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_229": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_232": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_233": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_226": {
                "n": {
                    "value": "edge_num_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_227": {
                "n": {
                    "value": "edge_num_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/amazon/IDCF-GC/pretrain-beauty.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "edge_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_128": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_61": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_55": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_62": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "train_set_supp_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_supp_i, train_set_supp_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_103": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randperm_130": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-GC/pretrain-books.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "edge_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_129": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_62": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_83": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_56": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "train_set_supp_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_supp_i, train_set_supp_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_104": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randperm_131": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-GC/test-beauty.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "edge_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_71": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_72": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_95": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_102": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(test_set_i_x)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-GC/test-books.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "edge_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_74": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_98": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_105": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(test_set_i_x)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-GC/train-beauty.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "edge_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.05)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_74": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "train_set_que_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_que_i, train_set_que_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_104": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_59": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_108": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_que_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_118": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_que_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_140": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_144": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_178": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_111": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_112": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_113": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-GC/train-books.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "edge_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.05)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_74": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "train_set_que_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_que_i, train_set_que_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_104": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_59": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_108": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_que_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_118": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_que_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_140": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_144": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i, sample_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_179": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_111": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_112": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_113": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-NN/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_54": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_55": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ],
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.GAT_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_size * head_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_173": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_174": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ],
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_177": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_178": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_196": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_200": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_207": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_161": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(0), self.sample_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_99": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_153": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-NN/pretrain-beauty.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_104": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[val_set, val_set_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set, test_set_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_60": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_69": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(model(test_x))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_54": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "variable": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(test_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_80": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(model(test_x))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "train_set_supp_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_supp_i, train_set_supp_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_114": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-NN/pretrain-books.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_116": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[val_set, val_set_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set, test_set_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_60": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_81": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(model(test_x))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_54": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(test_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_92": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(model(test_x))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "train_set_supp_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_supp_i, train_set_supp_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_126": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-NN/test-beauty.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_63": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_86": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-NN/test-books.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_65": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_66": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_88": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-NN/train-beauty.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_159": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_72": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "train_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_i, train_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_89": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_i[k][0].item()]), dtype=torch.long) for k in range(train_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_57": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_93": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_103": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_125": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_129": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_162": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_96": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_97": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_98": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/amazon/IDCF-NN/train-books.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_159": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_72": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_item",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_item']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_neg_per * size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "neg_iid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "train_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_set_i, train_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_89": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_i[k][0].item()]), dtype=torch.long) for k in range(train_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_57": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "[train_set_i[:, 0].repeat(num_neg_per), neg_iid, torch.zeros(num_neg_per * size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_93": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_103": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "test_set_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_set_i, test_set_neg_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_125": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_129": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(train_set_i_x, train_set_his_i, train_set_hl_i)",
                            "Call"
                        ],
                        [
                            "model(test_set_i_x, test_set_his_i, test_set_hl_i)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "test_set_i_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_set_i[:, 2].float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_163": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "num_neg_per * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_96": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_97": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_98": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/GCMC/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc1_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc1_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_107": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_108": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_109": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_77": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_78": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_91": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "gcn_user_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_user_h, gcn_user_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "gcn_item_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_item_h, gcn_item_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_80": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_81": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_82": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/GCMC/test-100k.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/GCMC/test-douban.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/GCMC/train-100k.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.002",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_127": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.05)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_67": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_129": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/GCMC/train-douban.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_123": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.05)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_125": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-GC/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc1_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc1_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_107": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_108": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_109": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.GAT_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_size * head_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.fc1_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.fc1_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_197": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_198": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_219": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_278": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_279": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_280": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_281": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_282": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_283": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_284": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_302": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_306": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_313": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_266": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_267": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_77": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_78": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_91": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "gcn_user_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_user_h, gcn_user_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "gcn_item_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_item_h, gcn_item_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_151": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_156": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_224": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(0), self.sample_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_226": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_226": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_249": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_250": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_257": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_258": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_263": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_272": {
                "variable": {
                    "value": "gcn_user_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_user_h, gcn_user_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "gcn_item_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_item_h, gcn_item_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_80": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_215": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_251": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_252": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_81": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_82": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_253": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_254": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_249": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_250": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_253": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_254": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-GC/pretrain-100k.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.002",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_132": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.05)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_72": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_134": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-GC/pretrain-douban.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.002",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_132": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.05)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_72": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_134": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-GC/test-100k.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_supp_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_111": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_138": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-GC/test-douban.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_supp_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_111": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_138": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-GC/train-100k.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ExponentialLR_167": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=1)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_sequence_100": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_71": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_134": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_170": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_110": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_111": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_112": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-GC/train-douban.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ExponentialLR_167": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=1)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_sequence_100": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_71": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_134": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_170": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_110": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_111": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_112": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-NN/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_56": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_57": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ],
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.GAT_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_size * head_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_179": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_180": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ],
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_183": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_202": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_206": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_213": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_101": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_165": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(0), self.sample_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_167": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_156": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-NN/pretrain-100k.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.002",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_65": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_108": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-NN/pretrain-douban.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.002",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_65": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_108": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-NN/test-100k.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "supp_users_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_user",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_user']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_supp_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_103": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_128": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_123": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-NN/test-douban.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "supp_users_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_user",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_user']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_supp_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_103": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_128": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_123": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-NN/train-100k.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_154": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_sequence_94": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_65": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_124": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_157": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_101": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_102": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_103": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/IDCF-NN/train-douban.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_154": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_sequence_94": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_65": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_124": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_157": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_101": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_102": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_103": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/NNMF/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_56": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_57": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/NNMF/test-100k.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/NNMF/test-douban.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/NNMF/train-100k.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.002",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_68": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_60": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_103": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/douban/NNMF/train-douban.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_66": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_77": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_99": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/GCMC/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc1_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc1_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_107": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_108": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_109": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_77": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_78": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_91": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "gcn_user_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_user_h, gcn_user_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "gcn_item_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_item_h, gcn_item_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_80": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_81": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_82": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/GCMC/test-1m.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/GCMC/train-1m.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_126": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_66": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_113": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_128": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-GC/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc1_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc1_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_107": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_108": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_109": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_186": {
                "variable": {
                    "value": "self.GAT_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_size * head_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.GCN_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.GCN_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.fc1_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.fc1_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_rating * embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_228": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_287": {
                "variable": {
                    "value": "interaction1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_288": {
                "variable": {
                    "value": "interaction2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_289": {
                "variable": {
                    "value": "interaction3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_290": {
                "variable": {
                    "value": "interaction4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_user(gcn_user_h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gcn_item_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ],
                        [
                            "self.fc1_item(gcn_item_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_291": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interaction1, interaction2, interaction3, interaction4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_292": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_293": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_315": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_336": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_353": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_357": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_364": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_275": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_user(gcn_user_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_276": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GCN_item(gcn_item_h_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_319": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_319": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_340": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_340": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_77": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_78": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_91": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "gcn_user_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_user_h, gcn_user_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "gcn_item_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_item_h, gcn_item_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_151": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_156": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_164": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_233": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(0), self.sample_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_235": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_235": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_258": {
                "variable": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.edge_sparse[self.edge_sparse[:, 2] == n][:, :2].transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_ui_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_user, self.n_item])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_259": {
                "variable": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ],
                        [
                            "edge_index_ui_n[[1, 0], :]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones(edge_index_iu_n.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([self.n_item, self.n_user])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_266": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_ui_n, item_h)[user_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_item_h_n / item_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_item_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_UI_n, item_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_item(gcn_item_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_267": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(edge_iu_n, user_h)[item_id]",
                            "Subscript"
                        ],
                        [
                            "gcn_user_h_n / user_din",
                            "BinOp"
                        ],
                        [
                            "F.dropout(gcn_user_h_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(edge_IU_n, user_h)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.GCN_user(gcn_user_h_n))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_271": {
                "variable": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_272": {
                "variable": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_273": {
                "variable": {
                    "value": "gcn_user_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_IU_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_IU[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_IU_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_274": {
                "variable": {
                    "value": "gcn_item_h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_UI_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ],
                        [
                            "edge_UI[n].float()",
                            "Call"
                        ],
                        [
                            "F.dropout(edge_UI_n, p=0.3, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_281": {
                "variable": {
                    "value": "gcn_user_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_user_h, gcn_user_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "gcn_item_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gcn_item_h, gcn_item_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "gat_attns",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_attns, gat_attn_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_80": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_224": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_260": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "item_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding",
                            "Attribute"
                        ],
                        [
                            "self.item_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_261": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "user_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding",
                            "Attribute"
                        ],
                        [
                            "self.user_embedding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_311": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_332": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_81": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_82": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_262": {
                "input": {
                    "value": "edge_ui_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_ui_n, torch.ones(edge_index_ui_n.size(1)), size=torch.Size([self.n_user, self.n_item])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_item, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_263": {
                "input": {
                    "value": "edge_iu_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge_index_iu_n, torch.ones(edge_index_iu_n.size(1)), size=torch.Size([self.n_item, self.n_user])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(self.n_user, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "edge_index_ui_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_259": {
                "*size": {
                    "value": "edge_index_iu_n.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_262": {
                "*size": {
                    "value": "self.n_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_263": {
                "*size": {
                    "value": "self.n_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-GC/pretrain-1m.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_135": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_74": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_137": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-GC/test-1m.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_supp_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_110": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_137": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-GC/train-1m.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_162": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_UI[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_sequence_97": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_71": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_129": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_165": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_106": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_108": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-NN/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_54": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_55": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ],
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gat_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(x.repeat(1, neighbor.size(1), 1), neighbor), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.GAT_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_size * head_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_185": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ],
                        [
                            "self.w_out(gat_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ],
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_186": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ],
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_189": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_190": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_212": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "history_emb[~mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.item_embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_233": {
                "variable": {
                    "value": "user_init_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embedding[history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_250": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_254": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_261": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_216": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_216": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_237": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_237": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_98": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_103": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_111": {
                "input": {
                    "value": "x.repeat(1, neighbor.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ],
                        [
                            "neighbor.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.wk(neighbor)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_171": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(0), self.sample_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_173": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.supp_user_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "sample_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "gat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_output, gat_output_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "gat_attns",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gat_attns, gat_attn_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_162": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_208": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_229": {
                "start": {
                    "value": "history.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-NN/pretrain-1m.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_105": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_68": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_111": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-NN/test-1m.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "supp_users_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_user",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config[DATASET]['n_user']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_set_supp + train_set_que)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_supp_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_103": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_128": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_123": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/IDCF-NN/train-1m.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "supp_users",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "user_supp_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_151": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_que",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_sequence_91": {
                "variable": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[train_set_que_i[k][0].item()]), dtype=torch.long) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(train_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[train_set_his_i[k].size(0) for k in range(train_set_que_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(train_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_65": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(user_emb_trd_, user_emb_ind_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequence_121": {
                "variable": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_set_his_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.tensor(sequence_adjust(user_his_dic[test_set_i[k][0].item()]), dtype=torch.long) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(test_set_his_i, batch_first=True, padding_value=0.0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_hl_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[test_set_his_i[k].size(0) for k in range(test_set_i.size(0))]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(test_set_hl_i, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_125": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_set_i_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[train_set_que_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-extra.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model-inter.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_154": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_98": {
                "input": {
                    "value": "user_emb_trd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_trd.unsqueeze(0).repeat(user_emb_ind.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "user_emb_ind_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "user_emb_ind.unsqueeze(1).repeat(1, user_emb_trd.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_99": {
                "input": {
                    "value": "dot_prod.diagonal() - torch.logsumexp(dot_prod, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "sequence_adjust(user_his_dic[test_set_i[k][0].item()])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_100": {
                "input": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(user_emb_trd_, user_emb_ind_), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/NNMF/model.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.user_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_user, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.item_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_item, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_54": {
                "variable": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.user_embedding[user_id]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embedding[item_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_55": {
                "variable": {
                    "value": "ratings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(user_emb, item_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_emb, item_emb, interaction]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "self.user_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.item_embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.sum(self.user_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(self.item_embedding ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/NNMF/test-1m.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_supp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_que",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_set_que)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/ml-1m/NNMF/train-1m.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_set_supp + train_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_set_supp + test_set_que",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_91": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "DECAYING_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_62": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(train_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_54": {
                "n": {
                    "value": "train_set.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(test_y - pred_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + 'model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_97": {
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}