{
    "results/sacred/_sources/main_47bb4a3b7cf41887c1f8e7a35c98e388.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "_config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "results/sacred/_sources/run_4c4d6045034fbd61a07c51a1b9ebae1a.py": {
        "torch": {
            "is_available_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/components/action_selectors.py": {
        "torch": {
            "rand_like_57": {
                "variable": {
                    "value": "random_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_inputs[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Categorical_59": {
                "variable": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "avail_actions.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_27": {
                "variable": {
                    "value": "picked_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "masked_policies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agent_inputs.clone()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/components/episode_buffer.py": {
        "torch": {
            "tensor_105": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data.transition_data.items()",
                            "Call"
                        ],
                        [
                            "v.to(device)",
                            "Call"
                        ],
                        [
                            "self.data.episode_data.items()",
                            "Call"
                        ],
                        [
                            "v.to(device)",
                            "Call"
                        ],
                        [
                            "data.items()",
                            "Call"
                        ],
                        [
                            "th.tensor(v, dtype=dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "target[k][_slices]",
                            "Subscript"
                        ],
                        [
                            "transform.transform(v)",
                            "Call"
                        ],
                        [
                            "self.data.transition_data.items()",
                            "Call"
                        ],
                        [
                            "self.data.episode_data.items()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scheme[k]['dtype']",
                            "Subscript"
                        ],
                        [
                            "transform.infer_output_info(vshape, dtype)",
                            "Call"
                        ],
                        [
                            "field_info.get('dtype', th.float32)",
                            "Call"
                        ],
                        [
                            "self.scheme[k].get('dtype', th.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "self.data.episode_data[field_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scheme[k]['dtype']",
                            "Subscript"
                        ],
                        [
                            "transform.infer_output_info(vshape, dtype)",
                            "Call"
                        ],
                        [
                            "field_info.get('dtype', th.float32)",
                            "Call"
                        ],
                        [
                            "self.scheme[k].get('dtype', th.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "self.data.transition_data[field_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_length, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scheme[k]['dtype']",
                            "Subscript"
                        ],
                        [
                            "transform.infer_output_info(vshape, dtype)",
                            "Call"
                        ],
                        [
                            "field_info.get('dtype', th.float32)",
                            "Call"
                        ],
                        [
                            "self.scheme[k].get('dtype', th.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "self.data.transition_data['filled']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_200": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/transforms.py": {
        "torch": {}
    },
    "src/controllers/basic_controller.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs * self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent(agent_inputs, self.hidden_states)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.softmax(agent_outs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - self.action_selector.epsilon) * agent_outs + th.ones_like(agent_outs) * self.action_selector.epsilon / epsilon_action_num",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "self.agent.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_72": {
                "f": {
                    "value": "'{}/agent.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "eye_89": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "input": {
                    "value": "batch['actions_onehot'][:, t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "agent_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent(agent_inputs, self.hidden_states)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.softmax(agent_outs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - self.action_selector.epsilon) * agent_outs + th.ones_like(agent_outs) * self.action_selector.epsilon / epsilon_action_num",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/learners/actor_critic_learner.py": {
        "torch": {
            "RMSprop_34": {
                "variable": {
                    "value": "self.agent_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_35": {
                "variable": {
                    "value": "self.critic_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ],
                        [
                            "mac_out / mac_out.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_64": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mac_out",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_66": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.gather(pi, dim=3, index=actions).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__83": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_102": {
                "variable": {
                    "value": "nstep_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "v_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_v_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_critic(batch)[:, :]",
                            "Subscript"
                        ],
                        [
                            "target_v_vals.squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_104": {
                "variable": {
                    "value": "nstep_return_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__157": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "self.agent_optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "self.critic_optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_190": {
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_193": {
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_194": {
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "src/learners/coma_learner.py": {
        "torch": {
            "RMSprop_40": {
                "variable": {
                    "value": "self.agent_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_41": {
                "variable": {
                    "value": "self.critic_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ],
                        [
                            "mac_out / mac_out.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_121": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._train_critic_qvalues(batch, rewards, terminated, actions, critic_mask, bs)",
                            "Call"
                        ],
                        [
                            "q_vals.reshape(-1, self.n_actions)",
                            "Call"
                        ],
                        [
                            "th.zeros_like(target_q_vals)[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_122": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mac_out.view(-1, self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_124": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.gather(pi, dim=1, index=actions.reshape(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__136": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "v_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_v_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_baseline_critic(batch)[:, :]",
                            "Subscript"
                        ],
                        [
                            "target_v_vals.squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_211": {
                "variable": {
                    "value": "targets_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_critic(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, :]",
                            "Subscript"
                        ],
                        [
                            "actions[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_211": {
                "variable": {
                    "value": "targets_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_54": {
                "variable": {
                    "value": "self.baseline_critic_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.baseline_critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__193": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.baseline_critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_235": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(batch, t)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions[:, t:t + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch['actions'][:, :]",
                            "Subscript"
                        ],
                        [
                            "actions[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_235": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__248": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_277": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "self.agent_optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "self.critic_optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_216": {
                "input": {
                    "value": "target_q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_critic(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_217": {
                "input": {
                    "value": "target_raw_q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_critic(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_283": {
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_286": {
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_287": {
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "multinomial_104": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.ones(products.shape, device=batch.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_105": {
                "variable": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "products",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_q_vals * mac_out",
                            "BinOp"
                        ],
                        [
                            "products.view(-1, self.n_agents * self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.multinomial(th.ones(products.shape, device=batch.device), self.n_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_109": {
                "variable": {
                    "value": "max_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_113": {
                "variable": {
                    "value": "max_q[:, max_q.shape[1] - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "max_q[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_104": {
                "*size": {
                    "value": "products.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_109": {
                "input": {
                    "value": "raw_q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._train_critic_qvalues(batch, rewards, terminated, actions, critic_mask, bs)",
                            "Call"
                        ],
                        [
                            "th.zeros_like(target_raw_q_vals)[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/learners/pair_coma_learner_failed.py": {
        "torch": {
            "RMSprop_30": {
                "variable": {
                    "value": "self.agent_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_31": {
                "variable": {
                    "value": "self.critic_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ],
                        [
                            "mac_out / mac_out.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_64": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_83": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mac_out.view(-1, self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_85": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.gather(pi, dim=1, index=actions.reshape(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__94": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_117": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_117": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_123": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - identity) * q",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, :]",
                            "Subscript"
                        ],
                        [
                            "actions[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "batch['actions'][:, ts].unsqueeze(3).expand(-1, -1, -1, self.n_agents, -1)",
                            "Call"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_123": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__173": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.critic_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "self.agent_optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "self.critic_optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_142": {
                "input": {
                    "value": "target_q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_critic(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_203": {
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_206": {
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_207": {
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_81": {
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._train_critic(batch, rewards, terminated, actions, critic_mask, bs)",
                            "Call"
                        ],
                        [
                            "(1 - identity) * q_vals",
                            "BinOp"
                        ],
                        [
                            "th.zeros_like(target_q_vals)[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions_for_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions.unsqueeze(3).expand(-1, -1, -1, self.n_agents, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_81": {
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/learners/policy_gradient_learner.py": {
        "torch": {
            "RMSprop_34": {
                "variable": {
                    "value": "self.agent_optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ],
                        [
                            "mac_out / mac_out.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_64": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mac_out",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_66": {
                "variable": {
                    "value": "log_pi_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.gather(pi, dim=3, index=actions).squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__87": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "variable": {
                    "value": "nstep_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['filled'][:, :-1].float()",
                            "Call"
                        ],
                        [
                            "mask.repeat(1, 1, self.n_agents)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "nstep_return_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "self.agent_optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "log_80": {
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mac_out",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "src/learners/q_learner.py": {
        "torch": {
            "RMSprop_30": {
                "variable": {
                    "value": "self.optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_55": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mac_out[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "target_mac_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_mac_out[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__101": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_75": {
                "variable": {
                    "value": "target_max_qvals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_mac_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(target_mac_out[1:], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "cur_max_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mac_out[:, 1:].max(dim=3, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "target_max_qvals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "self.optimiser.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "self.mixer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/mixer.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "'{}/opt.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "'{}/mixer.th'.format(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "_config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/agents/rnn_agent.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_11": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/critics/centralV.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + scheme['actions_onehot']['vshape'][0] * self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs * max_t, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_42": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/critics/coma.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs, max_t, self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_42": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_56": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/critics/factored_centralV.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.mix_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.mix_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs, max_t, self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix_fc1(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_59": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/critics/factored_coma.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.args.q_network_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.q_network_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.q_network_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.q_network_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs, max_t, self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_74": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/critics/pair_coma.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + 2 * self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_34": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_39": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "(1 - identity) * q",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, ts].unsqueeze(3).expand(-1, -1, -1, self.n_agents, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_103": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs, max_t, self.n_agents, self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/critics/pair_coma_failed.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + 2 * self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "mask_for_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_72": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "blank_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions_onehot'][:, ts].unsqueeze(3).expand(-1, -1, self.n_agents, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs, max_t, self.n_agents, self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "max_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.max_seq_length if t is None else 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/mixers/fql_critic.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_shape, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_shape, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_36": {
                "variable": {
                    "value": "u_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_agents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, ts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "u_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs, max_t, self.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_input_shape(scheme)",
                            "Call"
                        ],
                        [
                            "scheme['state']['vshape']",
                            "Subscript"
                        ],
                        [
                            "input_shape + self.n_agents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "last_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_65": {
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_62": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/mixers/qmix.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.hyper_w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim * self.n_agents",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.hyper_w_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.hyper_b_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.state_dim, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_33": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w_1(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_37": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.bmm(agent_qs, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_39": {
                "variable": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w_final(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_44": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.elu(th.bmm(agent_qs, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.abs(self.hyper_w_final(states))",
                            "Call"
                        ],
                        [
                            "w_final.view(-1, self.embed_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_37": {
                "input": {
                    "value": "agent_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agent_qs.view(-1, 1, self.n_agents)",
                            "Call"
                        ],
                        [
                            "agent_qs",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.abs(self.hyper_w_1(states))",
                            "Call"
                        ],
                        [
                            "w1.view(-1, self.n_agents, self.embed_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/mixers/qmix_critic.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.hyper_w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim * self.n_agents",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.hyper_w_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.hyper_b_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.state_dim, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_38": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_agents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_agents",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, ts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_40": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_53": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.bmm(q_taken, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "input": {
                    "value": "q_agents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_agents",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_60": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.elu(th.bmm(q_taken, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hyper_w_final(states)",
                            "Call"
                        ],
                        [
                            "w_final.unsqueeze(2).repeat(1, self.n_agents * self.n_actions, 1).view(-1, self.embed_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_53": {
                "input": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.gather(q_agents, dim=3, index=actions).view(bs, t_total, 1, self.n_agents).repeat(1, 1, self.n_agents, 1)",
                            "Call"
                        ],
                        [
                            "q_taken.unsqueeze(3).repeat(1, 1, 1, self.n_actions, 1)",
                            "Call"
                        ],
                        [
                            "q_taken.view(-1, self.n_agents).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hyper_w_1(states)",
                            "Call"
                        ],
                        [
                            "w1.unsqueeze(2).repeat(1, self.n_agents * self.n_actions, 1).view(-1, self.n_agents, self.embed_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/mixers/qmix_ns_critic.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_27": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_agents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_agents",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, ts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_29": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "q_after_first_later",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(q_taken)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_32": {
                "input": {
                    "value": "q_agents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_agents",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/mixers/vdn.py": {
        "torch": {
            "sum_10": {
                "input": {
                    "value": "agent_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agent_qs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/mixers/vdn_critic.py": {
        "torch": {
            "gather_20": {
                "variable": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_agents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_agents",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['actions'][:, ts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_22": {
                "variable": {
                    "value": "q_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_taken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.gather(q_agents, dim=3, index=actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/run.py": {
        "torch": {
            "is_available_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/runners/episode_cross_runner.py": {
        "torch": {
            "stack_112": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[actions1[:, 0], actions2[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[actions1[:, 0], actions2[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/runners/parallel_runner.py": {
        "torch": {}
    },
    "src/utils/hash_function.py": {
        "torch": {
            "relu_26": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs * np.sqrt(inputs.shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(h1 * np.sqrt(h1.shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(h2 * np.sqrt(h2.shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc4(h3 * np.sqrt(h3.shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "histories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(histories.T, dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "histories - histories.mean(axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "histories",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "histories.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hash_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/rl_utils.py": {
        "torch": {
            "sum_8": {
                "input": {
                    "value": "terminated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "terminated",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}