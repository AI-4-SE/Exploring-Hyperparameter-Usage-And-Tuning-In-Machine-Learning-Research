{
    "main_HSL_pytorch_2D.py": {
        "torch": {
            "cat_374": {
                "variable": {
                    "value": "Ddiff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Cdiff1[None], Cdiff2[None])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_397": {
                "variable": {
                    "value": "dq_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + 100 * criterion(comp_preds, Variable(torch.from_numpy(comps).type(dtype)))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subset_parameters(HSLmodel)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_437": {
                "variable": {
                    "value": "Ddiff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Cdiff1[None], Cdiff2[None])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_254": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([5.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['gamma']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_264": {
                "variable": {
                    "value": "self.muh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.2]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['muh']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "self.sigmah",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['sigmah']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.muf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['muf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_289": {
                "variable": {
                    "value": "self.nuf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.3]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['nuf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_290": {
                "variable": {
                    "value": "self.alphaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.8]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['alphaf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.betaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.9]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['betaf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_294": {
                "variable": {
                    "value": "self.mug",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([3.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['mug']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_295": {
                "variable": {
                    "value": "self.nug",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([3.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['nug']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_296": {
                "variable": {
                    "value": "self.alphag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.2]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['alphag']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_297": {
                "variable": {
                    "value": "self.betag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['betag']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "abs_317": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "as_compared[None, :, :, :] - a_tests[:, None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "self.muf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([muf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "variable": {
                    "value": "self.nuf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([nuf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_330": {
                "variable": {
                    "value": "self.alphaf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([alphaf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_331": {
                "variable": {
                    "value": "self.betaf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([betaf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "self.mug.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([mug])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_333": {
                "variable": {
                    "value": "self.nug.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([nug])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_334": {
                "variable": {
                    "value": "self.alphag.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([alphag])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_335": {
                "variable": {
                    "value": "self.betag.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([betag])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_336": {
                "variable": {
                    "value": "self.H.muh.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([muh])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_337": {
                "variable": {
                    "value": "self.H.sigmah.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([sigmah])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "variable": {
                    "value": "self.F.gamma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([gamma])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "Cdiff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "color_abs[None, None, None, :] - C[:, :, :, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "fu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, G.reshape((1, 2 * Nx + 1, 1, 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu, G.reshape((1, 1, 2 * Nx + 1, 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, G.reshape((1, 2 * Nx + 1, 1, 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu, G.reshape((1, 1, 2 * Nx + 1, 1, 1)), 'same')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "ndarray": {
                    "value": "fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, C.reshape((1, 1, 1, 1, 2 * Nc + 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fw, C.reshape((1, 1, 1, 2 * Nc + 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, C.reshape((1, 1, 1, 1, 2 * Nc + 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fw, C.reshape((1, 1, 1, 2 * Nc + 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fw).type(dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_345": {
                "input": {
                    "value": "Variable(torch.zeros(1), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "fu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, G.reshape((1, 2 * Nx + 1, 1, 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu, G.reshape((1, 1, 2 * Nx + 1, 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, G.reshape((1, 2 * Nx + 1, 1, 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu, G.reshape((1, 1, 2 * Nx + 1, 1, 1)), 'same')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_180": {
                "ndarray": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, G, 'same')",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(aa).type(dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_226": {
                "ndarray": {
                    "value": "fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, C.reshape((1, 1, 1, 1, 2 * Nc + 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fw, C.reshape((1, 1, 1, 2 * Nc + 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, C.reshape((1, 1, 1, 1, 2 * Nc + 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fw, C.reshape((1, 1, 1, 2 * Nc + 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fw).type(dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_232": {
                "ndarray": {
                    "value": "fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, C.reshape((1, 1, 1, 1, 2 * Nc + 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fw, C.reshape((1, 1, 1, 2 * Nc + 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, C.reshape((1, 1, 1, 1, 2 * Nc + 1)), 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fw, C.reshape((1, 1, 1, 2 * Nc + 1, 1)), 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fw).type(dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_268": {
                "input": {
                    "value": "-x ** 2 / (2 * self.sigmah ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_296": {},
            "Tensor_297": {},
            "dot_181": {
                "input": {
                    "value": "aa.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_233": {
                "input": {
                    "value": "fw.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_306": {
                "*size": {
                    "value": "N + Ncol",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2 * Nx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * Nx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 * Nc + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "2 * Nc + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_380": {
                "ndarray": {
                    "value": "comps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HSL_comp_configs[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_257": {
                "input": {
                    "value": "-self.gamma * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main_pytorch.py": {
        "torch": {
            "grad_456": {
                "variable": {
                    "value": "dq_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + 100 * criterion(comp_preds, Variable(torch.from_numpy(comps).type(dtype)))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subset_parameters(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([5.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['gamma']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_294": {
                "variable": {
                    "value": "self.muh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.2]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['muh']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_295": {
                "variable": {
                    "value": "self.sigmah",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['sigmah']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "self.muf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['muf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.nuf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.3]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['nuf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_320": {
                "variable": {
                    "value": "self.alphaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.8]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['alphaf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.betaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.9]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['betaf']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.mug",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([3.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['mug']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_325": {
                "variable": {
                    "value": "self.nug",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([3.0]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['nug']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_326": {
                "variable": {
                    "value": "self.alphag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.2]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['alphag']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Parameter_327": {
                "variable": {
                    "value": "self.betag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5]).type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "do_we_grad['betag']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': False, 'sigmah': False, 'gamma': False}",
                            "Dict"
                        ],
                        [
                            "{'muf': False, 'nuf': False, 'alphaf': False, 'betaf': False, 'mug': False, 'nug': False, 'alphag': False, 'betag': False, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ],
                        [
                            "{'muf': True, 'nuf': True, 'alphaf': True, 'betaf': True, 'mug': True, 'nug': True, 'alphag': True, 'betag': True, 'muh': True, 'sigmah': True, 'gamma': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "abs_346": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "as_compared[None, :, :] - a_tests[:, None, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_348": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-u",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_356": {
                "variable": {
                    "value": "self.muf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([muf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_357": {
                "variable": {
                    "value": "self.nuf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([nuf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "variable": {
                    "value": "self.alphaf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([alphaf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "self.betaf.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([betaf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "self.mug.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([mug])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_361": {
                "variable": {
                    "value": "self.nug.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([nug])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_362": {
                "variable": {
                    "value": "self.alphag.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([alphag])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_363": {
                "variable": {
                    "value": "self.betag.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([betag])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_364": {
                "variable": {
                    "value": "self.H.muh.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([muh])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_365": {
                "variable": {
                    "value": "self.H.sigmah.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([sigmah])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_366": {
                "variable": {
                    "value": "self.F.gamma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([gamma])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "Cdiff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "color_abs[None, None, None, :] - C[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "create_diffs(C)",
                            "Call"
                        ],
                        [
                            "create_diffs(C)",
                            "Call"
                        ],
                        [
                            "create_diffs(C)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_199": {
                "ndarray": {
                    "value": "fu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, G, 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu.transpose((0, 2, 1, 3)), G, 'same').transpose((0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, G, 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu.transpose((0, 2, 1, 3)), G, 'same').transpose((0, 2, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_242": {
                "ndarray": {
                    "value": "fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_408": {
                "input": {
                    "value": "Variable(torch.zeros(1), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_212": {
                "ndarray": {
                    "value": "fu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, G, 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu.transpose((0, 2, 1, 3)), G, 'same').transpose((0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, G, 'same')",
                            "Call"
                        ],
                        [
                            "fftconvolve(fu.transpose((0, 2, 1, 3)), G, 'same').transpose((0, 2, 1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_217": {
                "ndarray": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, G, 'same')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_257": {
                "ndarray": {
                    "value": "fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "ndarray": {
                    "value": "fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(grad_output_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ],
                        [
                            "fftconvolve(a_n, C, 'same')",
                            "Call"
                        ],
                        [
                            "Flip_or_not(fw, flip)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_326": {},
            "Tensor_327": {},
            "dot_218": {
                "input": {
                    "value": "convo.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_264": {
                "input": {
                    "value": "convo.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_298": {
                "input": {
                    "value": "-x ** 2 / (2 * self.sigmah ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_336": {
                "*size": {
                    "value": "N + Ncol",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2 * Nx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * Nx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 * Nc + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_439": {
                "ndarray": {
                    "value": "comps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comp_configs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "comp_configs[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_287": {
                "input": {
                    "value": "-self.gamma * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_argmax.py": {
        "torch": {
            "from_numpy_32": {
                "ndarray": {
                    "value": "color_abs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_45": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10 * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "argmaxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "color_abs_var * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "color_abs_var * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "20 * (v - 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "20 * (v - 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_70": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "20 * (v - 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_86": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10 * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_90": {
                "input": {
                    "value": "torch.cat((v1[None], v2[None]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "abs_prod[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "abs_prod[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "(v1[None], v2[None])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v / v.max()",
                            "BinOp"
                        ],
                        [
                            "torch.exp(10 * v)",
                            "Call"
                        ],
                        [
                            "v / torch.sum(v, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "v / v.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "v / v.max(1)[0][:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(10 * v)",
                            "Call"
                        ],
                        [
                            "v / v.sum(1)[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "torch.sum(v, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "v.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_71": {
                "input": {
                    "value": "torch.sum(v, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v / v.max()",
                            "BinOp"
                        ],
                        [
                            "torch.exp(10 * v)",
                            "Call"
                        ],
                        [
                            "v / torch.sum(v, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "v / v.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "v / v.max(1)[0][:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(10 * v)",
                            "Call"
                        ],
                        [
                            "v / v.sum(1)[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v / v.max()",
                            "BinOp"
                        ],
                        [
                            "torch.exp(10 * v)",
                            "Call"
                        ],
                        [
                            "v / torch.sum(v, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "v / v.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "torch.exp(20 * (v - 2))",
                            "Call"
                        ],
                        [
                            "v / v.max(1)[0][:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(10 * v)",
                            "Call"
                        ],
                        [
                            "v / v.sum(1)[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}