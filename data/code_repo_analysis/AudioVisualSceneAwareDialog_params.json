{
    "code/avsd_generate.py": {
        "torch": {
            "load_104": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model + '.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(x) for x in x_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(q) for q in q_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[torch.from_numpy(h) for h in hb] for hb in h_batch]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "code/avsd_train.py": {
        "torch": {
            "device_211": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_224": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_226": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_303": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MMSeq2SeqModel(MMEncoder(feature_dims, args.mout_size, enc_psize=args.enc_psize, enc_hsize=args.enc_hsize, att_size=args.att_size, state_size=args.in_enc_hsize), HLSTMEncoder(args.hist_enc_layers[0], args.hist_enc_layers[1], len(vocab), args.hist_out_size, args.embed_size, args.hist_enc_hsize), LSTMEncoder(args.in_enc_layers, len(vocab), args.in_enc_hsize, args.embed_size), HLSTMDecoder(args.dec_layers, len(vocab), len(vocab), args.embed_size, args.mout_size + args.hist_out_size + args.in_enc_hsize, args.dec_hsize, args.dec_psize, independent=True))",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "modelfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model + '_' + str(i + 1) + modelext",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adadelta_228": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(x) for x in x_batch]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(x) for x in x_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(q) for q in q_batch]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(q) for q in q_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(ai) for ai in a_batch_in]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(ai) for ai in a_batch_in]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "ao",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(ao) for ao in a_batch_out]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(ao) for ao in a_batch_out]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "RMSprop_230": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(x) for x in x_batch]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(x) for x in x_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_264": {
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(q) for q in q_batch]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(q) for q in q_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_265": {
                "ndarray": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(ai) for ai in a_batch_in]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(ai) for ai in a_batch_in]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_266": {
                "ndarray": {
                    "value": "ao",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.from_numpy(ao) for ao in a_batch_out]",
                            "ListComp"
                        ],
                        [
                            "[torch.from_numpy(ao) for ao in a_batch_out]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[torch.from_numpy(h) for h in hb] for hb in h_batch]",
                            "ListComp"
                        ],
                        [
                            "[[torch.from_numpy(h) for h in hb] for hb in h_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "ndarray": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[torch.from_numpy(h) for h in hb] for hb in h_batch]",
                            "ListComp"
                        ],
                        [
                            "[[torch.from_numpy(h) for h in hb] for hb in h_batch]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "code/data_handler.py": {
        "torch": {}
    },
    "code/hlstm_decoder.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_31": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + in_size_hier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "proj_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "proj_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(x) for x in xs], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_70": {
                "variable": {
                    "value": "(cc, perm_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sections.tolist()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sections)",
                            "Call"
                        ],
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_72": {
                "variable": {
                    "value": "padded_hxc",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sort_hxc[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_73": {
                "variable": {
                    "value": "packed_hxc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_hxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(sort_hxc[0], batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "list(cc.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.embed(i), self.hx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(torch.tensor(aa, dtype=torch.long).cuda())",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sections.tolist()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sections)",
                            "Call"
                        ],
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_79": {
                "variable": {
                    "value": "(cc2, perm_index2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "vstack_104": {
                "variable": {
                    "value": "self.hx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[j][-1] for j in six.moves.range(len(x[1]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.embed(i), self.hx), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_154": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(self.proj(F.dropout(torch.cat(ys2_list[0], dim=0), p=self.dropout)))",
                            "Call"
                        ],
                        [
                            "self.out(self.proj(s[2][0]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "(hx[i], hs[i].repeat(hx[i].shape[0], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_130": {
                "variable": {
                    "value": "s[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_76": {
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(packed_hxc)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(ys, batch_first=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "input": {
                    "value": "torch.cat(ys2_list[0], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "ys2_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_129": {
                "tensors": {
                    "value": "(s[m][n], s[m][n + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/hlstm_encoder.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_26": {
                "variable": {
                    "value": "self.wlstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.slstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "sxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_52": {
                "variable": {
                    "value": "wj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(torch.tensor(aa, dtype=torch.long).cuda())",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sections.tolist()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sections)",
                            "Call"
                        ],
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(x) for x in xs[l]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_57": {
                "variable": {
                    "value": "(cc, perm_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sections.tolist()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sections)",
                            "Call"
                        ],
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_59": {
                "variable": {
                    "value": "padded_wj",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sort_wj[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_60": {
                "variable": {
                    "value": "packed_wj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_wj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(sort_wj[0], batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "list(cc.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(cc - 1).view(-1, 1).expand(ys.size(0), ys.size(2)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(idx, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_77": {
                "variable": {
                    "value": "(cc2, perm_index2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_70": {
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wlstm(packed_wj)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(ys, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "self.wlstm(packed_wj)",
                            "Call"
                        ],
                        [
                            "self.wlstm(packed_wj, (why, wcy))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(xs[l], 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/lstm_encoder.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_26": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_48": {
                "variable": {
                    "value": "wj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(torch.tensor(aa, dtype=torch.long).cuda())",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sections.tolist()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sections)",
                            "Call"
                        ],
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(x) for x in xs], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_53": {
                "variable": {
                    "value": "(cc, perm_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sections.tolist()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sections)",
                            "Call"
                        ],
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_55": {
                "variable": {
                    "value": "padded_wj",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sort_wj[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_56": {
                "variable": {
                    "value": "packed_wj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_wj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(sort_wj[0], batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "list(cc.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(cc - 1).view(-1, 1).expand(ys.size(0), ys.size(2)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(idx, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_97": {
                "variable": {
                    "value": "(cc2, perm_index2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(cc, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_90": {
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(packed_wj, (s[0], s[1]))",
                            "Call"
                        ],
                        [
                            "self.lstm(packed_wj)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(ys, batch_first=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/mmseq2seq_model.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ei, ems, eh[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ei, ems, eh[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.response_decoder(es, None, y)",
                            "Call"
                        ],
                        [
                            "self.response_decoder(None, es, y)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor(tt, dtype=torch.long).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "np.asarray([sos])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(t, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(t, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "np.asarray([eos])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "ndarray": {
                    "value": "np.asarray([o])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "ndarray": {
                    "value": "np.asarray([o])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/multimodal_encoder.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self.l1f_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.l1f_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.l1b_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.l1b_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.emb_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.atV",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.atW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.atw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.lgd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_71": {
                "variable": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.l1f_h[m](s['h1'].cuda())",
                            "BinOp"
                        ],
                        [
                            "x + self.l1b_h[m](s['h1'].cuda())",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.enc_hsize[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_79": {
                "variable": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.l1f_h[m](s['h1'].cuda())",
                            "BinOp"
                        ],
                        [
                            "x + self.l1b_h[m](s['h1'].cuda())",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.enc_hsize[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_131": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.atw[m](torch.tanh(e1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_157": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "g + self.lgd[m](F.dropout(c[m]))",
                            "BinOp"
                        ],
                        [
                            "self.simple_modality_fusion(c, s)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "self.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_data[i] for i in six.moves.range(len(x_data))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_74": {
                "input": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x_list[0]) * F.sigmoid(x_list[1]) + s['c1'].cuda() * F.sigmoid(x_list[2])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x_list[0]) * F.sigmoid(x_list[1]) + s['c1'].cuda() * F.sigmoid(x_list[2])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_74": {
                "input": {
                    "value": "x_list[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_82": {
                "input": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x_list[0]) * F.sigmoid(x_list[1]) + s['c1'].cuda() * F.sigmoid(x_list[2])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x_list[0]) * F.sigmoid(x_list[1]) + s['c1'].cuda() * F.sigmoid(x_list[2])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_82": {
                "input": {
                    "value": "x_list[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_96": {
                "variable": {
                    "value": "fh1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.l1f_x[m](F.dropout(h0, training=self.train))",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "bh1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.l1b_x[m](F.dropout(h0, training=self.train))",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.bsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "(f, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_114": {
                "variable": {
                    "value": "h1[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embed_x(x[m], m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "self.in_size[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.enc_psize[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "enc_hsize_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * enc_hsize[m] if enc_hsize[m] > 0 else enc_psize[m]",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "att_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "enc_hsize_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * enc_hsize[m] if enc_hsize[m] > 0 else enc_psize[m]",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_73": {
                "input": {
                    "value": "x_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "input": {
                    "value": "x_list[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_81": {
                "input": {
                    "value": "x_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "input": {
                    "value": "x_list[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_146": {
                "input": {
                    "value": "c[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "enc_psize[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * enc_hsize[m]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "enc_hsize[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * enc_hsize[m]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "enc_psize[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * enc_hsize[m]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "enc_hsize[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * enc_hsize[m]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_95": {
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_x(x[m], m)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_131": {
                "input": {
                    "value": "e1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vh_m + ws.expand_as(vh_m)",
                            "BinOp"
                        ],
                        [
                            "e1.view(seqlen * bsize, asize)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_96": {
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_x(x[m], m)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_x(x[m], m)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluate.py": {
        "torch": {}
    }
}