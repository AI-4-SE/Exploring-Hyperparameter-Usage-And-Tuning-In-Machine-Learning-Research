{
    "utils_data.py": {
        "sklearn": {
            "ShuffleSplit_206": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ShuffleSplit_211": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ShuffleSplit_424": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage + val_percentage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ShuffleSplit_427": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage / (train_percentage + val_percentage)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ShuffleSplit_443": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage + val_percentage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ShuffleSplit_445": {
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_percentage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "pow_252": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float()",
                            "Call"
                        ],
                        [
                            "g.in_degrees().float()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_468": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float()",
                            "Call"
                        ],
                        [
                            "g.in_degrees().float()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "g.edges[g.edge_id(u, v)].data[subgraph_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isinf_253": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.pow(degs, -0.5).cuda()",
                            "Call"
                        ],
                        [
                            "th.pow(degs, -0.5).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "g.edges[g.edge_id(u, v)].data[subgraph_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isinf_469": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.pow(degs, -0.5).cuda()",
                            "Call"
                        ],
                        [
                            "th.pow(degs, -0.5).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_WGCN.py": {
        "torch": {
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': net.wgcn1.parameters(), 'weight_decay': args.weight_decay_layer_one}, {'params': net.wgcn2.parameters(), 'weight_decay': args.weight_decay_layer_two}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_106": {
                "variable": {
                    "value": "learning_rate_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.optim.Adam([{'params': net.wgcn1.parameters(), 'weight_decay': args.weight_decay_layer_one}, {'params': net.wgcn2.parameters(), 'weight_decay': args.weight_decay_layer_two}], lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.learning_rate_decay_patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "structural_info",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "structural_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.load_npz('data/{}/{}_structural_{}_{}_{}_{}.npz'.format(args.dataset, args.dataset, args.in_out_ratio, args.restart_rate, args.in_out_peak, args.dijkstra_k))",
                            "Call"
                        ],
                        [
                            "structural_info.toarray()",
                            "Call"
                        ],
                        [
                            "compute_structural_infot(args.dataset, args.directed, args.dijkstra_k, args.in_out_ratio, args.restart_rate, args.in_out_peak)",
                            "Call"
                        ],
                        [
                            "structural_info.toarray()",
                            "Call"
                        ],
                        [
                            "torch.tensor(structural_info)",
                            "Call"
                        ],
                        [
                            "structural_info.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_138": {
                "variable": {
                    "value": "train_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_139": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_logp[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eq_141": {
                "variable": {
                    "value": "train_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_pred[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "labels[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_141": {
                "variable": {
                    "value": "train_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_150": {
                "variable": {
                    "value": "val_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_151": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_logp[val_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[val_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eq_153": {
                "variable": {
                    "value": "val_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_pred[val_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "labels[val_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "val_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_154": {
                "variable": {
                    "value": "test_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_155": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_logp[test_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[test_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eq_157": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_pred[test_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "labels[test_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_layers.py": {
        "torch": {
            "Dropout_39": {
                "variable": {
                    "value": "self.in_feats_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_prob",
                            "Method Argument"
                        ],
                        [
                            "dropout_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.linear_for_each_division",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.W_si",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "h_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['Wh_{}'.format(self.currentI)], edges.dst['Wh_{}'.format(self.currentI)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_70": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_linear(h_concat)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(e, negative_slope=0.2)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.mailbox['e_{}'.format(self.currentI)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.atten_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feats",
                            "Method Argument"
                        ],
                        [
                            "in_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_feats",
                            "Method Argument"
                        ],
                        [
                            "out_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "variable": {
                    "value": "self.atten_feats_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_prob",
                            "Method Argument"
                        ],
                        [
                            "dropout_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.attention_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * out_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.attention_head_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_prob",
                            "Method Argument"
                        ],
                        [
                            "dropout_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.linear_feats_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_prob",
                            "Method Argument"
                        ],
                        [
                            "dropout_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results_from_subgraph_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack(results_from_subgraph_list, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "a_dropout * Wh_dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "all_attention_head_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[head(feature) for head in self.attention_heads]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_165": {
                "input": {
                    "value": "th.stack(all_attention_head_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feats",
                            "Method Argument"
                        ],
                        [
                            "in_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_feats",
                            "Method Argument"
                        ],
                        [
                            "out_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_124": {
                "tensors": {
                    "value": "results_from_subgraph_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_165": {
                "tensors": {
                    "value": "all_attention_head_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[head(feature) for head in self.attention_heads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "(feature.size(0), self.out_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_114": {
                "input": {
                    "value": "self.g.ndata.pop('h_{}'.format(self.pairs[j][0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.g.ndata.pop('h_{}'.format(self.pairs[j][1]))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils_structural.py": {
        "torch": {
            "tensor_293": {
                "variable": {
                    "value": "rw_left",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rw_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I - restart_rate * W",
                            "BinOp"
                        ],
                        [
                            "np.linalg.inv(rw_left)",
                            "Call"
                        ],
                        [
                            "rw_left",
                            "variable"
                        ],
                        [
                            "rw_left",
                            "variable"
                        ],
                        [
                            "torch.tensor(rw_left, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "ei",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(ei)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ei, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_295": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rw_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I - restart_rate * W",
                            "BinOp"
                        ],
                        [
                            "np.linalg.inv(rw_left)",
                            "Call"
                        ],
                        [
                            "rw_left",
                            "variable"
                        ],
                        [
                            "rw_left",
                            "variable"
                        ],
                        [
                            "torch.tensor(rw_left, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(ei)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ei, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_296": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(rw_left, ei)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ri, 1, 0)",
                            "Call"
                        ],
                        [
                            "abs(ri[0]).numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}