{
    "edge_generator_train.py": {
        "torch": {
            "RandomSampler_224": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TextDataset(tokenizer, args, file_path=args.train_data_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TextDataset(tokenizer, args, file_path=args.train_data_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_387": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TextDataset(tokenizer, args, file_path=args.eval_data_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_388": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TextDataset(tokenizer, args, file_path=args.eval_data_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_443": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_200": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_201": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_254": {
                "f": {
                    "value": "os.path.join(args.model_name, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_255": {
                "f": {
                    "value": "os.path.join(args.model_name, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__323": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__325": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_343": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(ckpt_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_346": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(ckpt_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_347": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(ckpt_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_175": {
                "input": {
                    "value": "examples['input_ids'] == tokenizer.cls_token_id",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_176": {
                "input": {
                    "value": "examples['input_ids'] == tokenizer.eos_token_id",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_355": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(ckpt_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_357": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(ckpt_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_358": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(ckpt_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "generate_edge.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "feature_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(all_evidence)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_183": {
                "obj": {
                    "value": "output_dic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'all_evidence_vecs': feature_tensor, 'all_evidence_num': all_evidence_num}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_pt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_48": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_utils.py": {
        "torch": {
            "zeros_241": {
                "variable": {
                    "value": "qa_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "rel_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "num_tuples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "qa_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "rel_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "num_tuples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_363": {
                "variable": {
                    "value": "statement_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents), max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "vocab.w2idx[PAD_TOK]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_364": {
                "variable": {
                    "value": "statement_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "concept_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_385": {
                "variable": {
                    "value": "node_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_915": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_916": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, num_choices, max_seq_length), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "[pad_token] * padding_length + input_ids",
                            "BinOp"
                        ],
                        [
                            "input_ids + [pad_token] * padding_length",
                            "BinOp"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids + [0] * padding_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_917": {
                "variable": {
                    "value": "input_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_lengths, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_100": {
                "variable": {
                    "value": "batch_adj[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_adj.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "emb_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_cpt_num, emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "emb_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num, all_embs[0].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "concept_ids[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concepts[:num_concept]",
                            "Subscript"
                        ],
                        [
                            "np.arange(num_concept)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.row",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.col",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_685": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_686": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_687": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_688": {
                "variable": {
                    "value": "all_output_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'output_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_689": {
                "variable": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_858": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_859": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_862": {
                "variable": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_944": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "qa_data[i][:len(cur_qa)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_qa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "rel_data[i][:len(cur_rel)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "emb_data[idx, :masked_embs.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_embs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embs[mask[:embs.shape[0]]]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, :emb_dim]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, emb_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "statement_data[i][:len(word_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "word_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[vocab.w2idx[w] if w in vocab else vocab.w2idx[UNK_TOK] for w in sent.split(' ')[:max_seq_len - 1] + [EOS_TOK]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_399": {
                "variable": {
                    "value": "emb_data[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "embs[:num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "cur_qa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "cur_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(k, j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_346": {
                "start": {
                    "value": "max_tuple_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_406": {
                "data": {
                    "value": "qm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "data": {
                    "value": "am",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_480": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/generator.py": {
        "torch": {
            "ones_82": {
                "variable": {
                    "value": "eos_not_in_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[list(range(seq_len)) for i in range(input_ids.size(0))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "argmax_102": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0].gather(1, start_idx).squeeze(1)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, torch.ones((attention_mask.shape[0], 1)).long().to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[position_ids, (position_ids[:, -1] + 1).unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat([attention_mask, torch.ones((attention_mask.shape[0], 1)).long().to(device)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_109": {
                "*size": {
                    "value": "(attention_mask.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/graph.py": {
        "torch": {
            "tensor_271": {
                "variable": {
                    "value": "concepts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts[:min(len(concepts), max_node_num)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "variable": {
                    "value": "qm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qm[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "am",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "am[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "ori_adj_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "concepts_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_303": {
                "variable": {
                    "value": "qmask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "variable": {
                    "value": "amask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_318": {
                "obj": {
                    "value": "(ori_adj_lengths, adj_lengths, concepts_ids, adj_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/layers.py": {
        "torch": {
            "randn_611": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_612": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_618": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_629": {
                "variable": {
                    "value": "triple_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3], [4, 5, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_634": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4], [5, 6, 7, 8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_635": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "type_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_209": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_210": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_211": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size // 2 if self.bidirectional else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_226": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb(inputs)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(embed)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([3, 2])",
                            "Call"
                        ],
                        [
                            "mask_or_lengths.float()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_228": {
                "variable": {
                    "value": "(rnn_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "full_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_245": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_246": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_248": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "contextualized_emb.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim // 2 if self.bidirectional else hidden_dim",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_259": {
                "variable": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((h, r, t), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_279": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_280": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_307": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_332": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_390": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_427": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "value_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_428": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_469": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_499": {
                "variable": {
                    "value": "ri",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_499": {
                "variable": {
                    "value": "ri",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_574": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "concept_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "concept_in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_169": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "masked_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb.weight * mask",
                            "BinOp"
                        ],
                        [
                            "self.emb.weight",
                            "Attribute"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.emb.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.emb.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_266": {
                "variable": {
                    "value": "(outputs_f, outputs_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_f[:, -1, :], outputs_b[:, 0, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_482": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector.masked_fill(mask.to(dtype=torch.uint8), mask_fill_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_583": {
                "variable": {
                    "value": "self.cpt_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "concept_in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "concept_out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_14": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_203": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input_size if i == 0 else self.hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden_size if i < self.num_layers else self.output_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_105": {
                "start": {
                    "value": "sl",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "sl",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_609": {
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_77": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_79": {
                "normalized_shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(5, 3)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optimization_utils.py": {
        "torch": {
            "Sequential_280": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(100, 10), nn.ReLU(), nn.Linear(10, 2)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_281": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_282": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_283": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_233": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_235": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "arange_53": {
                "variable": {
                    "value": "idx_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "idx_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}