{
    "src/distributed.py": {
        "torch": {}
    },
    "src/models/adam.py": {
        "torch": {
            "zeros_like_72": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/data_loader.py": {
        "torch": {
            "zeros_78": {
                "variable": {
                    "value": "all_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "customer_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "agent_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "all_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "customer_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "agent_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "src_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(t) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([max(t) for t in data]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_191": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad([x[5] for x in data], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_233": {
                "variable": {
                    "value": "self.idf_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.idf_info_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad(sum((x[2] for x in data), []), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad(sum((x[3] for x in data), []), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad([x[0] for x in data], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad([x[1] for x in data], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._pad([x[-2] for x in data], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/decoder_rnn.py": {
        "torch": {
            "Dropout_65": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_269": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_288": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_289": {
                "variable": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_302": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_304": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_319": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_t, input_feed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "decoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "decoder_outputs + [decoder_output]",
                            "BinOp"
                        ],
                        [
                            "self._run_forward_pass(emb, memory_bank, state, memory_lengths=memory_lengths)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoder_outputs).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_187": {
                "variable": {
                    "value": "decoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[0:hidden.size(0):2], hidden[1:hidden.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "variable": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_274": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_dim + self.hidden_size",
                            "BinOp"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_307": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_dim + self.hidden_size",
                            "BinOp"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/decoder_tf.py": {
        "torch": {
            "LayerNorm_36": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_37": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gt_61": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + self.mask[:, :tgt_pad_mask.size(1), :tgt_pad_mask.size(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout, topic=topic, topic_dim=topic_dim, split_noise=split_noise) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_157": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "all_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_input, input_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(saved_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_169": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_tokens.unsqueeze(1), emb[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/encoder.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size // num_directions",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_46": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_48": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_49": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_50": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "ape",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "dpe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_80": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_81": {
                "variable": {
                    "value": "dp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, max_len).unsqueeze(1) - mid_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_83": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim // 2, 2, dtype=torch.float) * -(math.log(10000.0) / dim * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_85": {
                "variable": {
                    "value": "ape[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ap.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_86": {
                "variable": {
                    "value": "ape[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ap.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_87": {
                "variable": {
                    "value": "dpe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dp.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_88": {
                "variable": {
                    "value": "dpe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dp.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(shift, 0)",
                            "Call"
                        ],
                        [
                            "shift",
                            "Method Argument"
                        ],
                        [
                            "shift",
                            "Method Argument"
                        ],
                        [
                            "shift",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_108": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(self.mid_pos, self.mid_pos + length, device=device).unsqueeze(0).expand(len(shift), length) - shift.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.split(index, pe_seg)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.mid_pos, self.mid_pos + emb.size(1), device=device).unsqueeze(0).expand(bsz, length) - shift.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.arange(self.mid_pos, self.mid_pos + emb.size(1), device=device).unsqueeze(0).expand(emb.size(0), emb.size(1)) - shift.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "pe_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(ex) for ex in shift]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_115": {
                "variable": {
                    "value": "dp_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dp_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dp_index, 0).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dpe, ape]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_132": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_134": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_135": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_211": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_212": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_232": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(d_model, heads, d_ff, dropout) for _ in range(num_inter_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_235": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "dpi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[torch.tensor([0], device=device), (ex[1:] + ex[:-1]) // 2 + 1, torch.tensor([length], device=device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_106": {
                "start": {
                    "value": "self.mid_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "self.mid_pos + length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_106": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_145": {
                "start": {
                    "value": "self.mid_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "self.mid_pos + emb.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_145": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_153": {
                "start": {
                    "value": "self.mid_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "self.mid_pos + emb.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_153": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_46": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_81": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_81": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_83": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_103": {
                "data": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ],
                        [
                            "emb.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/generator.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_11": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.terminate_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, mem_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.linear_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mem_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.score_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_31": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_32": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.terminate_state.unsqueeze(0).expand(batch_size, 1, -1), mem]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([batch_size, 1], dtype=mem_mask.dtype, device=mem_mask.device), mem_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.linear_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_109": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_110": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_141": {
                "variable": {
                    "value": "out_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - p_copy.expand_as(prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_142": {
                "variable": {
                    "value": "mul_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "p_copy.expand_as(attn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_attn.view(batch, -1, slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "[out_prob, copy_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(blank, device=scores.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "fill",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fill",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(fill, device=scores.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "mem_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mem_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mem_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/hier_model.py": {
        "torch": {
            "arange_145": {
                "variable": {
                    "value": "batch_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_147": {
                "variable": {
                    "value": "beam_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_154": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_369": {
                "variable": {
                    "value": "cls_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_vec[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequence_370": {
                "variable": {
                    "value": "cls_input",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "cls_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(clss, ex_segs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_sequence_372": {
                "variable": {
                    "value": "cls_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "cls_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_48": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq.index_select(0, select_indices), topk_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_296": {
                "variable": {
                    "value": "cust_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "src[:, 1].eq(self.customer_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequence_297": {
                "variable": {
                    "value": "cust_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "cust_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(src[:, 1].eq(self.customer_token), ex_segs)",
                            "Call"
                        ],
                        [
                            "pad_sequence(cust_mask, batch_first=True, padding_value=0).float()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_299": {
                "variable": {
                    "value": "agent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "src[:, 1].eq(self.agent_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequence_300": {
                "variable": {
                    "value": "agent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "agent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(src[:, 1].eq(self.agent_token), ex_segs)",
                            "Call"
                        ],
                        [
                            "pad_sequence(agent_mask, batch_first=True, padding_value=0).float()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "self.voc_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.voc_wrapper.get_emb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_76": {
                "variable": {
                    "value": "self.voc_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args.word_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_summ.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust_summ.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_noise.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust_noise.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_104": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_summ.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_noise.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust_summ.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust_noise.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/hier_model_trainer.py": {
        "torch": {
            "save_236": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'opt': self.args, 'optims': self.optims}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_path, 'model_step_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/hier_predictor.py": {
        "torch": {
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/loss.py": {
        "torch": {
            "kl_div_329": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_336": {
                "variable": {
                    "value": "num_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KLDivLoss_192": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_193": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_198": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_200": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(len(tgt_vocab))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_215": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tdata.eq(self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_307": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_loss(batch, **shard)",
                            "Call"
                        ],
                        [
                            "-out.log().mul(target.ne(self.pad).float())",
                            "UnaryOp"
                        ],
                        [
                            "self.criterion(scores, gtruth)",
                            "Call"
                        ],
                        [
                            "self.criterion(scores, align, target)",
                            "Call"
                        ],
                        [
                            "loss.view(-1, batch.batch_size).sum(0)",
                            "Call"
                        ],
                        [
                            "torch.div(loss, tgt_lens).sum()",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ],
                        [
                            "F.kl_div(output, target.float(), reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "tgt_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.tgt.ne(pad_ix).float().sum(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_307": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "backward_402": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*variables)",
                            "Call"
                        ]
                    ]
                },
                "grad_tensors": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*variables)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "retain_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_350": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "shard_size",
                            "Method Argument"
                        ],
                        [
                            "shard_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_399": {
                "tensor": {
                    "value": "state[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "shard_size",
                            "Method Argument"
                        ],
                        [
                            "shard_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/neural.py": {
        "torch": {
            "zeros_like_65": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_23": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_23": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "out_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_type == 'mlp'",
                            "Compare"
                        ]
                    ]
                }
            },
            "Softmax_143": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_144": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_245": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(align.view(batch * target_l, source_l))",
                            "Call"
                        ],
                        [
                            "align_vectors.view(batch, target_l, source_l)",
                            "Call"
                        ],
                        [
                            "align_vectors.squeeze(1)",
                            "Call"
                        ],
                        [
                            "align_vectors.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank + self.linear_cover(cover).view_as(memory_bank)",
                            "BinOp"
                        ],
                        [
                            "self.tanh(memory_bank)",
                            "Call"
                        ],
                        [
                            "memory_bank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_248": {
                "variable": {
                    "value": "concat_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_295": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_297": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_298": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_359": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_361": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_363": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_364": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_532": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.linear_cover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_371": {
                "variable": {
                    "value": "self.linear_topic_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_373": {
                "variable": {
                    "value": "self.linear_topic_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "topic_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_375": {
                "variable": {
                    "value": "self.linear_topic_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * self.dim_per_head * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.head_count",
                            "Attribute"
                        ],
                        [
                            "head_count",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_561": {
                "variable": {
                    "value": "context_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(scores)",
                            "Call"
                        ],
                        [
                            "topic_p * attn + (1 - topic_p) * topic_attn",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(query)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "layer_cache['memory_values']",
                            "Subscript"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_562": {
                "variable": {
                    "value": "context_topic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topic_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(topic_scores)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(query)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "layer_cache['memory_values']",
                            "Subscript"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_563": {
                "variable": {
                    "value": "p_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_raw, context_topic, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_563": {
                "variable": {
                    "value": "p_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_565": {
                "variable": {
                    "value": "topic_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_topic_w(p_vec).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_565": {
                "variable": {
                    "value": "topic_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_596": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(query)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "layer_cache['memory_values']",
                            "Subscript"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_36": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_42": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "torch.isnan(y_soft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.linear_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_176": {
                "input": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_t_.view(tgt_batch, tgt_len, tgt_dim)",
                            "Call"
                        ],
                        [
                            "h_t",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_s_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_s.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_537": {
                "variable": {
                    "value": "topic_scores_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topic_vec_summ.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "topic_key.unsqueeze(4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_541": {
                "variable": {
                    "value": "topic_scores_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topic_vec_noise.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "topic_key.unsqueeze(4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_547": {
                "variable": {
                    "value": "topic_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topic_vec.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "topic_key.unsqueeze(4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_592": {
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(query)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "layer_cache['memory_values']",
                            "Subscript"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_443": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'].to(device), key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'].to(device), value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_48": {
                "input": {
                    "value": "y_soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbels.log_softmax(dim)",
                            "Call"
                        ],
                        [
                            "gumbels.softmax(dim)",
                            "Call"
                        ],
                        [
                            "log_logits.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/optimizers.py": {
        "torch": {
            "SGD_216": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_218": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__266": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_224": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_63": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_130": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_226": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/reporter.py": {
        "torch": {}
    },
    "src/models/rl_model.py": {
        "torch": {
            "Embedding_41": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.pn_init_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty([1, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_182": {
                "variable": {
                    "value": "one_hot_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "onehot_tgt_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_185": {
                "variable": {
                    "value": "dup_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequence(onehot_tgt_list, batch_first=True, padding_value=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_192": {
                "variable": {
                    "value": "src_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.src",
                            "Attribute"
                        ],
                        [
                            "batch.src",
                            "Attribute"
                        ],
                        [
                            "batch.src",
                            "Attribute"
                        ],
                        [
                            "batch.src",
                            "Attribute"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_237": {
                "variable": {
                    "value": "src_mapped",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "src_mapped_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_238": {
                "variable": {
                    "value": "seg_mapped",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seg_mapped_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_239": {
                "variable": {
                    "value": "idx_mapped",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "idx_mapped_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_261": {
                "variable": {
                    "value": "sent_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sent_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_262": {
                "variable": {
                    "value": "sent_input",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sent_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ],
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ],
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_sequence_264": {
                "variable": {
                    "value": "sent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sent_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ],
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ],
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: x[0][1], pn_result))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rewards, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "base_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(base_rewards, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_321": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-probs * new_rewards",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_339": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "memory_bank.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_342": {
                "variable": {
                    "value": "sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch.src.ne(self.pad_token).sum(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "batch.ex_segs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_344": {
                "variable": {
                    "value": "ext_length",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_450": {
                "variable": {
                    "value": "batch_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "memory_bank.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_452": {
                "variable": {
                    "value": "beam_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_459": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_467": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_716": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([bsz, vec.size(-1)], device=self.device).unsqueeze(1), vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_717": {
                "variable": {
                    "value": "mapped_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vec[i].index_select(0, idx[i] + 1).unsqueeze(0) for i in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_733": {
                "variable": {
                    "value": "pm_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.mask_src",
                            "Attribute"
                        ],
                        [
                            "batch.mask_src",
                            "Attribute"
                        ],
                        [
                            "batch.mask_src",
                            "Attribute"
                        ],
                        [
                            "mask_src",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "le_733": {
                "variable": {
                    "value": "pm_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.args.mask_token_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_734": {
                "variable": {
                    "value": "ps_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_src[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_734": {
                "variable": {
                    "value": "ps_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.args.select_sent_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_763": {
                "variable": {
                    "value": "sent_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sent_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_764": {
                "variable": {
                    "value": "sent_input",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sent_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ],
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ],
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_sequence_766": {
                "variable": {
                    "value": "sent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sent_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ],
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ],
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_786": {
                "variable": {
                    "value": "pn_decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "pn_decoder_input_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[hier[i][tgt_labels[i]] for i in range(len(ex_segs))]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_788": {
                "variable": {
                    "value": "pn_decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.pn_init_token.unsqueeze(0).expand(len(ex_segs), 1, -1), pn_decoder_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_790": {
                "variable": {
                    "value": "pn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "pn_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask_src.new_zeros([len(tgt_label) + 1]) for tgt_label in tgt_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_851": {
                "variable": {
                    "value": "sent_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sent_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.sent_encoder(src_emb, 1 - mask_src)[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_852": {
                "variable": {
                    "value": "sent_input",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sent_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ],
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ],
                        [
                            "torch.split(sent_hid, ex_segs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_sequence_854": {
                "variable": {
                    "value": "sent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sent_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ],
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ],
                        [
                            "[mask_src.new_zeros([length]) for length in ex_segs]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_54": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "idx_tgt_extend",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[num + 1 for num in idx_tgt[i]] + [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_180": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_tgt_extend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([num + 1 for num in idx_tgt[i]] + [0], device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(ex_segs) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_sequence_243": {
                "variable": {
                    "value": "agent_mask_mapped",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "agent_mask_mapped_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_244": {
                "variable": {
                    "value": "customer_mask_mapped",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "customer_mask_mapped_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "last_pre_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[memory_bank[i][ids[i] - 1].unsqueeze(0) for i in range(ids.size(0))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq, last_pre_hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_label, ids - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_prob, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq.index_select(0, select_indices), topk_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_601": {
                "variable": {
                    "value": "cust_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "src[:, 1].eq(self.customer_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_602": {
                "variable": {
                    "value": "cust_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "cust_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(src[:, 1].eq(self.customer_token), ex_segs)",
                            "Call"
                        ],
                        [
                            "pad_sequence(cust_mask, batch_first=True, padding_value=0).float()",
                            "Call"
                        ],
                        [
                            "cust_mask.float()",
                            "Call"
                        ],
                        [
                            "cust_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_604": {
                "variable": {
                    "value": "agent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "src[:, 1].eq(self.agent_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "ex_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "batch.ex_segs",
                            "Attribute"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ],
                        [
                            "ex_segs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_605": {
                "variable": {
                    "value": "agent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "agent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(agent_mask_list, 0)[:self.args.max_pos]",
                            "Subscript"
                        ],
                        [
                            "self._map_src(src, ext_labels, ex_segs, self.seg_token)",
                            "Call"
                        ],
                        [
                            "torch.split(src[:, 1].eq(self.agent_token), ex_segs)",
                            "Call"
                        ],
                        [
                            "pad_sequence(agent_mask, batch_first=True, padding_value=0).float()",
                            "Call"
                        ],
                        [
                            "agent_mask.float()",
                            "Call"
                        ],
                        [
                            "self._map_src(src, tgt_labels, ex_segs, self.seg_token)",
                            "Call"
                        ],
                        [
                            "self._map_src(src, pn_result, ex_segs, self.seg_token)",
                            "Call"
                        ],
                        [
                            "self._map_src(src, ext_labels, ex_segs, self.seg_token)",
                            "Call"
                        ],
                        [
                            "agent_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_720": {
                "variable": {
                    "value": "gate_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.topic_gate_linear_summ(torch.cat([mapped_vec, topic_vec[0]], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_723": {
                "variable": {
                    "value": "gate_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.topic_gate_linear_noise(torch.cat([mapped_vec, topic_vec[1]], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_728": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.topic_gate_linear(torch.cat([mapped_vec, topic_vec], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "voc_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.voc_wrapper.get_emb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_96": {
                "variable": {
                    "value": "voc_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args.word_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.topic_gate_linear_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size + topic_emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "topic_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.word_emb_size * 3",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.topic_emb_linear_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "topic_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.word_emb_size * 3",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.topic_gate_linear_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size + topic_emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "topic_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.word_emb_size * 3",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.topic_emb_linear_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "topic_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.word_emb_size * 3",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.topic_gate_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size + topic_emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "topic_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.word_emb_size * 3",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.topic_emb_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "topic_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.word_emb_size * 3",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.args.word_emb_size * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_108": {
                "*size": {
                    "value": "[1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Categorical_370": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pn_generator(memory_bank, dec_out, memory_mask, tgt_mask, dup_mask)",
                            "Call"
                        ],
                        [
                            "log_probs + mask",
                            "BinOp"
                        ],
                        [
                            "self.generator(dec_out.transpose(0, 1).squeeze(0))",
                            "Call"
                        ],
                        [
                            "log_probs + topk_log_probs.view(-1).unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_377": {
                "tensor": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.sample()",
                            "Call"
                        ],
                        [
                            "log_probs.max(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "dist_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_len + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_612": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_summ.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust_summ.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_615": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_noise.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust_noise.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_620": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_672": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_summ.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust_summ.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_675": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_noise.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust_noise.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_680": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_cust.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "[self.cls_token]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "filted_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filted_sent, torch.tensor([sep_token], device=self.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_225": {
                "tensors": {
                    "value": "new_src_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor([self.cls_token], device=self.device)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "new_seg_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor([0], device=self.device)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "tensors": {
                    "value": "new_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor([-1], device=self.device)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "data": {
                    "value": "[reward] * pn_result[i][0][2].size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "data": {
                    "value": "[reward_base] * pn_result[i][0][2].size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_362": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pn_generator(memory_bank, dec_out, memory_mask, tgt_mask, dup_mask)",
                            "Call"
                        ],
                        [
                            "log_probs + mask",
                            "BinOp"
                        ],
                        [
                            "self.generator(dec_out.transpose(0, 1).squeeze(0))",
                            "Call"
                        ],
                        [
                            "log_probs + topk_log_probs.view(-1).unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_627": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_summ.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_629": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_noise.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_633": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_687": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_summ.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_689": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent_noise.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_693": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_agent.unsqueeze(1).expand(bsz, max_len, -1) * agent_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_716": {
                "*size": {
                    "value": "[bsz, vec.size(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_716": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_899": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "data": {
                    "value": "[segment_id] * filted_sent.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "[tgt_label_sorted[j]] * filted_sent.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "agent_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor([1], dtype=torch.uint8, device=self.device)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "customer_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor([1], dtype=torch.uint8, device=self.device)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_639": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust_summ.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_641": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust_noise.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_699": {
                "variable": {
                    "value": "topic_vec_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust_summ.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_summ.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_701": {
                "variable": {
                    "value": "topic_vec_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust_noise.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all_noise.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_705": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[topic_vec_cust.unsqueeze(1).expand(bsz, max_len, -1) * cust_mask.unsqueeze(-1), topic_vec_all.unsqueeze(1).expand(bsz, max_len, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_720": {
                "tensors": {
                    "value": "[mapped_vec, topic_vec[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_723": {
                "tensors": {
                    "value": "[mapped_vec, topic_vec[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_728": {
                "tensors": {
                    "value": "[mapped_vec, topic_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "[sep_token]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "[1] * filted_sent.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "[0] * filted_sent.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "data": {
                    "value": "[0] * filted_sent.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "[1] * filted_sent.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/rl_model_trainer.py": {
        "torch": {
            "save_277": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'opt': self.args, 'optims': self.optims}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_path, 'model_step_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/rl_predictor.py": {
        "torch": {
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/seq2seq.py": {
        "torch": {
            "arange_135": {
                "variable": {
                    "value": "batch_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_137": {
                "variable": {
                    "value": "beam_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_144": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_43": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq.index_select(0, select_indices), topk_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_38": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_93": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoder.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/seq2seq_predictor.py": {
        "torch": {
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/seq2seq_trainer.py": {
        "torch": {
            "save_232": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'opt': self.args, 'optims': self.optims}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_path, 'model_step_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/topic.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(vocab_size, 2 * hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.mu_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.sigma_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.theta_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "topic_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topic_num",
                            "Method Argument"
                        ],
                        [
                            "topic_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.topic_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(topic_num, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_like_44": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_linear(linear_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(log_sigma_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(self.topic_emb, voc_emb.transpose(0, 1)) / math.sqrt(self.hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "summ_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta_linear(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "noise_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta_linear(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "theta_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_logits + summ_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "theta_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_logits + noise_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_74": {
                "variable": {
                    "value": "logits_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(theta_summ, beta) + 1e-40",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_75": {
                "variable": {
                    "value": "logits_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(theta_noise, beta) + 1e-40",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta_linear(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_83": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(theta, beta) + 1e-40",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "topic_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(theta_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.topic_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "topic_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topic_num",
                            "Method Argument"
                        ],
                        [
                            "topic_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_45": {
                "input": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigma_linear(linear_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_54": {
                "input": {
                    "value": "1 + log_sigma_sq - mu.pow(2) - torch.exp(log_sigma_sq)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "input": {
                    "value": "self.topic_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "voc_emb.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "logits_summ * summ_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "input": {
                    "value": "theta_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(theta_logits + noise_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.topic_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "logits * id_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_54": {
                "input": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigma_linear(linear_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_74": {
                "input": {
                    "value": "theta_summ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(theta_logits + summ_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "input": {
                    "value": "theta_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(theta_logits + noise_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(theta_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/topic_model.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "self.voc_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.voc_wrapper.get_emb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_24": {
                "variable": {
                    "value": "self.voc_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args.word_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/topic_model_trainer.py": {
        "torch": {
            "save_208": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'opt': self.args, 'optims': self.optims}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_path, 'model_step_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/prepro/data_builder.py": {
        "torch": {
            "save_207": {
                "obj": {
                    "value": "file_counter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'all': Counter(), 'customer': Counter(), 'agent': Counter(), 'num': 0, 'voc_size': 0}",
                            "Dict"
                        ],
                        [
                            "file_counter",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pjoin(args.save_path, 'idf_info.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_338": {
                "obj": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pjoin(args.save_path, 'idf_info.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/train_abstractive.py": {
        "torch": {
            "load_278": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_307": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_336": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ],
                        [
                            "pt",
                            "variable"
                        ],
                        [
                            "args.test_from",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_375": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_384": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_370": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_371": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/translate/beam.py": {
        "torch": {
            "stack_179": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}