{
    "src/utils.py": {
        "sklearn": {
            "roc_auc_score_77": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_hat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_78": {
                "y_true": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_hat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y > x",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_34": {
                "variable": {
                    "value": "not_cancer_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(not_cancer_features).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_35": {
                "variable": {
                    "value": "cancer_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(cancer_features).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_36": {
                "variable": {
                    "value": "complete_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(not_cancer_dataset, cancer_dataset)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_43": {
                "variable": {
                    "value": "train_filtered_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "complete_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset((not_cancer_dataset, cancer_dataset))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(path, transform=Compose([ToTensor(), Normalize(mean, std)]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[idx for idx in train_dataset.indices if complete_dataset[idx][2][0, 0] == -1]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Subset_44": {
                "variable": {
                    "value": "test_filtered_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "complete_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset((not_cancer_dataset, cancer_dataset))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(path, transform=Compose([ToTensor(), Normalize(mean, std)]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[idx for idx in test_dataset.indices if complete_dataset[idx][2][0, 0] == -1]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Subset_45": {
                "variable": {
                    "value": "val_filtered_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "complete_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset((not_cancer_dataset, cancer_dataset))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(path, transform=Compose([ToTensor(), Normalize(mean, std)]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[idx for idx in test_dataset.indices if complete_dataset[idx][2][0, 0] == -1]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_54": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "not_cancer_cd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "-np.ones((len(cancer_features), 2, 25088))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_58": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "compas/model.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_12": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "isic-skin-cancer/ISIC/03_calculate_pretrained.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_53": {
                "variable": {
                    "value": "avg_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "((np.asarray(img) / 255.0 - mean) / std).swapaxes(0, 2).swapaxes(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "((np.asarray(img) / 255.0 - mean) / std).swapaxes(0, 2).swapaxes(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "isic-skin-cancer/ISIC/train.py": {
        "torch": {
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "model.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(weights).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_72": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights.double().float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_75": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_update",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "dataset": {
                    "value": "datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_124": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_149": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_122": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "add_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_137": {
                "variable": {
                    "value": "cur_cd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_137": {
                "input": {
                    "value": "torch.stack((rel[:, 0].masked_select(mask), irrel[:, 0].masked_select(mask)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "input": {
                    "value": "torch.stack((rel[:, 1].masked_select(mask), irrel[:, 1].masked_select(mask)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "(rel[:, 0].masked_select(mask), irrel[:, 0].masked_select(mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_138": {
                "tensors": {
                    "value": "(rel[:, 1].masked_select(mask), irrel[:, 1].masked_select(mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "isic-skin-cancer/ISIC/train_saliency.py": {
        "torch": {
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "model.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_101": {
                "variable": {
                    "value": "not_cancer_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(not_cancer_set.swapaxes(1, 3).swapaxes(2, 3)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_105": {
                "variable": {
                    "value": "cancer_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(cancer_set.swapaxes(1, 3).swapaxes(2, 2)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_110": {
                "variable": {
                    "value": "complete_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(not_cancer_dataset, cancer_dataset)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray([not_cancer_weight, cancer_weight])",
                            "Call"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(weights).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights.double().float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_update",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.classifier.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_115": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "model.classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "oj(model_path, pid + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "seg_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_seg(seg_path, not_cancer_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "np.zeros((len(cancer_set), 299, 299), dtype=np.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "dataset": {
                    "value": "datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_209": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_218": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_192": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/ColorMNIST/00_make_data.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/ColorMNIST/model.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_30": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/ColorMNIST/train.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_dataset('train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_dataset('val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_dataset('test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "x_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_83": {
                "variable": {
                    "value": "y_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_84": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_93": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_128": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "add_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "add_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_179": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_141": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_149": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/DecoyMNIST/00_make_data.py": {
        "torch": {}
    },
    "mnist/DecoyMNIST/train_mnist_decoy.py": {
        "torch": {
            "device_102": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "train_x_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {
                "variable": {
                    "value": "train_y_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_108": {
                "variable": {
                    "value": "complete_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_x_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_120": {
                "variable": {
                    "value": "test_x_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "test_y_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_122": {
                "variable": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_x_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.TensorDataset(test_x_tensor, test_y_tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_113": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_156": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_44": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "add_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "add_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_216": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_174": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_memory_allocated_191": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_184": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "input": {
                    "value": "torch.stack((rel.view(-1), irrel.view(-1)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_164": {
                "tensors": {
                    "value": "(rel.view(-1), irrel.view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/cd.py": {
        "torch": {
            "abs_30": {
                "variable": {
                    "value": "prop_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(relevant) - bias",
                            "BinOp"
                        ],
                        [
                            "module(relevant)",
                            "Call"
                        ],
                        [
                            "mask_both * relevant",
                            "BinOp"
                        ],
                        [
                            "avg_pooler(rel) * window_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_31": {
                "variable": {
                    "value": "prop_irrel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "irrel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(irrelevant) - bias",
                            "BinOp"
                        ],
                        [
                            "module(irrelevant)",
                            "Call"
                        ],
                        [
                            "mask_both * irrelevant",
                            "BinOp"
                        ],
                        [
                            "avg_pooler(irrel) * window_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_34": {
                "variable": {
                    "value": "prop_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(rel)",
                            "Call"
                        ],
                        [
                            "torch.div(prop_rel, prop_sum)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prop_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prop_rel + prop_irrel + stabilizing_constant",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_35": {
                "variable": {
                    "value": "prop_irrel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_irrel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(irrel)",
                            "Call"
                        ],
                        [
                            "torch.div(prop_irrel, prop_sum)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prop_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prop_rel + prop_irrel + stabilizing_constant",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "relevant.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_78": {
                "variable": {
                    "value": "ones_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "chunk_162": {
                "variable": {
                    "value": "(W_ii, W_if, W_ig, W_io)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.weight_ih_l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_163": {
                "variable": {
                    "value": "(W_hi, W_hf, W_hg, W_ho)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.weight_hh_l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_164": {
                "variable": {
                    "value": "(b_i, b_f, b_g, b_o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.bias_ih_l0 + weights.bias_hh_l0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "variable": {
                    "value": "word_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.embed(batch.text).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "relevant_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "irrelevant_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "prev_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "prev_irrel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "relevant_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_rel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_rel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((T, model.hidden_dim), device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_226": {
                "variable": {
                    "value": "irrel_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "irrelevant_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_irrel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_irrel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((T, model.hidden_dim), device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_236": {
                "variable": {
                    "value": "(W_ii, W_if, W_ig, W_io)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.weight_ih_l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_237": {
                "variable": {
                    "value": "(W_hi, W_hf, W_hg, W_ho)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.weight_hh_l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_238": {
                "variable": {
                    "value": "(b_i, b_f, b_g, b_o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.bias_ih_l0 + weights.bias_hh_l0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "variable": {
                    "value": "word_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.embed(batch_text).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "relevant_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "irrelevant_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "prev_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "variable": {
                    "value": "prev_irrel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(model.hidden_dim, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_312": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "relevant_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_rel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_rel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((T, model.hidden_dim), device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_313": {
                "variable": {
                    "value": "irrel_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "irrelevant_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_irrel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((model.hidden_dim, batch_size), device=torch.device(my_device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "o * new_irrel_h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((T, model.hidden_dim), device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_323": {
                "variable": {
                    "value": "(W_ii, W_if, W_ig, W_io)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights['weight_ih_l0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_324": {
                "variable": {
                    "value": "(W_hi, W_hf, W_hg, W_ho)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights['weight_hh_l0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_325": {
                "variable": {
                    "value": "(b_i, b_f, b_g, b_o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights['bias_ih_l0'] + weights['bias_hh_l0']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "relevant",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(T, model.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "irrelevant",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(T, model.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "relevant_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(T, model.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "irrelevant_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(T, model.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_391": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "relevant_h[T - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_392": {
                "variable": {
                    "value": "irrel_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight",
                            "Attribute"
                        ],
                        [
                            "model.hidden_to_label.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "irrelevant_h[T - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "test_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(relevant[:, None], irrelevant[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_65": {
                "variable": {
                    "value": "unpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_66": {
                "variable": {
                    "value": "avg_pooler",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "rel_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "rel_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_177": {
                "variable": {
                    "value": "rel_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hf",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "rel_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "irrel_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "irrel_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "irrel_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hf",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "irrel_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_213": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(W_io, word_vecs[i]) + torch.matmul(W_ho, prev_rel_h + prev_irrel_h) + b_o[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "rel_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "rel_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_252": {
                "variable": {
                    "value": "rel_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hf",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "rel_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "irrel_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_255": {
                "variable": {
                    "value": "irrel_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_256": {
                "variable": {
                    "value": "irrel_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hf",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_257": {
                "variable": {
                    "value": "irrel_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_260": {
                "variable": {
                    "value": "w_ii_contrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "w_ig_contrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "variable": {
                    "value": "w_if_contrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_if",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "variable": {
                    "value": "w_io_contrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_io",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_299": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(W_io, word_vecs[i]) + torch.matmul(W_ho, prev_rel_h + prev_irrel_h) + b_o[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "rel_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_342": {
                "variable": {
                    "value": "rel_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_343": {
                "variable": {
                    "value": "rel_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hf",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_344": {
                "variable": {
                    "value": "rel_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h",
                            "Name"
                        ],
                        [
                            "relevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_345": {
                "variable": {
                    "value": "irrel_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_346": {
                "variable": {
                    "value": "irrel_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hg",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_347": {
                "variable": {
                    "value": "irrel_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_hf",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_348": {
                "variable": {
                    "value": "irrel_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h",
                            "Name"
                        ],
                        [
                            "irrelevant_h[i - 1]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(model.hidden_dim, device=torch.device(my_device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_381": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(W_io, word_vecs[i]) + torch.matmul(W_ho, prev_rel_h + prev_irrel_h) + b_o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_398": {
                "input": {
                    "value": "torch.stack((output[0].reshape(-1), output[1].reshape(-1)), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_475": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model1_softmax[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "masked_select_475": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_exists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(start != -1).byte().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "irrelevant.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_69": {
                "variable": {
                    "value": "unpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pooler.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "pooler.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_70": {
                "variable": {
                    "value": "avg_pooler",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(pooler.kernel_size, pooler.kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(pooler.stride, pooler.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_337": {
                "variable": {
                    "value": "prev_rel_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_338": {
                "variable": {
                    "value": "prev_irrel_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(my_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_394": {
                "input": {
                    "value": "torch.abs(model.forward(batch) - model.hidden_to_label.bias.data - (scores + irrel_scores))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_398": {
                "tensors": {
                    "value": "(output[0].reshape(-1), output[1].reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_413": {
                "start": {
                    "value": "batch.label.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_425": {
                "start": {
                    "value": "batch.label.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_443": {
                "input": {
                    "value": "model_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cd_text_irreg_scores(batch.text[:, idx_nonzero], model1, start[idx_nonzero], stop[idx_nonzero])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_479": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_36": {
                "input": {
                    "value": "prop_irrel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(irrel)",
                            "Call"
                        ],
                        [
                            "torch.div(prop_irrel, prop_sum)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(torch.zeros(irrelevant.size()).to(device))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_168": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_169": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_170": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_171": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_242": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_243": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_244": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_245": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_328": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_329": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_330": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_331": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_431": {
                "input": {
                    "value": "masked_relevant",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model1_softmax[:, 1].masked_select(mask_decoy_in_relevant.byte())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_471": {
                "start": {
                    "value": "batch.label.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_472": {
                "start": {
                    "value": "batch.label.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_20": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_pool2d_118": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_124": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "input": {
                    "value": "W_ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "input": {
                    "value": "W_ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "input": {
                    "value": "W_if",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "input": {
                    "value": "W_io",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "input": {
                    "value": "W_ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "input": {
                    "value": "W_ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "input": {
                    "value": "W_if",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_195": {
                "input": {
                    "value": "W_io",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_353": {
                "input": {
                    "value": "W_ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_354": {
                "input": {
                    "value": "W_ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_355": {
                "input": {
                    "value": "W_if",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_356": {
                "input": {
                    "value": "W_io",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_358": {
                "input": {
                    "value": "W_ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_359": {
                "input": {
                    "value": "W_ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_360": {
                "input": {
                    "value": "W_if",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_361": {
                "input": {
                    "value": "W_io",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "word_vecs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h + prev_irrel_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h + prev_irrel_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_337": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_338": {
                "type": {
                    "value": "my_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_381": {
                "input": {
                    "value": "W_ho",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_rel_h + prev_irrel_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_416": {
                "input": {
                    "value": "model1_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_out((model1_output[0][correct_idx], model1_output[1][correct_idx]))",
                            "Call"
                        ],
                        [
                            "softmax_out((model1_output[0][correct_idx], model1_output[1][correct_idx]))",
                            "Call"
                        ],
                        [
                            "softmax_out((model1_output[0][correct_idx], model1_output[1][correct_idx]))",
                            "Call"
                        ],
                        [
                            "softmax_out(model1_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_444": {
                "input": {
                    "value": "model_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(model_output, dim=0)[batch.label[idx_nonzero], np.arange(len(idx_nonzero))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_394": {
                "input": {
                    "value": "model.forward(batch) - model.hidden_to_label.bias.data - (scores + irrel_scores)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_488": {
                "input": {
                    "value": "model2_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_in_relevant_toy(batch, start, stop, class_rules).cuda().float()",
                            "Call"
                        ],
                        [
                            "softmax_out(model2_output)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/score_funcs.py": {
        "torch": {
            "abs_18": {
                "variable": {
                    "value": "grad_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.autograd.grad(crit(model(im), target), im, create_graph=True)[0].sum(dim=1).masked_select(seg.byte()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_18": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_28": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Uniform_82": {
                "variable": {
                    "value": "uniform_dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_83": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_96": {
                "variable": {
                    "value": "grad_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.autograd.grad(loss, input_vecs, create_graph=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_98": {
                "variable": {
                    "value": "imps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_params * (imgs[img_idx] - imgs[idxs_random])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_49": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "baseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_torch.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "input_vecs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "input": {
                    "value": "model(input_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_60": {
                "input": {
                    "value": "model(input_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "grad_96": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "crit(pred, ind)",
                            "Call"
                        ],
                        [
                            "criterion(out, torch.zeros(M).to(device))",
                            "Call"
                        ],
                        [
                            "criterion(out, torch.zeros(num_samples).to(device))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_vecs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(M, baseline.size(1), baseline.size(2), baseline.size(3)).to(device)",
                            "Call"
                        ],
                        [
                            "imgs[idxs_random] * (1 - alpha[:, None, None, None]) + alpha[:, None, None, None] * imgs[img_idx]",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_14": {
                "input": {
                    "value": "torch.stack((rel.view(-1), irrel.view(-1)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_14": {
                "tensors": {
                    "value": "(rel.view(-1), irrel.view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_18": {
                "input": {
                    "value": "seg.byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_18": {
                "outputs": {
                    "value": "crit(model(im), target)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "text/SST/01_make_biased.py": {
        "torch": {}
    },
    "text/SST/model.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.hidden_to_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "text/SST/train_biased.py": {
        "torch": {
            "CrossEntropyLoss_119": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_73": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage.cuda(args.gpu)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "inputs.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vector_cache",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "inputs.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vector_cache",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_97": {
                "type": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "cd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_230": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_158": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_192": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "text/SST/train_biased_gender.py": {
        "torch": {
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_71": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_110": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage.cuda(args.gpu)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "inputs.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vector_cache",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "inputs.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vector_cache",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_95": {
                "type": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "cd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_225": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_157": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_191": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "text/SST/train_with_decoy.py": {
        "torch": {
            "CrossEntropyLoss_118": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_72": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_111": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage.cuda(args.gpu)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "inputs.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vector_cache",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "inputs.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vector_cache",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_96": {
                "type": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "cd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_227": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_158": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_192": {
                "input": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "text/model.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_21": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.hidden_to_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_63": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}