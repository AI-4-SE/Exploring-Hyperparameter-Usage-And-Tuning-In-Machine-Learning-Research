{
    "HA.py": {
        "sklearn": {
            "LabelEncoder_41": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelBinarizer_43": {
                "variable": {
                    "value": "oh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_181": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(x), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_182": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(x), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fasttext_classify.py": {
        "sklearn": {
            "shuffle_19": {
                "variable": {
                    "value": "data_for_fasttext",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data_for_fasttext",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "77",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_45": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "naive_bayes.py": {
        "sklearn": {
            "f1_score_40": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "our.py": {
        "sklearn": {
            "LabelEncoder_44": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelBinarizer_46": {
                "variable": {
                    "value": "oh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_160": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.85",
                    "type": "float",
                    "possible_values": []
                }
            },
            "accuracy_score_176": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(x), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_177": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(model.predict(x), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "rnn_based.py": {
        "sklearn": {
            "shuffle_32": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "77",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tfidf_classify.py": {
        "sklearn": {
            "shuffle_17": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "77",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_30": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SVC_37": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MLPClassifier_39": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(200, 200)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_51": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x[0] for x in data_test[[class_to_predict]].to_records(index=False)]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_vectors)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}