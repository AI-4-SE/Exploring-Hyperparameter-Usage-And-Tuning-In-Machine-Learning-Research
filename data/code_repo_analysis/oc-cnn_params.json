{
    "src/main/VGG_FACE_torch.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "VGG_FACE_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, (3, 3), (1, 1), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "Lambda(lambda x: x.view(1, -1) if 1 == len(x.size()) else x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "Lambda(lambda x: x.view(1, -1) if 1 == len(x.size()) else x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "Lambda(lambda x: x.view(1, -1) if 1 == len(x.size()) else x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "25088",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2622",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/main/classifier.py": {
        "torch": {
            "ReLU_5": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/main/getAUC.py": {
        "torch": {}
    },
    "src/main/light_cnn.py": {
        "torch": {
            "split_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "mfm(1, 48, 5, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "79077",
                            "Method Argument"
                        ],
                        [
                            "79077",
                            "Method Argument"
                        ],
                        [
                            "79077",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_82": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_90": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "79077",
                            "Method Argument"
                        ],
                        [
                            "79077",
                            "Method Argument"
                        ],
                        [
                            "79077",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8 * 8 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "79077",
                            "Method Argument"
                        ],
                        [
                            "79077",
                            "Method Argument"
                        ],
                        [
                            "79077",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_24": {
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_162": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_162": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/main/main.py": {
        "torch": {}
    },
    "src/main/train.py": {
        "torch": {
            "SGD_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': value, 'lr': 1 * args.lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageList(root=args.root_path, fileList=args.train_list, transform=transforms.Compose([transforms.RandomCrop(128), transforms.RandomHorizontalFlip(), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageList(root=args.root_path, fileList=args.val_list, transform=transforms.Compose([transforms.CenterCrop(128), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_132": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LightCNN_9Layers(num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "LightCNN_29Layers(num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "LightCNN_29Layers_v2(num_classes=args.num_classes)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_237": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_101": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/main/utils.py": {
        "torch": {}
    }
}