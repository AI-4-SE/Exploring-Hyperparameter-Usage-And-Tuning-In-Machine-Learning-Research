{
    "fmnet/preprocess.py": {
        "sklearn": {
            "kneighbors_graph_31": {
                "variable": {
                    "value": "graph_x_csr",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh(mesh)",
                            "Call"
                        ],
                        [
                            "verts / old_sqrt_area",
                            "BinOp"
                        ],
                        [
                            "verts",
                            "Method Argument"
                        ]
                    ]
                },
                "n_neighbors": {
                    "value": "NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NN",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "distance",
                    "type": "str",
                    "possible_values": []
                },
                "include_self": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fmnet/faust_dataset.py": {
        "torch": {}
    },
    "fmnet/loss.py": {
        "torch": {
            "sqrt_23": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((P * geodesic_dist) ** 2).sum((1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_24": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(((P * geodesic_dist) ** 2).sum((1, 2)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fmnet/model.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "352",
                            "Method Argument"
                        ],
                        [
                            "352",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(x).transpose(1, 2)).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "bmm_79": {
                "variable": {
                    "value": "F_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "evecs_trans_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evecs_trans_x",
                            "Method Argument"
                        ],
                        [
                            "evecs_trans_x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net(feat_x)",
                            "Call"
                        ],
                        [
                            "feat_x",
                            "Method Argument"
                        ],
                        [
                            "feat_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_80": {
                "variable": {
                    "value": "G_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "evecs_trans_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evecs_trans_y",
                            "Method Argument"
                        ],
                        [
                            "evecs_trans_y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feat_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net(feat_y)",
                            "Call"
                        ],
                        [
                            "feat_y",
                            "Method Argument"
                        ],
                        [
                            "feat_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_89": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(torch.bmm(evecs_y, C), evecs_trans_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.bmm(torch.bmm(evecs_y, C), evecs_trans_x))",
                            "Call"
                        ],
                        [
                            "F.normalize(P, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.softcor(feat_x, feat_y, evecs_x, evecs_y, evecs_trans_x, evecs_trans_y)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "input": {
                    "value": "x_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.fc1(x).transpose(1, 2)).transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.fc2(x_res).transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x_res + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_89": {
                "input": {
                    "value": "evecs_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evecs_y",
                            "Method Argument"
                        ],
                        [
                            "evecs_y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(F_hat[i].t() @ F_hat[i]) @ F_hat[i].t() @ G_hat[i]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(Cs, dim=0)",
                            "Call"
                        ],
                        [
                            "self.softcor(feat_x, feat_y, evecs_x, evecs_y, evecs_trans_x, evecs_trans_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "352",
                            "Method Argument"
                        ],
                        [
                            "352",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "inverse_84": {
                "input": {
                    "value": "F_hat[i].t() @ F_hat[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fmnet/train.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FAUSTDataset(args.dataroot, args.dim_basis, transform=composed)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_cpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_32": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "fmnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.b1, args.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_58": {
                "obj": {
                    "value": "fmnet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'epoch{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}