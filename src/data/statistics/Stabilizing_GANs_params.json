{
    "3DGAN/3DGAN.py": {
        "tensorflow": {
            "placeholder_263": {
                "variable": {
                    "value": "gamma_plh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_269": {
                "variable": {
                    "value": "disc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=D1_logits, labels=tf.ones_like(D1)) + tf.nn.sigmoid_cross_entropy_with_logits(logits=D2_logits, labels=tf.zeros_like(D2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_290": {
                "variable": {
                    "value": "wall_clock",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "wall_clock",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_291": {
                "variable": {
                    "value": "gen_iterations",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_iterations",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_293": {
                "variable": {
                    "value": "disc_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_294": {
                "variable": {
                    "value": "gen_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Uniform_245": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-tf.ones(FLAGS.z_dim)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "tf.ones(FLAGS.z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_247": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "tf.zeros(FLAGS.z_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "tf.ones(FLAGS.z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_258": {
                "name": {
                    "value": "D1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "D1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(mog_x).p",
                            "Attribute"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_259": {
                "name": {
                    "value": "D2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p",
                            "Attribute"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_264": {
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "gamma_plh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(), name='gamma')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_273": {
                "variable": {
                    "value": "gen_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=D2_logits, labels=tf.ones_like(D2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "gen_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.nn.sigmoid_cross_entropy_with_logits(logits=D2_logits, labels=tf.zeros_like(D2))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_277": {
                "name": {
                    "value": "unreg_disc_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "disc_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=D1_logits, labels=tf.ones_like(D1)) + tf.nn.sigmoid_cross_entropy_with_logits(logits=D2_logits, labels=tf.zeros_like(D2)))",
                            "Call"
                        ],
                        [
                            "disc_loss + gamma_plh / 2.0 * disc_reg",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_278": {
                "name": {
                    "value": "unreg_gen_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=D2_logits, labels=tf.ones_like(D2)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(-tf.nn.sigmoid_cross_entropy_with_logits(logits=D2_logits, labels=tf.zeros_like(D2)))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "gen",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_310": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_312": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_313": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir + '/summaries' + '/run_' + str(nr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, -axis[2], axis[1]], [axis[2], 0, -axis[0]], [-axis[1], axis[0], 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_117": {
                "variable": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(data, R)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones(3) / tf.sqrt(3.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_124": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "np.zeros(components)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mixture.sample(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "E",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_144": {
                "variable": {
                    "value": "weight_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "MOG_STDDEV",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_145": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_153": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(z, self.W1) + self.b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_154": {
                "variable": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.h1, self.W2) + self.b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_160": {
                "variable": {
                    "value": "weight_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "MOG_STDDEV",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_161": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_169": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.W1) + self.b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_170": {
                "variable": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.h1, self.W2) + self.b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.p_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_182": {
                "variable": {
                    "value": "grad_D1_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_D1_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(D1_logits, D1_arg)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_183": {
                "variable": {
                    "value": "grad_D2_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_D2_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(D2_logits, D2_arg)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_189": {
                "variable": {
                    "value": "reg_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(1.0 - D1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad_D1_logits_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_190": {
                "variable": {
                    "value": "reg_D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(D2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad_D2_logits_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "variable": {
                    "value": "disc_regularizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reg_D1 + reg_D2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_195": {
                "variable": {
                    "value": "reduce_mean_grad_D1_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D1_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(grad_D1_logits, axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_196": {
                "variable": {
                    "value": "reduce_mean_grad_D2_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D2_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(grad_D2_logits, axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "reduce_mean_reg_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reg_D1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.square(1.0 - D1), tf.square(grad_D1_logits_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_199": {
                "variable": {
                    "value": "reduce_mean_reg_D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reg_D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.square(D2), tf.square(grad_D2_logits_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_208": {
                "variable": {
                    "value": "grad_D1_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gradients(D1, D1_arg)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_209": {
                "variable": {
                    "value": "grad_D2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gradients(D2, D2_arg)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_210": {
                "variable": {
                    "value": "reduce_mean_grad_D1_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D1_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.gradients(D1, D1_arg)[0], axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_211": {
                "variable": {
                    "value": "reduce_mean_grad_D2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D2_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.gradients(D2, D2_arg)[0], axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_226": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_285": {
                "name": {
                    "value": "disc_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "disc_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=D1_logits, labels=tf.ones_like(D1)) + tf.nn.sigmoid_cross_entropy_with_logits(logits=D2_logits, labels=tf.zeros_like(D2)))",
                            "Call"
                        ],
                        [
                            "disc_loss + gamma_plh / 2.0 * disc_reg",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_104": {
                "name": {
                    "value": "RodriguesRotationMatrix",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "RotateAndTranslate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "MixtureOfGaussians",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.z_dim, hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units, hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_151": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_163": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units, hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_166": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_179": {
                "name": {
                    "value": "disc_reg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_201": {
                "name": {
                    "value": "grad_D1_logits_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_grad_D1_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(grad_D1_logits_norm)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_202": {
                "name": {
                    "value": "grad_D2_logits_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_grad_D2_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(grad_D2_logits_norm)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_203": {
                "name": {
                    "value": "grad_D_logits_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_grad_D_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduce_mean_grad_D1_logits_norm + reduce_mean_grad_D2_logits_norm",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_204": {
                "name": {
                    "value": "D1_regularizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_reg_D1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(reg_D1)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_205": {
                "name": {
                    "value": "D2_regularizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_reg_D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(reg_D2)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_206": {
                "name": {
                    "value": "disc_regularizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "disc_regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(reg_D1 + reg_D2)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_214": {
                "name": {
                    "value": "grad_D1_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_grad_D1_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(grad_D1_norm)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_215": {
                "name": {
                    "value": "grad_D2_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_grad_D2_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(grad_D2_norm)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_216": {
                "name": {
                    "value": "grad_D_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reduce_mean_grad_D_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduce_mean_grad_D1_norm + reduce_mean_grad_D2_norm",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_228": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_230": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_269": {
                "logits": {
                    "value": "D1_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(mog_x, reuse=True).p_logits",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(D1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_270": {
                "logits": {
                    "value": "D2_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p_logits",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(D2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_273": {
                "logits": {
                    "value": "D2_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p_logits",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(D2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_step_340": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "wall_clock",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='wall_clock', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_step_342": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "gen_iterations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='gen_iterations', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_116": {
                "shape": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_116": {
                "x": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "a": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.eye(3) + tf.sin(theta) * K + (1 - tf.cos(theta)) * tf.matmul(K, K)",
                            "BinOp"
                        ],
                        [
                            "RodriguesRotationMatrix(axis, theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "a": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "a": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_180": {
                "ys": {
                    "value": "D1_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(mog_x, reuse=True).p_logits",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "D1_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_181": {
                "ys": {
                    "value": "D2_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p_logits",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "D2_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "grad_D1_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(grad_D1_logits, axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_190": {
                "x": {
                    "value": "grad_D2_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(grad_D2_logits, axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_275": {
                "logits": {
                    "value": "D2_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p_logits",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(D2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_108": {
                "num_rows": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "a": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[0.0, -axis[2], axis[1]], [axis[2], 0, -axis[0]], [-axis[1], axis[0], 0.0]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[0.0, -axis[2], axis[1]], [axis[2], 0, -axis[0]], [-axis[1], axis[0], 0.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_153": {
                "a": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tfcds.Uniform(-tf.ones(FLAGS.z_dim), tf.ones(FLAGS.z_dim)).sample(FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tfcds.Normal(tf.zeros(FLAGS.z_dim), tf.ones(FLAGS.z_dim)).sample(FLAGS.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "a": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "a": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_208": {
                "ys": {
                    "value": "D1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(mog_x).p",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "D1_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_209": {
                "ys": {
                    "value": "D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "D2_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_245": {
                "shape": {
                    "value": "FLAGS.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "shape": {
                    "value": "FLAGS.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_247": {
                "shape": {
                    "value": "FLAGS.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_269": {
                "input": {
                    "value": "D1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(mog_x).p",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_270": {
                "input": {
                    "value": "D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_273": {
                "input": {
                    "value": "D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sin_108": {
                "x": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pi / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_108": {
                "x": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pi / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_275": {
                "input": {
                    "value": "D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(gen_x, reuse=True).p",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "carpedm20_DCGAN/main.py": {
        "tensorflow": {
            "run_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carpedm20_DCGAN/model.py": {
        "tensorflow": {
            "placeholder_142": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + self.image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self.bn_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "bn_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D1_logits, labels=tf.ones_like(self.D1)) + tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D2_logits, labels=tf.zeros_like(self.D2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_172": {
                "variable": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D2_logits, labels=tf.ones_like(self.D2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_185": {
                "variable": {
                    "value": "self.g_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "g_iterations",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_186": {
                "variable": {
                    "value": "self.d_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "d_iterations",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_188": {
                "variable": {
                    "value": "t_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_193": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_202": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_203": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir + '/summaries'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_618": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_26": {
                "variable": {
                    "value": "grad_D1_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(grad_D1_logits, [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_27": {
                "variable": {
                    "value": "grad_D2_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(grad_D2_logits, [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_35": {
                "variable": {
                    "value": "reg_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(1.0 - D1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad_D1_logits_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_36": {
                "variable": {
                    "value": "reg_D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(D2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad_D2_logits_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "self.disc_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reg_D1 + reg_D2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "self.reduce_mean_grad_D1_logits_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D1_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(grad_D1_logits, [self.batch_size, -1]), axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "self.reduce_mean_grad_D2_logits_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D2_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(grad_D2_logits, [self.batch_size, -1]), axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "self.reduce_mean_reg_D1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reg_D1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.square(1.0 - D1), tf.square(grad_D1_logits_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_45": {
                "variable": {
                    "value": "self.reduce_mean_reg_D2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reg_D2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.square(D2), tf.square(grad_D2_logits_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_54": {
                "variable": {
                    "value": "grad_D1_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(tf.gradients(D1, D1_arg)[0], [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_55": {
                "variable": {
                    "value": "grad_D2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(tf.gradients(D2, D2_arg)[0], [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "self.reduce_mean_grad_D1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D1_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(tf.gradients(D1, D1_arg)[0], [self.batch_size, -1]), axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "self.reduce_mean_grad_D2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_D2_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(tf.gradients(D2, D2_arg)[0], [self.batch_size, -1]), axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_154": {
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_165": {
                "name": {
                    "value": "D1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.D1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_166": {
                "name": {
                    "value": "D2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.D2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_174": {
                "name": {
                    "value": "unreg_disc_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_175": {
                "name": {
                    "value": "unreg_gen_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "gen",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_220": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_222": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "disc_reg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_47": {
                "name": {
                    "value": "grad_D1_logits_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_grad_D1_logits_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_48": {
                "name": {
                    "value": "grad_D2_logits_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_grad_D2_logits_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_49": {
                "name": {
                    "value": "grad_D_logits_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_grad_D_logits_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_50": {
                "name": {
                    "value": "D1_regularizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_reg_D1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_51": {
                "name": {
                    "value": "D2_regularizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_reg_D2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_52": {
                "name": {
                    "value": "disc_regularizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.disc_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_60": {
                "name": {
                    "value": "grad_D1_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_grad_D1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "grad_D2_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_grad_D2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "grad_D_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reduce_mean_grad_D_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_172": {
                "logits": {
                    "value": "self.D2_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.D2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_182": {
                "name": {
                    "value": "disc_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "disc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_step_350": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.g_iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "y_rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.random.choice(10, self.batch_size)",
                            "Call"
                        ],
                        [
                            "np.random.choice(10, self.batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l1(conv2d(h0, self.df_dim * 2, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l1(conv2d(h0_, self.df_dim + self.y_dim, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(h1, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(linear(h0_, self.gf_dim * 2 * s_h4 * s_w4, name='g_h1_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_449": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_476": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin', sum=sum)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_477": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_l0(h0, train=self.bn_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_480": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_l1(h1, train=self.bn_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_483": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_l2(h2, train=self.bn_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_486": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_l3(h3, train=self.bn_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_489": {
                "variable": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, name='d_h4_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "y_rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.random.choice(10, self.batch_size)",
                            "Call"
                        ],
                        [
                            "np.random.choice(10, self.batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_509": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_l0(linear(z, self.gfc_dim, name='g_h0_lin', sum=sum), train=self.bn_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_512": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_l1(linear(h0_, self.gf_dim * 2 * s_h4 * s_w4, name='g_h1_lin', sum=sum), train=self.bn_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_513": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l1(conv2d(h0, self.df_dim * 2, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l1(conv2d(h0_, self.df_dim + self.y_dim, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(h1, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(linear(h0_, self.gf_dim * 2 * s_h4 * s_w4, name='g_h1_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_516": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_l2(deconv2d(h1_, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2', sum=sum), train=self.bn_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_520": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l3(conv2d(h2, self.df_dim * 8, name='d_h3_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "linear(h2_, 1, name='d_h3_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l3(h3, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2_, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(h3)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_24": {
                "ys": {
                    "value": "D1_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "D1_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_25": {
                "ys": {
                    "value": "D2_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "D2_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "tensor": {
                    "value": "grad_D1_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(D1_logits, D1_arg)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "tensor": {
                    "value": "grad_D2_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(D2_logits, D2_arg)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "grad_D1_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(grad_D1_logits, [self.batch_size, -1]), axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_36": {
                "x": {
                    "value": "grad_D2_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(grad_D2_logits, [self.batch_size, -1]), axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "tf.gradients(D1, D1_arg)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "tf.gradients(D2, D2_arg)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_169": {
                "logits": {
                    "value": "self.D1_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.D1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_170": {
                "logits": {
                    "value": "self.D2_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(self.D2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_172": {
                "input": {
                    "value": "self.D2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_410": {
                "tensor": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l3(conv2d(h2, self.df_dim * 8, name='d_h3_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "linear(h2_, 1, name='d_h3_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l3(h3, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2_, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(h3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_413": {
                "name": {
                    "value": "d_h0_conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(conv2d(image, self.df_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, self.c_dim + self.y_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin', sum=sum), [-1, s_h16, s_w16, self.gf_dim * 8])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(h0, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(linear(z, self.gfc_dim, name='g_h0_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_414": {
                "name": {
                    "value": "d_h1_conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l1(conv2d(h0, self.df_dim * 2, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l1(conv2d(h0_, self.df_dim + self.y_dim, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(h1, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(linear(h0_, self.gf_dim * 2 * s_h4 * s_w4, name='g_h1_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_415": {
                "name": {
                    "value": "d_h2_conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l2(conv2d(h1, self.df_dim * 4, name='d_h2_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l2(linear(h1_, self.dfc_dim, name='d_h2_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2], name='g_h2', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(h2, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(deconv2d(h1_, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_416": {
                "name": {
                    "value": "d_h3_conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l3(conv2d(h2, self.df_dim * 8, name='d_h3_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "linear(h2_, 1, name='d_h3_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l3(h3, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2_, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(h3)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_417": {
                "name": {
                    "value": "d_h4_sigm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.sigmoid(h4)",
                    "type": "Call",
                    "possible_values": []
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_419": {
                "x": {
                    "value": "h4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, name='d_h4_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h4)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_440": {
                "name": {
                    "value": "d_h0_conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(conv2d(image, self.df_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, self.c_dim + self.y_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin', sum=sum), [-1, s_h16, s_w16, self.gf_dim * 8])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(h0, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(linear(z, self.gfc_dim, name='g_h0_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_441": {
                "name": {
                    "value": "d_h1_conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l1(conv2d(h0, self.df_dim * 2, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l1(conv2d(h0_, self.df_dim + self.y_dim, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(h1, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(linear(h0_, self.gf_dim * 2 * s_h4 * s_w4, name='g_h1_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_442": {
                "name": {
                    "value": "d_h2_lin",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l2(conv2d(h1, self.df_dim * 4, name='d_h2_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l2(linear(h1_, self.dfc_dim, name='d_h2_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2], name='g_h2', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(h2, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(deconv2d(h1_, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_443": {
                "name": {
                    "value": "d_h3_sigm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.sigmoid(h3)",
                    "type": "Call",
                    "possible_values": []
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_445": {
                "x": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l3(conv2d(h2, self.df_dim * 8, name='d_h3_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "linear(h2_, 1, name='d_h3_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l3(h3, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2_, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(h3)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_492": {
                "name": {
                    "value": "g_h0_lin",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(conv2d(image, self.df_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, self.c_dim + self.y_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin', sum=sum), [-1, s_h16, s_w16, self.gf_dim * 8])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(h0, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(linear(z, self.gfc_dim, name='g_h0_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_493": {
                "name": {
                    "value": "g_h1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l1(conv2d(h0, self.df_dim * 2, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l1(conv2d(h0_, self.df_dim + self.y_dim, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(h1, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(linear(h0_, self.gf_dim * 2 * s_h4 * s_w4, name='g_h1_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_494": {
                "name": {
                    "value": "g_h2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l2(conv2d(h1, self.df_dim * 4, name='d_h2_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l2(linear(h1_, self.dfc_dim, name='d_h2_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2], name='g_h2', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(h2, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(deconv2d(h1_, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_495": {
                "name": {
                    "value": "g_h3",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l3(conv2d(h2, self.df_dim * 8, name='d_h3_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "linear(h2_, 1, name='d_h3_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l3(h3, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2_, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(h3)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_496": {
                "name": {
                    "value": "g_h4_tanh",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, name='d_h4_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h4)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_523": {
                "name": {
                    "value": "g_h0_lin",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(conv2d(image, self.df_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, self.c_dim + self.y_dim, name='d_h0_conv', sum=sum))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin', sum=sum), [-1, s_h16, s_w16, self.gf_dim * 8])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(h0, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l0(linear(z, self.gfc_dim, name='g_h0_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_524": {
                "name": {
                    "value": "g_h1_lin",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l1(conv2d(h0, self.df_dim * 2, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l1(conv2d(h0_, self.df_dim + self.y_dim, name='d_h1_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(h1, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l1(linear(h0_, self.gf_dim * 2 * s_h4 * s_w4, name='g_h1_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_525": {
                "name": {
                    "value": "g_h2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l2(conv2d(h1, self.df_dim * 4, name='d_h2_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_l2(linear(h1_, self.dfc_dim, name='d_h2_lin', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2], name='g_h2', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(h2, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l2(deconv2d(h1_, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2', sum=sum), train=self.bn_train))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_526": {
                "name": {
                    "value": "g_h3_sigm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l3(conv2d(h2, self.df_dim * 8, name='d_h3_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "linear(h2_, 1, name='d_h3_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l3(h3, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2_, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(h3)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "fam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'disc'",
                            "MethodArgument"
                        ],
                        [
                            "'gen'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_54": {
                "ys": {
                    "value": "D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "D1_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_55": {
                "ys": {
                    "value": "D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "D2_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_169": {
                "input": {
                    "value": "self.D1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "self.D2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_417": {
                "x": {
                    "value": "h4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, name='d_h4_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h4)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_443": {
                "x": {
                    "value": "h3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lrelu(self.d_l3(conv2d(h2, self.df_dim * 8, name='d_h3_conv', sum=sum), train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "linear(h2_, 1, name='d_h3_lin', sum=sum)",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_l3(h3, train=self.bn_train))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2_, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3', sum=sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(h3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "carpedm20_DCGAN/ops.py": {
        "tensorflow": {
            "concat_32": {
                "values": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filters",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('filters', [k_h, k_w, input.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filters', [k_h, k_w, output_shape[-1], input.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filters",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_64": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('filters', [k_h, k_w, input.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filters', [k_h, k_w, output_shape[-1], input.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_77": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'identity_op'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'identity_op'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'identity_op'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'identity_op'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'linear'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'identity_op'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_51": {
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, filters, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_size], initializer=tf.constant_initializer(bias_start))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_54": {
                "name": {
                    "value": "name + '_filters'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('filters', [k_h, k_w, input.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filters', [k_h, k_w, output_shape[-1], input.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "net_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_55": {
                "name": {
                    "value": "name + '_biases'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_size], initializer=tf.constant_initializer(bias_start))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "net_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_67": {
                "value": {
                    "value": "deconv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input, filters, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_size], initializer=tf.constant_initializer(bias_start))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_70": {
                "name": {
                    "value": "name + '_filters'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('filters', [k_h, k_w, input.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filters', [k_h, k_w, output_shape[-1], input.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "net_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_71": {
                "name": {
                    "value": "name + '_biases'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_size], initializer=tf.constant_initializer(bias_start))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "net_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_84": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_88": {
                "name": {
                    "value": "name + '_weights'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "net_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_89": {
                "name": {
                    "value": "name + '_biases'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_size], initializer=tf.constant_initializer(bias_start))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "net_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_38": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_47": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_62": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_85": {
                "value": {
                    "value": "bias_start",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "carpedm20_DCGAN/utils.py": {
        "tensorflow": {
            "trainable_variables_24": {
                "variable": {
                    "value": "model_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "igul222_GANs/gan_64x64.py": {
        "tensorflow": {
            "DEFINE_string_31": {
                "name": {
                    "value": "mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "regularized_gan",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "MODE: regularized_gan, gan, wgan, wgan-gp, lsgan",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "architecture",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "choice of architecture - see GeneratorAndDiscriminator()",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "celebA",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "name of the dataset [ImageNet, lsun, celebA]",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "n_gpus",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of gpus to use",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "iters",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many iterations to train for",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "noise variance for regularizer [0.1]",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_38": {
                "name": {
                    "value": "decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "exponential annealing decay rate [0.01]",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "disc_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "(initial) learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "gen_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "(initial) learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "disc_update_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "discriminator update steps.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "batch size [64]",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "root_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "RUN_STATS",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "root directory [RUN_STATS]",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "directory to load the checkpoints from [None]",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_200": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_217": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, output, output, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_218": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_219": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_254": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_256": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_258": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_291": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_294": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_315": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_317": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_331": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_344": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_365": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_378": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_379": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_382": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_385": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_388": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_391": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_418": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_428": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim * 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_449": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_456": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_464": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_470": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_497": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_515": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_530": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_554": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_570": {
                "variable": {
                    "value": "all_real_data_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[BATCH_SIZE, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_677": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.normal(size=(BATCH_SIZE, 128)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_712": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D1_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_152": {
                "variable": {
                    "value": "D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_155": {
                "variable": {
                    "value": "grad_D1_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(grad_D1_logits, [BATCH_SIZE // len(DEVICES), -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_156": {
                "variable": {
                    "value": "grad_D2_logits_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(grad_D2_logits, [BATCH_SIZE // len(DEVICES), -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_164": {
                "variable": {
                    "value": "reg_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(1.0 - D1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad_D1_logits_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_165": {
                "variable": {
                    "value": "reg_D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(D2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad_D2_logits_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "disc_regularizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reg_D1 + reg_D2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_173": {
                "x": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_177": {
                "features": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_319": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_371": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_393": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_451": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_467": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_493": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_518": {
                "tensor": {
                    "value": "output / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_527": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_561": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, 64, 64])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_568": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_572": {
                "variable": {
                    "value": "split_real_data_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "all_real_data_conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[BATCH_SIZE, 3, 64, 64])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "len(DEVICES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_574": {
                "variable": {
                    "value": "split_real_data_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "len(DEVICES)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "all_real_data_conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[BATCH_SIZE, 3, 64, 64])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_579": {
                "variable": {
                    "value": "gamma_plh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_644": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_646": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_653": {
                "variable": {
                    "value": "clip_disc_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*clip_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_683": {
                "variable": {
                    "value": "all_fixed_noise_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_fixed_noise_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_fixed_noise_samples, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(0, all_fixed_noise_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_685": {
                "variable": {
                    "value": "all_fixed_noise_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "all_fixed_noise_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_fixed_noise_samples, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(0, all_fixed_noise_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "disc_reg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_194": {
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_194": {
                "x": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_206": {
                "inputs": {
                    "value": "[output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_211": {
                "inputs": {
                    "value": "[output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_584": {
                "variable": {
                    "value": "real_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "2 * (tf.cast(real_data_conv, tf.float32) / 255.0 - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[BATCH_SIZE // len(DEVICES), OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_640": {
                "inputs": {
                    "value": "gen_costs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_641": {
                "inputs": {
                    "value": "disc_costs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_656": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_658": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_153": {
                "ys": {
                    "value": "D1_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "D1_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_154": {
                "ys": {
                    "value": "D2_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "D2_arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "tensor": {
                    "value": "grad_D1_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(D1_logits, D1_arg)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE // len(DEVICES), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "tensor": {
                    "value": "grad_D2_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(D2_logits, D2_arg)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE // len(DEVICES), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_164": {
                "x": {
                    "value": "grad_D1_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(grad_D1_logits, [BATCH_SIZE // len(DEVICES), -1]), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_165": {
                "x": {
                    "value": "grad_D2_logits_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(tf.reshape(grad_D2_logits, [BATCH_SIZE // len(DEVICES), -1]), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_568": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_582": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_662": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_664": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_716": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_606": {
                "variable": {
                    "value": "slopes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_607": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_652": {
                "ref": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.params_with_name('Discriminator')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_value(var, clip_bounds[0], clip_bounds[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_668": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_670": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_all_variables_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_591": {
                "input_tensor": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_592": {
                "input_tensor": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_652": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.params_with_name('Discriminator')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_595": {
                "input_tensor": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_596": {
                "input_tensor": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_605": {
                "ys": {
                    "value": "Discriminator(interpolates)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[interpolates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_606": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_612": {
                "variable": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_613": {
                "variable": {
                    "value": "disc_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_622": {
                "variable": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_623": {
                "variable": {
                    "value": "disc_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real, labels=tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_584": {
                "x": {
                    "value": "real_data_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_606": {
                "x": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(Discriminator(interpolates), [interpolates])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_614": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real, labels=tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_616": {
                "variable": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(disc_fake, tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_617": {
                "variable": {
                    "value": "disc_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(disc_fake, tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_624": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_631": {
                "variable": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(disc_fake - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_612": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_613": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_614": {
                "logits": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_618": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(disc_real, tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_622": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_623": {
                "logits": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_624": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_616": {
                "labels": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_617": {
                "labels": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_618": {
                "labels": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_612": {
                "input": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_613": {
                "input": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_614": {
                "input": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_616": {
                "input": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_617": {
                "input": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_618": {
                "input": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_622": {
                "input": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_623": {
                "input": {
                    "value": "disc_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_624": {
                "input": {
                    "value": "disc_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_632": {
                "input_tensor": {
                    "value": "(disc_fake - 0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "igul222_GANs/tflib/__init__.py": {
        "tensorflow": {
            "Variable_25": {
                "variable": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "igul222_GANs/tflib/ops/batchnorm.py": {
        "tensorflow": {
            "moments_80": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "Variable",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_87": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / batch_size * mean + ((batch_size - 1.0) / batch_size * moving_mean)[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / batch_size * var + ((batch_size - 1.0) / batch_size * moving_variance)[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.offset', np.zeros(shape, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.offset', np.zeros(mean.get_shape()[-1], dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.offset', np.zeros(inputs.get_shape()[1], dtype='float32'))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.scale', np.ones(shape, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.scale', np.ones(var.get_shape()[-1], dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.scale', np.ones(inputs.get_shape()[1], dtype='float32'))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_9": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_12": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_14": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_17": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / batch_size * mean + ((batch_size - 1.0) / batch_size * moving_mean)[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / batch_size * var + ((batch_size - 1.0) / batch_size * moving_variance)[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.offset', np.zeros(shape, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.offset', np.zeros(mean.get_shape()[-1], dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.offset', np.zeros(inputs.get_shape()[1], dtype='float32'))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.scale', np.ones(shape, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.scale', np.ones(var.get_shape()[-1], dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.scale', np.ones(inputs.get_shape()[1], dtype='float32'))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(inputs)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_37": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_57": {
                "variable": {
                    "value": "(outputs, batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "_fused_batch_norm_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_fused_batch_norm_inference",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_22": {
                "a": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(inputs, mean, var, offset, scale, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(inputs, mean, var, offset, scale, 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fused_batch_norm_33": {
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.scale', np.ones(shape, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.scale', np.ones(var.get_shape()[-1], dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.scale', np.ones(inputs.get_shape()[1], dtype='float32'))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.offset', np.zeros(shape, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.offset', np.zeros(mean.get_shape()[-1], dtype='float32'))",
                            "Call"
                        ],
                        [
                            "lib.param(name + '.offset', np.zeros(inputs.get_shape()[1], dtype='float32'))",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_71": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "_force_updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "no_updates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda : outputs",
                            "Lambda"
                        ]
                    ]
                }
            },
            "transpose_20": {
                "a": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(inputs, mean, var, offset, scale, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(inputs, mean, var, offset, scale, 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_40": {
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / batch_size * mean + ((batch_size - 1.0) / batch_size * moving_mean)[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / batch_size * var + ((batch_size - 1.0) / batch_size * moving_variance)[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset[None, :, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale[None, :, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "float_stats_iter",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stats_iter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_66": {
                "variable": {
                    "value": "update_moving_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "moving_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.moving_mean', np.zeros(inputs.get_shape()[1], dtype='float32'), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "float_stats_iter / (float_stats_iter + 1) * moving_mean + 1 / (float_stats_iter + 1) * batch_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_67": {
                "variable": {
                    "value": "update_moving_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "moving_variance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.moving_variance', np.ones(inputs.get_shape()[1], dtype='float32'), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "float_stats_iter / (float_stats_iter + 1) * moving_variance + 1 / (float_stats_iter + 1) * batch_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_69": {
                "control_inputs": {
                    "value": "[update_moving_mean, update_moving_variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_70": {
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(is_training, _force_updates, no_updates)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "igul222_GANs/tflib/ops/conv2d.py": {
        "tensorflow": {
            "conv2d_106": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "lib.param(name + '.Filters', filter_values)",
                            "Call"
                        ],
                        [
                            "filters * (target_norms / norms)",
                            "BinOp"
                        ],
                        [
                            "filters * mask",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, stride, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bias_add_120": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=inputs, filter=filters, strides=[1, 1, stride, stride], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(result, _biases, data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.Biases', np.zeros(output_dim, dtype='float32'))",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_99": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(filters), reduction_indices=[0, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "weightnorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "filter_mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "tf.square(filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_99": {
                "x": {
                    "value": "filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "lib.param(name + '.Filters', filter_values)",
                            "Call"
                        ],
                        [
                            "filters * (target_norms / norms)",
                            "BinOp"
                        ],
                        [
                            "filters * mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "igul222_GANs/tflib/ops/deconv2d.py": {
        "tensorflow": {
            "transpose_89": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1], name='NCHW_to_NHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "NCHW_to_NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_94": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1], name='NCHW_to_NHWC')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.Filters', filter_values)",
                            "Call"
                        ],
                        [
                            "filters * tf.expand_dims(target_norms / norms, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[input_shape[0], 2 * input_shape[1], 2 * input_shape[2], output_dim]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(value=inputs, filter=filters, output_shape=output_shape, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(result, _biases)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, [0, 3, 1, 2], name='NHWC_to_NCHW')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "NHWC_to_NCHW",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bias_add_107": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(value=inputs, filter=filters, output_shape=output_shape, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(result, _biases)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, [0, 3, 1, 2], name='NHWC_to_NCHW')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.Biases', np.zeros(output_dim, dtype='float32'))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_85": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(filters), reduction_indices=[0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "weightnorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "tf.square(filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "target_norms / norms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_85": {
                "x": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.Filters', filter_values)",
                            "Call"
                        ],
                        [
                            "filters * tf.expand_dims(target_norms / norms, 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "igul222_GANs/tflib/ops/layernorm.py": {
        "tensorflow": {
            "moments_7": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "norm_axes",
                    "type": "Variable",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.offset', np.zeros(n_neurons, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(offset, [-1] + [1 for i in range(len(norm_axes) - 1)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + [1 for i in range(len(norm_axes) - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.scale', np.ones(n_neurons, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(scale, [-1] + [1 for i in range(len(norm_axes) - 1)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + [1 for i in range(len(norm_axes) - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_19": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "offset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.offset', np.zeros(n_neurons, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(offset, [-1] + [1 for i in range(len(norm_axes) - 1)])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lib.param(name + '.scale', np.ones(n_neurons, dtype='float32'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(scale, [-1] + [1 for i in range(len(norm_axes) - 1)])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "igul222_GANs/tflib/ops/linear.py": {
        "tensorflow": {
            "name_scope_37": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.W', weight_values)",
                            "Call"
                        ],
                        [
                            "weight * (target_norms / norms)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "reshaped_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, input_dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.W', weight_values)",
                            "Call"
                        ],
                        [
                            "weight * (target_norms / norms)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, tf.pack(tf.unpack(tf.shape(inputs))[:-1] + [output_dim]))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(result, lib.param(name + '.b', np.zeros((output_dim,), dtype='float32')))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack(tf.unpack(tf.shape(inputs))[:-1] + [output_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_140": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, tf.pack(tf.unpack(tf.shape(inputs))[:-1] + [output_dim]))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(result, lib.param(name + '.b', np.zeros((output_dim,), dtype='float32')))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "lib.param(name + '.b', np.zeros((output_dim,), dtype='float32'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(weight), reduction_indices=[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "weightnorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tf.square(weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_125": {
                "x": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lib.param(name + '.W', weight_values)",
                            "Call"
                        ],
                        [
                            "weight * (target_norms / norms)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_137": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}