{
    "demo/point_cloud_completion_demo.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_67": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(radius=0.1, bottleneck=1024, num_pts=2048, num_pts_observed=2048, num_vote_train=64, num_contrib_vote_train=10, num_vote_test=128, is_vote=True, task='completion')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(path).reshape(-1, 3)",
                            "Call"
                        ],
                        [
                            "torch.tensor(points, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "resample(points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "points.size(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/class_completion3D.py": {
        "torch": {
            "load_88": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "self.processed_paths[1]",
                            "Subscript"
                        ],
                        [
                            "download_url(self.url, self.root)",
                            "Call"
                        ],
                        [
                            "osp.join(self.raw_dir, f'{split}.list')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fpos['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fpos['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fy['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "self.collate(data_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/main.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "SummaryWriter_141": {
                "variable": {
                    "value": "logger",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs/{}'.format(model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_146": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_430": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_434": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(radius=args.radius, bottleneck=args.bottleneck, num_pts=args.num_pts, num_pts_observed=args.num_pts_observed, num_vote_train=args.num_vote_train, num_contrib_vote_train=args.num_contrib_vote_train, num_vote_test=args.num_vote_test, is_vote=args.is_vote, task=args.task)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "-results",
                            "UnaryOp"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(ious).mean().item()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_107": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "-results",
                            "UnaryOp"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(ious).mean().item()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "category",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.categories.split(',')",
                            "Call"
                        ],
                        [
                            "args.categories.split(',')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "-results",
                            "UnaryOp"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(ious).mean().item()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_113": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "chamfer_distance_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "categories_summary[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_242": {
                "variable": {
                    "value": "chamfer_distance_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "-results",
                            "UnaryOp"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(ious).mean().item()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=0).mean().item()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_248": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "category",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.categories.split(',')",
                            "Call"
                        ],
                        [
                            "args.categories.split(',')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unions",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(len(loader.dataset.categories))]",
                            "ListComp"
                        ],
                        [
                            "[[] for _ in range(len(loader.dataset.categories))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "mean_131": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(check_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "category",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.categories.split(',')",
                            "Call"
                        ],
                        [
                            "args.categories.split(',')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unions",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "miou",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(len(loader.dataset.categories))]",
                            "ListComp"
                        ],
                        [
                            "[[] for _ in range(len(loader.dataset.categories))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "mean_265": {
                "variable": {
                    "value": "miou",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_441": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "ious[cat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ious[cat]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "ious[cat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "ious[cat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ious[cat]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_264": {
                "variable": {
                    "value": "ious[cat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_126": {
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i.to(torch.float) / u.to(torch.float)",
                            "BinOp"
                        ],
                        [
                            "i.to(torch.float) / u.to(torch.float)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_260": {
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i.to(torch.float) / u.to(torch.float)",
                            "BinOp"
                        ],
                        [
                            "i.to(torch.float) / u.to(torch.float)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_102": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_103": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_104": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_207": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_208": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_209": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_223": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_utils.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "data.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "data.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "batch_one_hot_category",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_one_hot_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(category), 16))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(batch_one_hot_category).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "num_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/models.py": {
        "torch": {
            "randn_like_158": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.view(-1, num_vote, std.size(1))",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_165": {
                "variable": {
                    "value": "(mean, logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_168": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_idx, y_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((np.prod([it[2] for it in meshgrid]), ndim), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "GridSamplingLayer(batch_size, meshgrid)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(code, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_260": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneck + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_261": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_262": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_263": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_281": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneck + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_282": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_283": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_284": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_328": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_329": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_330": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_331": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_335": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_337": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_354": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck + 64 + 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_358": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_359": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_360": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_361": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_367": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(latent, 1)",
                            "Call"
                        ],
                        [
                            "latent.repeat(1, pos.size(1), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_369": {
                "variable": {
                    "value": "one_hot_category",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_batch_one_hot_category(category)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(one_hot_category, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_category.repeat(1, pos.size(1), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, pos, one_hot_category]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_375": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_377": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_379": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_215": {
                "variable": {
                    "value": "denorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_216": {
                "variable": {
                    "value": "nume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_340": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_381": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer(pos)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(torch.cat([x, new_pos], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.conv(x, (pos, pos[idx]), edge_index)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 45 ** 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, grid), 2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.fold1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((code, x), 1)",
                            "Call"
                        ],
                        [
                            "self.fold2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([latent, pos, one_hot_category], dim=-1).view(-1, self.bottleneck + 64 + 16)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "[x, new_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_93": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(optimal_z, x, one_hot_category)",
                            "Call"
                        ],
                        [
                            "self.decoder(optimal_z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(optimal_z, x, one_hot_category)",
                            "Call"
                        ],
                        [
                            "self.decoder(optimal_z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}