{
    "dataset/dataset_full.py": {
        "sklearn": {
            "train_test_split_161": {
                "variable": {
                    "value": "(self.train_context_codes, vt_context_codes, self.train_labels_1, vt_labels_1, self.train_labels_2, vt_labels_2, self.train_pids, vt_pids, self.train_intervals, vt_intervals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "context_codes",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "labels_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "pids",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_4": {
                    "value": "intervals",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_167": {
                "variable": {
                    "value": "(self.dev_context_codes, self.test_context_codes, self.dev_labels_1, self.test_labels_1, self.dev_labels_2, self.test_labels_2, self.dev_pids, self.test_pids, self.dev_intervals, self.test_intervals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "vt_context_codes",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "vt_labels_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "vt_labels_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "vt_pids",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_4": {
                    "value": "vt_intervals",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation.py": {
        "sklearn": {
            "confusion_matrix_39": {
                "variable": {
                    "value": "[[TN, FP], [FN, TP]]",
                    "type": "List",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "roc_auc_score_48": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "precision_recall_curve_54": {
                "variable": {
                    "value": "(precision_curve, recall_curve, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "f1_score_56": {
                "variable": {
                    "value": "f_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "auc_59": {
                "variable": {
                    "value": "pr_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall_curve",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision_curve",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KMeans_134": {
                "variable": {
                    "value": "k_means",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "dx_uni_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(dx_labels).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_136": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "dx_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(len(dx_codes), int)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "k_means.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "BiteNet/model_mh.py": {
        "tensorflow": {
            "Input_33": {
                "variable": {
                    "value": "self.code_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_visits, self.n_codes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_34": {
                "variable": {
                    "value": "self.interval_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_visits,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "interval_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_37": {
                "variable": {
                    "value": "self.inputs_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.code_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "variable": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.code_inputs, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "self.visit_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.code_inputs, tf.int32), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_120": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.code_inputs, self.interval_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Dense(self.digit3_size, activation='sigmoid')(s)",
                            "Call"
                        ],
                        [
                            "keras.layers.Dense(1, activation='sigmoid', use_bias=True)(s)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hierarchicalSA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_39": {
                "x": {
                    "value": "self.code_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Add_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_114": {
                "units": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_130": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.code_inputs, self.interval_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Dense(self.digit3_size, activation='sigmoid')(s)",
                            "Call"
                        ],
                        [
                            "keras.layers.Dense(1, activation='sigmoid', use_bias=True)(s)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "BiteNet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_142": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.code_inputs, self.interval_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[logits_dx, logits_re]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hierarchicalSA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_119": {
                "units": {
                    "value": "self.digit3_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSprop_122": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_129": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_140": {
                "units": {
                    "value": "self.digit3_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "los_dx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_141": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "los_re",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSprop_145": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/ap_layer.py": {
        "tensorflow": {
            "softmax_25": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(tensor)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(x, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft * tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/attentionLayers.py": {
        "tensorflow": {
            "expand_dims_22": {
                "variable": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_29": {
                "variable": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_23": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "(1 - tf.cast(val_mask, tf.float32)) * VERY_NEGATIVE_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name or 'exp_mask_for_high_rank'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "multiply_30": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(val_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name or 'mask_for_high_rank'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(inputs)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dense_74": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_120": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "not_equal_124": {
                "variable": {
                    "value": "inputs_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "map2_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask_for_high_rank(x, inputs_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft * inputs_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "soft_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "map2_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask_for_high_rank(x, inputs_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "soft_output",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "soft_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(map2_masked, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(soft_output, 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(soft_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_147": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "not_equal_152": {
                "variable": {
                    "value": "inputs_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "inputs_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_inputs_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_for_high_rank(inputs_embed, inputs_mask)",
                            "Call"
                        ],
                        [
                            "mask_for_high_rank(inputs_embed, inputs_mask)",
                            "Call"
                        ],
                        [
                            "mask_for_high_rank(tensor, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_162": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "not_equal_166": {
                "variable": {
                    "value": "inputs_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "variable": {
                    "value": "inputs_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_inputs_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_for_high_rank(inputs_embed, inputs_mask)",
                            "Call"
                        ],
                        [
                            "mask_for_high_rank(inputs_embed, inputs_mask)",
                            "Call"
                        ],
                        [
                            "mask_for_high_rank(tensor, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.reconstruct([x, inputs])",
                            "Call"
                        ],
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalDenseLayer(self.embedding_size, 'relu', False, None)(inputs_embed)",
                            "Call"
                        ],
                        [
                            "BatchNormalDenseLayer(self.embedding_size, 'linear', False, None)(x)",
                            "Call"
                        ],
                        [
                            "self.dense(tensor)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(x, mask)",
                            "Call"
                        ],
                        [
                            "self.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "self.leaner(x)",
                            "Call"
                        ],
                        [
                            "self.reconstruct([x, inputs])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "soft_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.reconstruct([x, inputs])",
                            "Call"
                        ],
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalDenseLayer(self.embedding_size, 'relu', False, None)(inputs_embed)",
                            "Call"
                        ],
                        [
                            "BatchNormalDenseLayer(self.embedding_size, 'linear', False, None)(x)",
                            "Call"
                        ],
                        [
                            "self.dense(tensor)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(x, mask)",
                            "Call"
                        ],
                        [
                            "self.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "self.leaner(x)",
                            "Call"
                        ],
                        [
                            "self.reconstruct([x, inputs])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "soft_output",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "soft_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(map2_masked, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(soft_output, 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(soft_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_188": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft * tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "variable": {
                    "value": "inputs_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_inputs_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_for_high_rank(inputs_embed, inputs_mask)",
                            "Call"
                        ],
                        [
                            "mask_for_high_rank(inputs_embed, inputs_mask)",
                            "Call"
                        ],
                        [
                            "mask_for_high_rank(tensor, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_212": {
                "variable": {
                    "value": "self.leaner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_228": {
                "variable": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(inputs, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_229": {
                "variable": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(inputs, tf.int32), -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(visit_mask, tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "variable": {
                    "value": "tensor_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(visit_mask, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_241": {
                "variable": {
                    "value": "l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A - B",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ord": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_251": {
                "variable": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_252": {
                "variable": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_253": {
                "variable": {
                    "value": "cos_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalize_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(A, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalize_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(B, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_275": {
                "variable": {
                    "value": "tensor_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Flatten(0)(tensor_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_281": {
                "variable": {
                    "value": "relevant",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, out_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, out_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * max_length + (tensor_len - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_303": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.linalg.diag(-tf.ones([self.skip_window], tf.int32)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_307": {
                "variable": {
                    "value": "rep_map_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_map_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ],
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ],
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.skip_window, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_319": {
                "variable": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "scaled_tanh(attention_fact, 5.0)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_327": {
                "variable": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask_for_high_rank(attention_fact, attn_mask)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(attention_fact, attn_mask)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(attention_fact, direct_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_329": {
                "variable": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_score * rep_map_tile",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_339": {
                "variable": {
                    "value": "gate_add",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Add()([linear_rep, linear_attn_result])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(gate_add, bias_2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('sigmoid')(gate_add)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_361": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.linalg.diag(-tf.ones([self.skip_window], tf.int32)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_365": {
                "variable": {
                    "value": "rep_map_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_map_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ],
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ],
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.skip_window, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_378": {
                "variable": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "scaled_tanh(attention_fact, 5.0)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_384": {
                "variable": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask_for_high_rank(attention_fact, attn_mask)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(attention_fact, attn_mask)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(attention_fact, direct_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_386": {
                "variable": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_score * rep_map_tile",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_413": {
                "variable": {
                    "value": "(sw_col, sw_row)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "sw_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(self.skip_window, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "sw_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(self.skip_window, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_432": {
                "variable": {
                    "value": "rep_map_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_map_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ],
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ],
                        [
                            "keras.layers.Reshape((1, self.skip_window, self.embedding_size))(rep_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep_map_tile, [1, self.skip_window, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.skip_window, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_447": {
                "variable": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "scaled_tanh(attention_fact, 5.0)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_454": {
                "variable": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_fact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "scaled_tanh(attention_fact, 5.0)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "keras.layers.Add()([dependent_etd, head_etd])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_1)",
                            "Call"
                        ],
                        [
                            "keras.layers.Activation('tanh')(attention_fact)",
                            "Call"
                        ],
                        [
                            "self.linear(attention_fact)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(attention_fact, bias_2)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(shape=(self.embedding_size,), initializer='zeros', dtype='float32', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_457": {
                "variable": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask_for_high_rank(attention_fact, attn_mask)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(attention_fact, attn_mask)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(attention_fact, direct_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_459": {
                "variable": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_score * rep_map_tile",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_17": {
                "x": {
                    "value": "1.0 / scale * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_416": {
                "variable": {
                    "value": "direct_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.linalg.diag(-tf.ones([self.skip_window], tf.int32)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_228": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_230": {
                "x": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(inputs, tf.int32), -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(visit_mask, tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_277": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Reshape_306": {
                "target_shape": {
                    "value": "(1, self.skip_window, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_310": {
                "target_shape": {
                    "value": "(1, self.skip_window, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_313": {
                "target_shape": {
                    "value": "(self.skip_window, 1, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Add_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Add_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_340": {
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_364": {
                "target_shape": {
                    "value": "(1, self.skip_window, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_368": {
                "target_shape": {
                    "value": "(1, self.skip_window, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_372": {
                "target_shape": {
                    "value": "(self.skip_window, 1, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Add_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_380": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_390": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "greater_419": {
                "variable": {
                    "value": "direct_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sw_row",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sw_col",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_421": {
                "variable": {
                    "value": "direct_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sw_col",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sw_row",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Reshape_431": {
                "target_shape": {
                    "value": "(1, self.skip_window, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_436": {
                "target_shape": {
                    "value": "(1, self.skip_window, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_440": {
                "target_shape": {
                    "value": "(self.skip_window, 1, self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Add_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_449": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_23": {
                "x": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_279": {},
            "diag_303": {
                "diagonal": {
                    "value": "-tf.ones([self.skip_window], tf.int32)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Activation_323": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_361": {
                "diagonal": {
                    "value": "-tf.ones([self.skip_window], tf.int32)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_46": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_416": {
                "diagonal": {
                    "value": "-tf.ones([self.skip_window], tf.int32)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_303": {
                "shape": {
                    "value": "[self.skip_window]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_361": {
                "shape": {
                    "value": "[self.skip_window]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_416": {
                "shape": {
                    "value": "[self.skip_window]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/common_layer.py": {
        "tensorflow": {
            "expand_dims_14": {
                "variable": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_20": {
                "variable": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_15": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "(1 - tf.cast(val_mask, tf.float32)) * VERY_NEGATIVE_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name or 'exp_mask_for_high_rank'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "multiply_21": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(val_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name or 'mask_for_high_rank'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "variable": {
                    "value": "self.leaner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "variable": {
                    "value": "inputs_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_inputs_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_for_high_rank(inputs_embed, inputs_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_15": {
                "x": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/common_model.py": {
        "tensorflow": {
            "Input_30": {
                "variable": {
                    "value": "self.code_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_visits, self.n_codes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_31": {
                "variable": {
                    "value": "self.interval_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_visits,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "interval_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_34": {
                "variable": {
                    "value": "self.inputs_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.code_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "variable": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.code_inputs, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "self.visit_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "visit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.code_inputs, tf.int32), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_36": {
                "x": {
                    "value": "self.code_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/embedding_layer.py": {
        "tensorflow": {
            "cast_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(x, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_46": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.shared_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(x, 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_44": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_30": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "self.hidden_size ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/ffn_layer.py": {
        "tensorflow": {
            "Dense_20": {
                "variable": {
                    "value": "self.filter_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filter_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.output_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/mh_layer.py": {
        "tensorflow": {
            "Dense_17": {
                "variable": {
                    "value": "self.q_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "variable": {
                    "value": "self.k_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "variable": {
                    "value": "self.v_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_36": {
                "variable": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(Q, self.num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_37": {
                "variable": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(K, self.num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(V, self.num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, self.num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_47": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.abs(K_), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(tf.abs(K_), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [1, Q_.get_shape().as_list()[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(tf.abs(K_), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [1, Q_.get_shape().as_list()[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Q_.get_shape().as_list()[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(key_masks, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "outputs + adder",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(outputs, rate=self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, tf.cast(val_mask, tf.float32), name='mask_for_high_rank')",
                            "Call"
                        ]
                    ]
                }
            },
            "range_56": {
                "variable": {
                    "value": "sw_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_57": {
                "variable": {
                    "value": "(sw_col, sw_row)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "sw_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_visits, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "sw_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_visits, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "outputs + adder",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(outputs, rate=self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, tf.cast(val_mask, tf.float32), name='mask_for_high_rank')",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_72": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.abs(Q_), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_73": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(tf.abs(Q_), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(query_masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [1, 1, tf.shape(K_)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_74": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(tf.abs(Q_), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(query_masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [1, 1, tf.shape(K_)[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(K_)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "outputs + adder",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(outputs, rate=self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, tf.cast(val_mask, tf.float32), name='mask_for_high_rank')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(V, self.num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_86": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, self.num_heads, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "variable": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_90": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "outputs + adder",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(outputs, rate=self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, tf.cast(val_mask, tf.float32), name='mask_for_high_rank')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(val_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mask_for_high_rank",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.linalg.diag(-tf.ones([n_visits], tf.int32)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "outputs + adder",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(outputs, rate=self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, tf.cast(val_mask, tf.float32), name='mask_for_high_rank')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_36": {
                "value": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_linear(queries)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_37": {
                "value": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_linear(keys)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_38": {
                "value": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_linear(keys)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "a": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, self.num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "tf.abs(K_)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "outputs + adder",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(outputs, rate=self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, tf.cast(val_mask, tf.float32), name='mask_for_high_rank')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_53": {
                "x": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(tf.abs(K_), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [1, Q_.get_shape().as_list()[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_62": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sw_row",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sw_col",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_64": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sw_col",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sw_row",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "tf.abs(Q_)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_86": {
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "outputs + adder",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(outputs, rate=self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, tf.cast(val_mask, tf.float32), name='mask_for_high_rank')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_90": {
                "x": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_47": {
                "x": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, self.num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_65": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.linalg.diag(-tf.ones([n_visits], tf.int32)) + 1, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.greater(sw_row, sw_col)",
                            "Call"
                        ],
                        [
                            "tf.greater(sw_col, sw_row)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_72": {
                "x": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, self.num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_60": {
                "diagonal": {
                    "value": "-tf.ones([n_visits], tf.int32)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, self.num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_60": {
                "shape": {
                    "value": "[n_visits]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/normalization_layer.py": {
        "tensorflow": {
            "reduce_mean_35": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_36": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_37": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_initializer_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/position_encoding_layer.py": {
        "tensorflow": {
            "cast_24": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(position, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_21": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(position, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(position)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_32": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(position, 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(position))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_28": {
                "x": {
                    "value": "tf.cast(tf.range(num_timescales), tf.float32) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.cast(tf.range(num_timescales), tf.float32) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_21": {
                "x": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(position, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_23": {
                "input": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(position, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_27": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_31": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, -1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_31": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, -1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_29": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils/rnn_layer.py": {
        "tensorflow": {
            "softmax_23": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(tensor)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "exp_mask_for_high_rank(x, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft * tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/BiteNet_mh_DX.py": {
        "tensorflow": {}
    },
    "train/BiteNet_mh_RE.py": {
        "tensorflow": {
            "EarlyStopping_32": {
                "variable": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_utils.py": {
        "tensorflow": {
            "reshape_14": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, n_visits, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_12": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_13": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}