{
    "argparser.py": {
        "torch": {
            "manual_seed_43": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bound_layers.py": {
        "torch": {
            "zeros_502": {
                "variable": {
                    "value": "ku",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "u.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_503": {
                "variable": {
                    "value": "bu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "u.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_504": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "l.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "l.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_42": {
                "variable": {
                    "value": "last_uA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_uA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_uA.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(last_uA, 1, 2)",
                            "Call"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ],
                        [
                            "last_uA",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_46": {
                "variable": {
                    "value": "last_lA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_lA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_lA.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(last_lA, 1, 2)",
                            "Call"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ],
                        [
                            "last_lA",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_354": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(h_U + h_L) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(h_U + h_L) / 2.0",
                            "BinOp"
                        ],
                        [
                            "h_U",
                            "variable"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_445": {
                "variable": {
                    "value": "Au_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Au_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Au.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Au_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_447": {
                "variable": {
                    "value": "Al_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Al_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Al.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Al_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_507": {
                "variable": {
                    "value": "bu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(u, l + 1e-06)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_508": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoundLinear(linear_layer.in_features, linear_layer.out_features, linear_layer.bias is not None, bound_opts)",
                            "Call"
                        ],
                        [
                            "BoundReLU(prev_layer, act_layer.inplace, bound_opts)",
                            "Call"
                        ],
                        [
                            "seq_model",
                            "variable"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_623": {
                "variable": {
                    "value": "ub_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ub_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_u.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "torch.max(ub_r, lb_r + 1e-08)",
                            "Call"
                        ],
                        [
                            "self.upper_u.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "torch.max(ub_r, lb_r + 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_795": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_U.view(x_U.size(0), -1, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.neg_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_822": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(u, l + 1e-06)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_825": {
                "variable": {
                    "value": "yl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoundLinear(linear_layer.in_features, linear_layer.out_features, linear_layer.bias is not None, bound_opts)",
                            "Call"
                        ],
                        [
                            "BoundReLU(prev_layer, act_layer.inplace, bound_opts)",
                            "Call"
                        ],
                        [
                            "seq_model",
                            "variable"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.neg_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_826": {
                "variable": {
                    "value": "yu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(u, l + 1e-06)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.neg_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_997": {
                "variable": {
                    "value": "out_U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoundLinear.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "BoundConv2d.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "x_U",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "x_U",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "list(self._modules.values())[-1].interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "last_module.interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "last_module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.neg_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_998": {
                "variable": {
                    "value": "out_L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoundLinear.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "BoundConv2d.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "x_L",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "x_L",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "list(self._modules.values())[-1].interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "last_module.interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "last_module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.neg_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_164": {
                "variable": {
                    "value": "Au_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Au",
                            "Method Argument"
                        ],
                        [
                            "Au",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_165": {
                "variable": {
                    "value": "Au_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Au",
                            "Method Argument"
                        ],
                        [
                            "Au",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_169": {
                "variable": {
                    "value": "Al_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Al",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Al",
                            "Method Argument"
                        ],
                        [
                            "Al",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_170": {
                "variable": {
                    "value": "Al_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Al",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Al",
                            "Method Argument"
                        ],
                        [
                            "Al",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_343": {
                "variable": {
                    "value": "deviation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(h_U - h_L) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(h_U - h_L) / 2.0",
                            "BinOp"
                        ],
                        [
                            "x2 - x1",
                            "BinOp"
                        ],
                        [
                            "large_values.float() * diff + small_values.float() * 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x_ub - x_lb) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.abs()",
                            "Call"
                        ],
                        [
                            "self.weight.abs()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_476": {
                "variable": {
                    "value": "Au_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Au_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Au.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Au_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_477": {
                "variable": {
                    "value": "Au_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Au_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Au.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Au_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_482": {
                "variable": {
                    "value": "Al_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Al_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Al.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Al_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_483": {
                "variable": {
                    "value": "Al_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Al_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Al.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Al_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_697": {
                "variable": {
                    "value": "h_U_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoundLinear.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "BoundConv2d.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "x_U",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "x_U",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "list(self._modules.values())[-1].interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "last_module.interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "last_module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ],
                        [
                            "h_U",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_707": {
                "variable": {
                    "value": "ub_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ub_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_u.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "torch.max(ub_r, lb_r + 1e-08)",
                            "Call"
                        ],
                        [
                            "self.upper_u.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "torch.max(ub_r, lb_r + 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_710": {
                "variable": {
                    "value": "lower_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_786": {
                "variable": {
                    "value": "self.kl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_A.size()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_789": {
                "variable": {
                    "value": "self.kl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.kl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_841": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_252": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "mat1": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(h_U + h_L) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(h_U + h_L) / 2.0",
                            "BinOp"
                        ],
                        [
                            "h_U",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_262": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "mat1": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_U",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_318": {
                "variable": {
                    "value": "next_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_A.view(shape[0] * shape[1], *shape[2:])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(output_padding0, output_padding1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_395": {
                "input": {
                    "value": "last_lA.reshape(-1, C_in, H_in, W_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "relu_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_397": {
                "input": {
                    "value": "last_uA.reshape(-1, C_in, H_in, W_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "nega_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_406": {
                "input": {
                    "value": "last_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_lb.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "relu_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_408": {
                "input": {
                    "value": "last_ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_ub.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "nega_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_412": {
                "input": {
                    "value": "last_uA.reshape(-1, C_in, H_in, W_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "relu_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_414": {
                "input": {
                    "value": "last_lA.reshape(-1, C_in, H_in, W_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "nega_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_419": {
                "input": {
                    "value": "last_ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_ub.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ],
                        [
                            "last_ub",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "relu_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "C.matmul(self.bias)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_421": {
                "input": {
                    "value": "last_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_lb.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ],
                        [
                            "last_lb",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "nega_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ],
                        [
                            "weight.clamp(max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_603": {
                "input": {
                    "value": "h_L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoundLinear.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "BoundConv2d.get_closed_form_bound(uA, ubias, lA, lbias, x0, norm, eps, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "x_L",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "x_L",
                            "variable"
                        ],
                        [
                            "module.interval_propagate(norm, h_U, h_L, eps)",
                            "Call"
                        ],
                        [
                            "list(self._modules.values())[-1].interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "last_module.interval_propagate(norm, h_U, h_L, eps, C)",
                            "Call"
                        ],
                        [
                            "last_module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(init_A, init_b, init_A, init_b, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "module.linear_propagate(uA, ubias, lA, lbias, x0, norm, eps, C=None, x_U=x_U, x_L=x_L)",
                            "Call"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ],
                        [
                            "h_L",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_848": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_349": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_349": {
                "input": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_855": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "l.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_1399": {
                "variable": {
                    "value": "init_A",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0.shape[1]",
                            "Subscript"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1399": {
                "variable": {
                    "value": "init_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1400": {
                "variable": {
                    "value": "init_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x0.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_152": {
                "input": {
                    "value": "Au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Au",
                            "Method Argument"
                        ],
                        [
                            "Au",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dual_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ],
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_153": {
                "input": {
                    "value": "Al",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Al",
                            "Method Argument"
                        ],
                        [
                            "Al",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dual_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ],
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_462": {
                "input": {
                    "value": "Au_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Au.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Au_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dual_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ],
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_464": {
                "input": {
                    "value": "Al_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Al.view(batch, CHW, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(Al_temp, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dual_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ],
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1 / (1 - 1 / p_norm)",
                            "BinOp"
                        ],
                        [
                            "np.float64(1.0) / (1 - 1.0 / norm)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_860": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "l.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_1283": {
                "variable": {
                    "value": "newC",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "c * h * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x_U.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_U.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_1417": {
                "variable": {
                    "value": "init_A",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "Ch * H * W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1417": {
                "variable": {
                    "value": "init_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1419": {
                "variable": {
                    "value": "init_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_uA.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "last_uA.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Au.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x0.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "Ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0.shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_854": {
                "*size": {
                    "value": "l.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_867": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_870": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "u.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_871": {
                "variable": {
                    "value": "ku",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "u.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_883": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_891": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_898": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_905": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kl.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bound_param_ramp.py": {
        "torch": {
            "max_249": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(u, l + 1e-06)",
                            "Call"
                        ],
                        [
                            "self.upper_u",
                            "Attribute"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_432": {
                "variable": {
                    "value": "self.right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(shape, device=device).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_521": {
                "variable": {
                    "value": "self.right.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mean_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_521": {
                "variable": {
                    "value": "self.right.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_430": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_434": {
                "variable": {
                    "value": "self.right_slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(shape, device=device).unsqueeze(0) * 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_435": {
                "variable": {
                    "value": "self.left_slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(shape, device=device).unsqueeze(0) * 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_450": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "right_mean * random_magnitude",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "self.right.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_432": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_432": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_511": {
                "variable": {
                    "value": "current_examples_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_examples + num_plus_examples",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_434": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_434": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_435": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_435": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_506": {
                "input": {
                    "value": "self.num_examples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "config.py": {
        "torch": {
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_file_close(os.path.join(config['path_prefix'], config['models_path'], model_id), 'pth', **kwargs)",
                            "Call"
                        ],
                        [
                            "os.path.join(config['path_prefix'], config['models_path'], model_id + '_best.pth')",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model', load=False)",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model', load=False)",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model')",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_202": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_file_close(os.path.join(config['path_prefix'], config['models_path'], model_id), 'pth', **kwargs)",
                            "Call"
                        ],
                        [
                            "os.path.join(config['path_prefix'], config['models_path'], model_id + '_best.pth')",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model', load=False)",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model', load=False)",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model')",
                            "Call"
                        ],
                        [
                            "get_path(config, model_id, 'model')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params['in_ch']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params['in_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params['in_dim']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "custom_attacks.py": {
        "torch": {
            "SGD_30": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X_pgd]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_39": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(X_pgd.data - X.data, -epsilon / std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_pgd.data - X.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "enable_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_39": {
                "input": {
                    "value": "X_pgd.data - X.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "torch.min(X_pgd, data_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_46": {
                "input": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(X.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.max(torch.min(X_pgd, data_max), data_min), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_42": {
                "input": {
                    "value": "X_pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(X.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + random_noise, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X_pgd.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.max(torch.min(X_pgd, data_max), data_min), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(X.data + eta, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.clamp(X_pgd, 0, 1.0), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets.py": {
        "torch": {
            "sqrt_31": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var / (len(loader.dataset) * w * h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset('./data', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "data.Subset(mnist_train, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min(multiprocessing.cpu_count(), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset('./data', train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "data.Subset(mnist_test, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min(multiprocessing.cpu_count(), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min(multiprocessing.cpu_count(), 6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "max(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min(multiprocessing.cpu_count(), 6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "test_batch_size",
                            "variable"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min(multiprocessing.cpu_count(), 6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "max(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min(multiprocessing.cpu_count(), 6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_40": {
                "variable": {
                    "value": "mnist_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset('./data', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "data.Subset(mnist_train, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_41": {
                "variable": {
                    "value": "mnist_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset('./data', train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "data.Subset(mnist_test, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_87": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_88": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_133": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='train', download=True, transform=transforms.Compose([transforms.RandomCrop(32, 4), transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "data.Subset(train, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_134": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('./data', split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "data.Subset(test, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ],
                        [
                            "list(range(num_examples))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "eval_models.py": {
        "torch": {
            "arange_58": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "lb.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_167": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % args.device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loader.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_239": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loader.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_240": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "data_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "data_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(0.0 - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_42": {
                "n": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_212": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "argmax_227": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models(data, method_opt='forward')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_287": {
                "variable": {
                    "value": "x_U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data + eps / std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_288": {
                "variable": {
                    "value": "x_L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data - eps / std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_293": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_293": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_214": {
                "f": {
                    "value": "models_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['models_path']",
                            "Subscript"
                        ],
                        [
                            "os.path.join(models_path, config['models'][0]['model_id'] + '_best.pth_test_eps_%.5f' % args.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_defs.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 8 * width, 4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 4 * width, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 4 * width, kernel_size=kernel_size, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 4 * width, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 4 * width, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 4 * width, 4, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 4 * width, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_339": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_348": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "*units",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channels, in_channels // groups, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_190": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n * w * h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_191": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(n * w * h).view(n * w * h, n, w, h)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view(b, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W.view(b1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "{'state_dict': save_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_fname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "neurons[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "neurons[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "8 * width * (in_dim // 4) * (in_dim // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "8 * width * (in_dim // 4) * (in_dim // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "8 * width * h * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "8 * width * (in_dim // 4) * (in_dim // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "16 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "16 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "32 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "32 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_163": {
                "in_features": {
                    "value": "2 * 2 * 64 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_252": {
                "f": {
                    "value": "dense_checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_checkpoint_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_283": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_286": {
                "in_features": {
                    "value": "8 * width * (in_dim // 2 + 2) * (in_dim // 2 + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_288": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_294": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_296": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_298": {
                "in_channels": {
                    "value": "4 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_300": {
                "in_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_303": {
                "in_features": {
                    "value": "8 * width * (in_dim // 4 + 1) * (in_dim // 4 + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_307": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 64",
                            "BinOp"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "linear_size",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neurons[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neurons[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_174": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model_defs_gowal.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 64, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 64, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 64, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 64, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 1, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "in_dim // 2 * (in_dim // 2) * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "in_dim // 2 * (in_dim // 2) * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "in_dim // 2 * (in_dim // 2) * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "in_dim // 2 * (in_dim // 2) * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "in_dim // 4 * (in_dim // 4) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "tensor_182": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loader.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_182": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loader.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_588": {
                "variable": {
                    "value": "tensorboard_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_log_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config['path_prefix'], config['models_path'], 'tensorboard_log')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "lb_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "ub_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "data_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "data_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(0.0 - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_226": {
                "variable": {
                    "value": "data_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data + eps / std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_227": {
                "variable": {
                    "value": "data_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data - eps / std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_604": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_606": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % cuda_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_651": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "StepLR_684": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=0.9, nesterov=True, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "opt",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr_decay_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['lr_decay_step']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['lr_decay_factor']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_716": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % device_ids[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_209": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_209": {
                "n": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_427": {
                "variable": {
                    "value": "lb_clamp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, method_opt='interval_range')",
                            "Call"
                        ],
                        [
                            "model(x_U=data_ub, x_L=data_lb, x0=data, norm=norm, eps=eps, C=c, method_opt='lbp')",
                            "Call"
                        ],
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, upper=False, lower=True, method_opt='full_backward_range')",
                            "Call"
                        ],
                        [
                            "lb_s.scatter(1, sa_labels, lb)",
                            "Call"
                        ],
                        [
                            "torch.max(ilb, llb)",
                            "Call"
                        ],
                        [
                            "anneal_weight([ilb, llb], min_weight=0.05, temp=1)",
                            "Call"
                        ],
                        [
                            "(ilb + llb) / 2",
                            "BinOp"
                        ],
                        [
                            "ilb",
                            "variable"
                        ],
                        [
                            "llb * beta + ilb * (1 - beta)",
                            "BinOp"
                        ],
                        [
                            "torch.max(ilb, clb)",
                            "Call"
                        ],
                        [
                            "anneal_weight([ilb, clb], min_weight=0.05, temp=1)",
                            "Call"
                        ],
                        [
                            "ilb",
                            "variable"
                        ],
                        [
                            "clb * beta + ilb * (1 - beta)",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "SGD_653": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MultiStepLR_688": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=0.9, nesterov=True, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "opt",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_decay_milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['lr_decay_milestones']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['lr_decay_factor']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_856": {
                "obj": {
                    "value": "{'state_dict': model.module.state_dict() if multi_gpu else model.state_dict(), 'epoch': t}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_path(config, model_id, 'model', load=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_211": {
                "start": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "unsqueeze_211": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_258": {
                "input": {
                    "value": "torch.argmax(output, dim=1) != labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "unstable",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_806": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_278": {
                "variable": {
                    "value": "unstable",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_504": {
                "input": {
                    "value": "(lb < 0).any(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_474": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_869": {
                "obj": {
                    "value": "{'state_dict': model.module.state_dict() if multi_gpu else model.state_dict(), 'robust_err': err, 'clean_err': clean_err, 'epoch': t}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "this_best_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_model_name + '_test_eps_%.5f' % target_eps[err_idx]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_288": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ilb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, method_opt='interval_range')",
                            "Call"
                        ],
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, method_opt='interval_range', disable_multi_gpu=not after_crown_or_lbp_settings['multi_gpu'])",
                            "Call"
                        ],
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, method_opt='interval_range')",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_474": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.named_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_365": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ilb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, method_opt='interval_range')",
                            "Call"
                        ],
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, method_opt='interval_range', disable_multi_gpu=not after_crown_or_lbp_settings['multi_gpu'])",
                            "Call"
                        ],
                        [
                            "model(norm=norm, x_U=data_ub, x_L=data_lb, eps=eps, C=c, method_opt='interval_range')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_258": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data, method_opt='forward', disable_multi_gpu=method == 'natural' or disable_multi_gpu, need_to_replicate=need_to_replicate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_390": {
                "n": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "utils/anneal_weight_bound.py": {
        "torch": {
            "stack_12": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_14": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "rand_28": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "rand_29": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}